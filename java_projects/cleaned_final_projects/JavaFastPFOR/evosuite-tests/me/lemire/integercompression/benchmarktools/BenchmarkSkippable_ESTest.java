/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 15 20:00:49 GMT 2024
 */

package me.lemire.integercompression.benchmarktools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import me.lemire.integercompression.benchmarktools.BenchmarkSkippable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BenchmarkSkippable_ESTest extends BenchmarkSkippable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Random.setNextRandom(Integer.MIN_VALUE);
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        BenchmarkSkippable.main(stringArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -8192
         //
         verifyException("me.lemire.integercompression.synth.UniformDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      BenchmarkSkippable.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("benchmark-20140214T202121.csv");
      FileSystemHandling.createFolder(evoSuiteFile0);
      try { 
        BenchmarkSkippable.main((String[]) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BenchmarkSkippable benchmarkSkippable0 = new BenchmarkSkippable();
  }
}
