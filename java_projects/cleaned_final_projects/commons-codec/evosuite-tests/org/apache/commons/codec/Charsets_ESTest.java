/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 22 14:22:10 GMT 2024
 */

package org.apache.commons.codec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.apache.commons.codec.Charsets;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Charsets_ESTest extends Charsets_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        Charsets.toCharset1("6");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 6
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Charset charset0 = Charsets.toCharset1((String) null);
      assertEquals("UTF-8", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        Charsets.toCharset1("RrMi)Z.+~");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // RrMi)Z.+~
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Charset charset0 = Charsets.toCharset0((Charset) null);
      assertTrue(charset0.canEncode());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Charset charset1 = Charsets.toCharset0(charset0);
      assertEquals("UTF-8", charset1.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Charsets charsets0 = new Charsets();
      Charset charset0 = Charsets.toCharset0(charsets0.UTF_16);
      assertEquals("UTF-16", charset0.toString());
  }
}
