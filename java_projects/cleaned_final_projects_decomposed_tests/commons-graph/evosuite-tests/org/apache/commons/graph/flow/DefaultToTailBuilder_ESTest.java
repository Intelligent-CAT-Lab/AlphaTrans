/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 22 14:59:56 GMT 2024
 */

package org.apache.commons.graph.flow;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.graph.DirectedGraph;
import org.apache.commons.graph.Mapper;
import org.apache.commons.graph.flow.DefaultToTailBuilder;
import org.apache.commons.graph.flow.MaxFlowAlgorithmSelector;
import org.apache.commons.graph.model.DirectedMutableGraph;
import org.apache.commons.graph.model.RevertedGraph;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultToTailBuilder_ESTest extends DefaultToTailBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DirectedMutableGraph<Integer, Integer> directedMutableGraph0 = new DirectedMutableGraph<Integer, Integer>();
      RevertedGraph<Integer, Integer> revertedGraph0 = new RevertedGraph<Integer, Integer>(directedMutableGraph0);
      Mapper<Integer, Integer> mapper0 = (Mapper<Integer, Integer>) mock(Mapper.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      DefaultToTailBuilder<Integer, Integer, Integer> defaultToTailBuilder0 = new DefaultToTailBuilder<Integer, Integer, Integer>(revertedGraph0, mapper0, integer0);
      MaxFlowAlgorithmSelector<Integer, Integer, Integer> maxFlowAlgorithmSelector0 = defaultToTailBuilder0.to(integer0);
      assertNotNull(maxFlowAlgorithmSelector0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultToTailBuilder<Integer, Integer, Integer> defaultToTailBuilder0 = new DefaultToTailBuilder<Integer, Integer, Integer>((DirectedGraph<Integer, Integer>) null, (Mapper<Integer, Integer>) null, (Integer) null);
      // Undeclared exception!
      try { 
        defaultToTailBuilder0.to((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // tail vertex has to be specifies when looking for the max flow
         //
         verifyException("org.apache.commons.graph.utils.Assertions", e);
      }
  }
}
