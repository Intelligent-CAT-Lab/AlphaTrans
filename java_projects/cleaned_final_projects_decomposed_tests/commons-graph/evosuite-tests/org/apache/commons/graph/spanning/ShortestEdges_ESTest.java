/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 22 14:56:39 GMT 2024
 */

package org.apache.commons.graph.spanning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.graph.Mapper;
import org.apache.commons.graph.SpanningTree;
import org.apache.commons.graph.model.InMemoryPath;
import org.apache.commons.graph.model.UndirectedMutableGraph;
import org.apache.commons.graph.spanning.ReverseDeleteGraph;
import org.apache.commons.graph.spanning.ShortestEdges;
import org.apache.commons.graph.weight.primitive.IntegerWeightBaseOperations;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ShortestEdges_ESTest extends ShortestEdges_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UndirectedMutableGraph<Integer, Integer> undirectedMutableGraph0 = new UndirectedMutableGraph<Integer, Integer>();
      Integer integer0 = Integer.valueOf(0);
      IntegerWeightBaseOperations integerWeightBaseOperations0 = new IntegerWeightBaseOperations();
      Mapper<Integer, Integer> mapper0 = (Mapper<Integer, Integer>) mock(Mapper.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(mapper0).map(anyInt());
      ShortestEdges<Integer, Integer, Integer> shortestEdges0 = new ShortestEdges<Integer, Integer, Integer>(undirectedMutableGraph0, integer0, integerWeightBaseOperations0, mapper0);
      shortestEdges0.addPredecessor((Integer) null, integer0);
      Integer integer1 = shortestEdges0.getWeight((Integer) null);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UndirectedMutableGraph<Integer, Integer> undirectedMutableGraph0 = new UndirectedMutableGraph<Integer, Integer>();
      Integer integer0 = Integer.valueOf(0);
      IntegerWeightBaseOperations integerWeightBaseOperations0 = new IntegerWeightBaseOperations();
      Mapper<Integer, Integer> mapper0 = (Mapper<Integer, Integer>) mock(Mapper.class, new ViolatedAssumptionAnswer());
      ShortestEdges<Integer, Integer, Integer> shortestEdges0 = new ShortestEdges<Integer, Integer, Integer>(undirectedMutableGraph0, integer0, integerWeightBaseOperations0, mapper0);
      shortestEdges0.addPredecessor(integer0, integer0);
      Integer integer1 = new Integer(0);
      int int0 = shortestEdges0.compare(integer1, integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UndirectedMutableGraph<Integer, Integer> undirectedMutableGraph0 = new UndirectedMutableGraph<Integer, Integer>();
      IntegerWeightBaseOperations integerWeightBaseOperations0 = new IntegerWeightBaseOperations();
      ShortestEdges<Integer, Integer, Integer> shortestEdges0 = new ShortestEdges<Integer, Integer, Integer>(undirectedMutableGraph0, (Integer) null, integerWeightBaseOperations0, (Mapper<Integer, Integer>) null);
      boolean boolean0 = shortestEdges0.hasWeight((Integer) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UndirectedMutableGraph<Integer, Integer> undirectedMutableGraph0 = new UndirectedMutableGraph<Integer, Integer>();
      IntegerWeightBaseOperations integerWeightBaseOperations0 = new IntegerWeightBaseOperations();
      ShortestEdges<Integer, Integer, Integer> shortestEdges0 = new ShortestEdges<Integer, Integer, Integer>(undirectedMutableGraph0, (Integer) null, integerWeightBaseOperations0, (Mapper<Integer, Integer>) null);
      shortestEdges0.addPredecessor((Integer) null, (Integer) null);
      boolean boolean0 = shortestEdges0.hasWeight((Integer) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntegerWeightBaseOperations integerWeightBaseOperations0 = new IntegerWeightBaseOperations();
      Integer integer0 = integerWeightBaseOperations0.identity();
      InMemoryPath<Integer, Integer> inMemoryPath0 = new InMemoryPath<Integer, Integer>(integer0, integer0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ReverseDeleteGraph<Integer, Integer> reverseDeleteGraph0 = new ReverseDeleteGraph<Integer, Integer>(inMemoryPath0, linkedList0, linkedList0);
      Mapper<Integer, Integer> mapper0 = (Mapper<Integer, Integer>) mock(Mapper.class, new ViolatedAssumptionAnswer());
      ShortestEdges<Integer, Integer, Integer> shortestEdges0 = new ShortestEdges<Integer, Integer, Integer>(reverseDeleteGraph0, integer0, integerWeightBaseOperations0, mapper0);
      boolean boolean0 = shortestEdges0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UndirectedMutableGraph<Integer, Integer> undirectedMutableGraph0 = new UndirectedMutableGraph<Integer, Integer>();
      IntegerWeightBaseOperations integerWeightBaseOperations0 = new IntegerWeightBaseOperations();
      Integer integer0 = integerWeightBaseOperations0.identity();
      ShortestEdges<Integer, Integer, Integer> shortestEdges0 = new ShortestEdges<Integer, Integer, Integer>(undirectedMutableGraph0, integer0, integerWeightBaseOperations0, (Mapper<Integer, Integer>) null);
      Integer integer1 = new Integer((-2001));
      shortestEdges0.addPredecessor(integer1, integer1);
      // Undeclared exception!
      try { 
        shortestEdges0.getWeight(integer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.graph.spanning.ShortestEdges", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UndirectedMutableGraph<Integer, Integer> undirectedMutableGraph0 = new UndirectedMutableGraph<Integer, Integer>();
      Integer integer0 = Integer.valueOf(0);
      IntegerWeightBaseOperations integerWeightBaseOperations0 = new IntegerWeightBaseOperations();
      Mapper<Integer, Integer> mapper0 = (Mapper<Integer, Integer>) mock(Mapper.class, new ViolatedAssumptionAnswer());
      ShortestEdges<Integer, Integer, Integer> shortestEdges0 = new ShortestEdges<Integer, Integer, Integer>(undirectedMutableGraph0, integer0, integerWeightBaseOperations0, mapper0);
      Integer integer1 = shortestEdges0.getWeight(integer0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UndirectedMutableGraph<Integer, Integer> undirectedMutableGraph0 = new UndirectedMutableGraph<Integer, Integer>();
      IntegerWeightBaseOperations integerWeightBaseOperations0 = new IntegerWeightBaseOperations();
      Integer integer0 = integerWeightBaseOperations0.identity();
      ShortestEdges<Integer, Integer, Integer> shortestEdges0 = new ShortestEdges<Integer, Integer, Integer>(undirectedMutableGraph0, integer0, integerWeightBaseOperations0, (Mapper<Integer, Integer>) null);
      Integer integer1 = new Integer((-2001));
      Integer integer2 = shortestEdges0.getWeight(integer1);
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UndirectedMutableGraph<Integer, Integer> undirectedMutableGraph0 = new UndirectedMutableGraph<Integer, Integer>();
      IntegerWeightBaseOperations integerWeightBaseOperations0 = new IntegerWeightBaseOperations();
      ShortestEdges<Integer, Integer, Integer> shortestEdges0 = new ShortestEdges<Integer, Integer, Integer>(undirectedMutableGraph0, (Integer) null, integerWeightBaseOperations0, (Mapper<Integer, Integer>) null);
      shortestEdges0.addPredecessor((Integer) null, (Integer) null);
      // Undeclared exception!
      try { 
        shortestEdges0.createSpanningTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.graph.spanning.ShortestEdges", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UndirectedMutableGraph<Integer, Integer> undirectedMutableGraph0 = new UndirectedMutableGraph<Integer, Integer>();
      Integer integer0 = Integer.valueOf(0);
      IntegerWeightBaseOperations integerWeightBaseOperations0 = new IntegerWeightBaseOperations();
      Mapper<Integer, Integer> mapper0 = (Mapper<Integer, Integer>) mock(Mapper.class, new ViolatedAssumptionAnswer());
      ShortestEdges<Integer, Integer, Integer> shortestEdges0 = new ShortestEdges<Integer, Integer, Integer>(undirectedMutableGraph0, integer0, integerWeightBaseOperations0, mapper0);
      SpanningTree<Integer, Integer, Integer> spanningTree0 = shortestEdges0.createSpanningTree();
      assertNotNull(spanningTree0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UndirectedMutableGraph<Integer, Integer> undirectedMutableGraph0 = new UndirectedMutableGraph<Integer, Integer>();
      IntegerWeightBaseOperations integerWeightBaseOperations0 = new IntegerWeightBaseOperations();
      Integer integer0 = integerWeightBaseOperations0.identity();
      ShortestEdges<Integer, Integer, Integer> shortestEdges0 = new ShortestEdges<Integer, Integer, Integer>(undirectedMutableGraph0, integer0, integerWeightBaseOperations0, (Mapper<Integer, Integer>) null);
      shortestEdges0.addPredecessor(integer0, integer0);
      Integer integer1 = new Integer((-1610612734));
      int int0 = shortestEdges0.compare(integer0, integer1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UndirectedMutableGraph<Integer, Integer> undirectedMutableGraph0 = new UndirectedMutableGraph<Integer, Integer>();
      IntegerWeightBaseOperations integerWeightBaseOperations0 = new IntegerWeightBaseOperations();
      Integer integer0 = integerWeightBaseOperations0.identity();
      ShortestEdges<Integer, Integer, Integer> shortestEdges0 = new ShortestEdges<Integer, Integer, Integer>(undirectedMutableGraph0, integer0, integerWeightBaseOperations0, (Mapper<Integer, Integer>) null);
      shortestEdges0.addPredecessor(integer0, integer0);
      int int0 = shortestEdges0.compare((Integer) null, integer0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UndirectedMutableGraph<Integer, Integer> undirectedMutableGraph0 = new UndirectedMutableGraph<Integer, Integer>();
      IntegerWeightBaseOperations integerWeightBaseOperations0 = new IntegerWeightBaseOperations();
      Integer integer0 = integerWeightBaseOperations0.identity();
      ShortestEdges<Integer, Integer, Integer> shortestEdges0 = new ShortestEdges<Integer, Integer, Integer>(undirectedMutableGraph0, integer0, integerWeightBaseOperations0, (Mapper<Integer, Integer>) null);
      int int0 = shortestEdges0.compare((Integer) null, integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UndirectedMutableGraph<Integer, Integer> undirectedMutableGraph0 = new UndirectedMutableGraph<Integer, Integer>();
      IntegerWeightBaseOperations integerWeightBaseOperations0 = new IntegerWeightBaseOperations();
      ShortestEdges<Integer, Integer, Integer> shortestEdges0 = new ShortestEdges<Integer, Integer, Integer>(undirectedMutableGraph0, (Integer) null, integerWeightBaseOperations0, (Mapper<Integer, Integer>) null);
      shortestEdges0.addPredecessor((Integer) null, (Integer) null);
      // Undeclared exception!
      try { 
        shortestEdges0.compare((Integer) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.graph.spanning.ShortestEdges", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UndirectedMutableGraph<Integer, Integer> undirectedMutableGraph0 = new UndirectedMutableGraph<Integer, Integer>();
      Integer integer0 = Integer.valueOf(0);
      IntegerWeightBaseOperations integerWeightBaseOperations0 = new IntegerWeightBaseOperations();
      Mapper<Integer, Integer> mapper0 = (Mapper<Integer, Integer>) mock(Mapper.class, new ViolatedAssumptionAnswer());
      ShortestEdges<Integer, Integer, Integer> shortestEdges0 = new ShortestEdges<Integer, Integer, Integer>(undirectedMutableGraph0, integer0, integerWeightBaseOperations0, mapper0);
      assertTrue(shortestEdges0.isEmpty());
      
      shortestEdges0.addPredecessor(integer0, integer0);
      boolean boolean0 = shortestEdges0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UndirectedMutableGraph<Integer, Integer> undirectedMutableGraph0 = new UndirectedMutableGraph<Integer, Integer>();
      Integer integer0 = Integer.valueOf(0);
      IntegerWeightBaseOperations integerWeightBaseOperations0 = new IntegerWeightBaseOperations();
      Mapper<Integer, Integer> mapper0 = (Mapper<Integer, Integer>) mock(Mapper.class, new ViolatedAssumptionAnswer());
      ShortestEdges<Integer, Integer, Integer> shortestEdges0 = new ShortestEdges<Integer, Integer, Integer>(undirectedMutableGraph0, integer0, integerWeightBaseOperations0, mapper0);
      String string0 = shortestEdges0.toString();
      assertNotNull(string0);
  }
}
