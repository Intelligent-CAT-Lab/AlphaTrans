/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 22 14:16:47 GMT 2024
 */

package org.apache.commons.graph.export;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.util.AbstractMap;
import org.apache.commons.graph.Mapper;
import org.apache.commons.graph.export.DotExporter;
import org.apache.commons.graph.model.DirectedMutableGraph;
import org.apache.commons.graph.model.InMemoryPath;
import org.apache.commons.graph.model.InMemoryWeightedPath;
import org.apache.commons.graph.model.RevertedGraph;
import org.apache.commons.graph.model.UndirectedMutableGraph;
import org.apache.commons.graph.weight.Monoid;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractExporter_ESTest extends AbstractExporter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DirectedMutableGraph<StringWriter, StringWriter> directedMutableGraph0 = new DirectedMutableGraph<StringWriter, StringWriter>();
      DotExporter<StringWriter, StringWriter> dotExporter0 = new DotExporter<StringWriter, StringWriter>(directedMutableGraph0, "org.apache.commons.graph.export.GraphExportException");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      dotExporter0.to1(pipedOutputStream0);
      dotExporter0.to1(pipedOutputStream0);
      assertEquals(136, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2094);
      InMemoryPath<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>> inMemoryPath0 = new InMemoryPath<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>>(stringWriter0, stringWriter0);
      DotExporter<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>> dotExporter0 = new DotExporter<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>>(inMemoryPath0, "%;DLVS~/i;E!");
      Mapper<AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>, String> mapper0 = (Mapper<AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>, String>) mock(Mapper.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(mapper0).map(any(java.util.AbstractMap.SimpleImmutableEntry.class));
      DotExporter<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>> dotExporter1 = dotExporter0.withEdgeLabels(mapper0);
      AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>(stringWriter0, stringWriter0);
      inMemoryPath0.addConnectionInTail(stringWriter0, abstractMap_SimpleImmutableEntry0, stringWriter0);
      dotExporter1.to2(stringWriter0);
      assertEquals("Graph generated by Apache Commons Graph on Fri Feb 14 20:21:21 GMT 2014\ngraph %;DLVS~/i;E! {\n  null  null  null -- null [label=\"null\"];\n}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2094);
      InMemoryPath<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>> inMemoryPath0 = new InMemoryPath<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>>(stringWriter0, stringWriter0);
      DotExporter<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>> dotExporter0 = new DotExporter<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>>(inMemoryPath0, "%;DLVS~/i;E!");
      // Undeclared exception!
      try { 
        dotExporter0.to1((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Impossibe to export the graph in a null stream
         //
         verifyException("org.apache.commons.graph.utils.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DirectedMutableGraph<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>> directedMutableGraph0 = new DirectedMutableGraph<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>>();
      DotExporter<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>> dotExporter0 = new DotExporter<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>>(directedMutableGraph0, "");
      MockFile mockFile0 = new MockFile("");
      // Undeclared exception!
      try { 
        dotExporter0.to0(mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.FileNotFoundException
         //
         verifyException("org.apache.commons.graph.export.AbstractExporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2094);
      InMemoryPath<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>> inMemoryPath0 = new InMemoryPath<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>>(stringWriter0, stringWriter0);
      DotExporter<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>> dotExporter0 = new DotExporter<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>>(inMemoryPath0, "%;DLVS~/i;E!");
      // Undeclared exception!
      try { 
        dotExporter0.to0((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Impossibe to export the graph in a null file
         //
         verifyException("org.apache.commons.graph.utils.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      Integer integer0 = new Integer(2094);
      Monoid<StringWriter> monoid0 = (Monoid<StringWriter>) mock(Monoid.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(monoid0).identity();
      Mapper<Comparable<StringWriter>, StringWriter> mapper0 = (Mapper<Comparable<StringWriter>, StringWriter>) mock(Mapper.class, new ViolatedAssumptionAnswer());
      InMemoryWeightedPath<Integer, Comparable<StringWriter>, StringWriter> inMemoryWeightedPath0 = new InMemoryWeightedPath<Integer, Comparable<StringWriter>, StringWriter>(integer0, integer0, monoid0, mapper0);
      DotExporter<Integer, Comparable<StringWriter>> dotExporter0 = new DotExporter<Integer, Comparable<StringWriter>>(inMemoryWeightedPath0, "--");
      // Undeclared exception!
      try { 
        dotExporter0.to1(objectOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2094);
      InMemoryPath<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>> inMemoryPath0 = new InMemoryPath<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>>(stringWriter0, stringWriter0);
      DotExporter<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>> dotExporter0 = new DotExporter<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>>(inMemoryPath0, "%;DLVS~/i;E!");
      AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>(stringWriter0, stringWriter0);
      inMemoryPath0.addConnectionInTail(stringWriter0, abstractMap_SimpleImmutableEntry0, stringWriter0);
      dotExporter0.addEdgeProperty("%;DLVS~/i;E!", (Mapper<AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>, ?>) null);
      try { 
        dotExporter0.to2(stringWriter0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // an error occurred while exporting graph InMemoryPath [vertices=[Graph generated by Apache Commons Graph on Fri Feb 14 20:21:21 GMT 2014
         // graph %;DLVS~/i;E! {
         //   null  null, Graph generated by Apache Commons Graph on Fri Feb 14 20:21:21 GMT 2014
         // graph %;DLVS~/i;E! {
         //   null  null], edges=[Graph generated by Apache Commons Graph on Fri Feb 14 20:21:21 GMT 2014
         // graph %;DLVS~/i;E! {
         //   null  null=Graph generated by Apache Commons Graph on Fri Feb 14 20:21:21 GMT 2014
         // graph %;DLVS~/i;E! {
         //   null  null]] (named %;DLVS~/i;E!) to writer Graph generated by Apache Commons Graph on Fri Feb 14 20:21:21 GMT 2014
         // graph %;DLVS~/i;E! {
         //   null  null
         //
         verifyException("org.apache.commons.graph.export.AbstractExporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2094);
      InMemoryPath<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>> inMemoryPath0 = new InMemoryPath<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>>(stringWriter0, stringWriter0);
      DotExporter<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>> dotExporter0 = new DotExporter<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>>(inMemoryPath0, "%;DLVS~/i;E!");
      AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>(stringWriter0, stringWriter0);
      Mapper<StringWriter, StringWriter> mapper0 = (Mapper<StringWriter, StringWriter>) mock(Mapper.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(mapper0).map(any(java.io.StringWriter.class));
      dotExporter0.addVertexProperty("%;DLVS~/i;E!", mapper0);
      inMemoryPath0.addConnectionInTail(stringWriter0, abstractMap_SimpleImmutableEntry0, stringWriter0);
      dotExporter0.to2(stringWriter0);
      assertEquals("Graph generated by Apache Commons Graph on Fri Feb 14 20:21:21 GMT 2014\ngraph %;DLVS~/i;E! {\n  null [%;DLVS~/i;E!=\"null\"];\n  null [%;DLVS~/i;E!=\"null\"];\n  null -- null}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      UndirectedMutableGraph<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>> undirectedMutableGraph0 = new UndirectedMutableGraph<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>>();
      DotExporter<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>> dotExporter0 = new DotExporter<StringWriter, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>>(undirectedMutableGraph0, (String) null);
      // Undeclared exception!
      try { 
        dotExporter0.to2((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Impossibe to export the graph in a null stream
         //
         verifyException("org.apache.commons.graph.utils.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DirectedMutableGraph<Comparable<Integer>, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>> directedMutableGraph0 = new DirectedMutableGraph<Comparable<Integer>, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>>();
      RevertedGraph<Comparable<Integer>, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>> revertedGraph0 = new RevertedGraph<Comparable<Integer>, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>>(directedMutableGraph0);
      DotExporter<Comparable<Integer>, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>> dotExporter0 = new DotExporter<Comparable<Integer>, AbstractMap.SimpleImmutableEntry<StringWriter, StringWriter>>(revertedGraph0, "");
      MockFile mockFile0 = new MockFile("]RtFv**]S");
      dotExporter0.to0(mockFile0);
      assertEquals(84L, mockFile0.length());
  }
}
