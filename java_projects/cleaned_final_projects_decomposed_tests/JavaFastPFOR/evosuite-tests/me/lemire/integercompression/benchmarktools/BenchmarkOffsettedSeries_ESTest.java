/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 15 19:55:05 GMT 2024
 */

package me.lemire.integercompression.benchmarktools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PrintWriter;
import me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BenchmarkOffsettedSeries_ESTest extends BenchmarkOffsettedSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "r?b?7]6:7GpR");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        BenchmarkOffsettedSeries.run(mockPrintWriter0, 4, 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Length mismatch: expected=32 actual=0 codec=me.lemire.integercompression.DeltaZigzagBinaryPacking@0000000003
         //
         verifyException("me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Random ");
      // Undeclared exception!
      BenchmarkOffsettedSeries.run(mockPrintWriter0, 27, 27);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        BenchmarkOffsettedSeries.run((PrintWriter) null, 1024, 1024);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OutputStream outputStream0 = OutputStream.nullOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0);
      // Undeclared exception!
      try { 
        BenchmarkOffsettedSeries.run(mockPrintWriter0, (-2), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2
         //
         verifyException("me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[0];
      BenchmarkOffsettedSeries.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("benchmark-offsetted-20140214T202121.csv");
      FileSystemHandling.createFolder(evoSuiteFile0);
      String[] stringArray0 = new String[5];
      try { 
        BenchmarkOffsettedSeries.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BenchmarkOffsettedSeries benchmarkOffsettedSeries0 = new BenchmarkOffsettedSeries();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockFile mockFile0 = new MockFile("me.lemire.integercompression.DeltaZigzagBinaryPacking");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        BenchmarkOffsettedSeries.run(mockPrintWriter0, 5, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("^P^:oz&(dNxaGI$3LV", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      BenchmarkOffsettedSeries.run(mockPrintWriter0, 0, 20);
  }
}
