/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 15 20:12:41 GMT 2024
 */

package me.lemire.integercompression.synth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import me.lemire.integercompression.synth.ClusteredDataGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClusteredDataGenerator_ESTest extends ClusteredDataGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(275);
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      ClusteredDataGenerator.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClusteredDataGenerator clusteredDataGenerator0 = new ClusteredDataGenerator();
      int[] intArray0 = new int[3];
      clusteredDataGenerator0.fillUniform(intArray0, 0, 0, 0, 2493);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClusteredDataGenerator clusteredDataGenerator0 = new ClusteredDataGenerator();
      int[] intArray0 = new int[2];
      clusteredDataGenerator0.fillClustered(intArray0, 1421, 0, 0, 0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClusteredDataGenerator clusteredDataGenerator0 = new ClusteredDataGenerator();
      int[] intArray0 = clusteredDataGenerator0.generateClustered(0, 335);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClusteredDataGenerator clusteredDataGenerator0 = new ClusteredDataGenerator();
      clusteredDataGenerator0.unidg = null;
      // Undeclared exception!
      try { 
        clusteredDataGenerator0.generateClustered(2818, 2818);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClusteredDataGenerator clusteredDataGenerator0 = new ClusteredDataGenerator();
      // Undeclared exception!
      clusteredDataGenerator0.fillUniform((int[]) null, 10, 10, (-158), 10);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClusteredDataGenerator clusteredDataGenerator0 = new ClusteredDataGenerator();
      // Undeclared exception!
      try { 
        clusteredDataGenerator0.fillUniform((int[]) null, (-1619), (-1619), 1699, (-1619));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not possible
         //
         verifyException("me.lemire.integercompression.synth.UniformDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClusteredDataGenerator clusteredDataGenerator0 = new ClusteredDataGenerator();
      clusteredDataGenerator0.unidg = null;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        clusteredDataGenerator0.fillUniform(intArray0, 1, 1, (-4240), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClusteredDataGenerator clusteredDataGenerator0 = new ClusteredDataGenerator();
      // Undeclared exception!
      try { 
        clusteredDataGenerator0.fillUniform((int[]) null, (-476), (-476), (-476), (-476));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -476
         //
         verifyException("me.lemire.integercompression.synth.UniformDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClusteredDataGenerator clusteredDataGenerator0 = new ClusteredDataGenerator();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        clusteredDataGenerator0.fillUniform(intArray0, 1, 1, 1, 1539);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClusteredDataGenerator clusteredDataGenerator0 = new ClusteredDataGenerator();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      clusteredDataGenerator0.fillClustered(intArray0, 2, 2, 20, 207);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClusteredDataGenerator clusteredDataGenerator0 = new ClusteredDataGenerator();
      // Undeclared exception!
      try { 
        clusteredDataGenerator0.fillClustered((int[]) null, (-3968), (-1081), (-1081), (-3968));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not possible
         //
         verifyException("me.lemire.integercompression.synth.UniformDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClusteredDataGenerator clusteredDataGenerator0 = new ClusteredDataGenerator();
      // Undeclared exception!
      try { 
        clusteredDataGenerator0.fillClustered((int[]) null, 834, 834, 834, 834);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClusteredDataGenerator clusteredDataGenerator0 = new ClusteredDataGenerator();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        clusteredDataGenerator0.fillClustered(intArray0, (-1832), (-1832), (-1832), (-1832));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1832
         //
         verifyException("me.lemire.integercompression.synth.UniformDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClusteredDataGenerator clusteredDataGenerator0 = new ClusteredDataGenerator();
      int[] intArray0 = clusteredDataGenerator0.generateClustered(474, 474);
      // Undeclared exception!
      try { 
        clusteredDataGenerator0.fillClustered(intArray0, 474, 474, 474, 474);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClusteredDataGenerator clusteredDataGenerator0 = new ClusteredDataGenerator();
      Random.setNextRandom(636);
      // Undeclared exception!
      try { 
        clusteredDataGenerator0.generateClustered(636, (-2209));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2845
         //
         verifyException("me.lemire.integercompression.synth.UniformDataGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClusteredDataGenerator clusteredDataGenerator0 = new ClusteredDataGenerator();
      // Undeclared exception!
      clusteredDataGenerator0.generateClustered(1165, 1169);
  }
}
