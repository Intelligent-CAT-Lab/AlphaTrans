{
    "path": "java_projects/cleaned_final_projects_evosuite/commons-codec/src/test/java/org/apache/commons/codec/binary/Base64InputStream_ESTest.java",
    "imports": {
        "14-14:import PipedInputStream": {
            "start": 14,
            "end": 14,
            "body": [
                "import java.io.PipedInputStream;\n"
            ]
        },
        "15-15:import SequenceInputStream": {
            "start": 15,
            "end": 15,
            "body": [
                "import java.io.SequenceInputStream;\n"
            ]
        },
        "16-16:import Enumeration": {
            "start": 16,
            "end": 16,
            "body": [
                "import java.util.Enumeration;\n"
            ]
        },
        "8-8:import Test": {
            "start": 8,
            "end": 8,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "21-21:import EvoRunnerParameters": {
            "start": 21,
            "end": 21,
            "body": [
                "import org.evosuite.runtime.EvoRunnerParameters;\n"
            ]
        },
        "13-13:import InputStream": {
            "start": 13,
            "end": 13,
            "body": [
                "import java.io.InputStream;\n"
            ]
        },
        "12-12:import DataInputStream": {
            "start": 12,
            "end": 12,
            "body": [
                "import java.io.DataInputStream;\n"
            ]
        },
        "23-23:import RunWith": {
            "start": 23,
            "end": 23,
            "body": [
                "import org.junit.runner.RunWith;\n"
            ]
        },
        "20-20:import EvoRunner": {
            "start": 20,
            "end": 20,
            "body": [
                "import org.evosuite.runtime.EvoRunner;\n"
            ]
        },
        "17-17:import CodecPolicy": {
            "start": 17,
            "end": 17,
            "body": [
                "import org.apache.commons.codec.CodecPolicy;\n"
            ]
        },
        "19-19:import BaseNCodecInputStream": {
            "start": 19,
            "end": 19,
            "body": [
                "import org.apache.commons.codec.binary.BaseNCodecInputStream;\n"
            ]
        },
        "18-18:import Base64InputStream": {
            "start": 18,
            "end": 18,
            "body": [
                "import org.apache.commons.codec.binary.Base64InputStream;\n"
            ]
        },
        "22-22:import ViolatedAssumptionAnswer": {
            "start": 22,
            "end": 22,
            "body": [
                "import org.evosuite.runtime.ViolatedAssumptionAnswer;\n"
            ]
        },
        "11-11:import static EvoAssertions.*": {
            "start": 11,
            "end": 11,
            "body": [
                "import static org.evosuite.runtime.EvoAssertions.*;\n"
            ]
        },
        "10-10:import static Mockito.*": {
            "start": 10,
            "end": 10,
            "body": [
                "import static org.evosuite.shaded.org.mockito.Mockito.*;\n"
            ]
        },
        "9-9:import static Assert.*": {
            "start": 9,
            "end": 9,
            "body": [
                "import static org.junit.Assert.*;\n"
            ]
        }
    },
    "classes": {
        "Base64InputStream_ESTest": {
            "start": 26,
            "end": 26,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "Base64InputStream_ESTest_scaffolding"
            ],
            "methods": {
                "85-88:test4": {
                    "start": 85,
                    "end": 88,
                    "body": [
                        "  public void test4()  throws Throwable  {\n",
                        "      BaseNCodecInputStream baseNCodecInputStream0 = Base64InputStream.Base64InputStream0((InputStream) null);\n",
                        "      assertEquals(1, baseNCodecInputStream0.available());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test4()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base64InputStream",
                            "Base64InputStream",
                            "68-70:Base64InputStream0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodecInputStream",
                            "BaseNCodecInputStream",
                            "61-64:available"
                        ]
                    ]
                },
                "75-82:test3": {
                    "start": 75,
                    "end": 82,
                    "body": [
                        "  public void test3()  throws Throwable  {\n",
                        "      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn(false).when(enumeration0).hasMoreElements();\n",
                        "      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n",
                        "      byte[] byteArray0 = new byte[5];\n",
                        "      BaseNCodecInputStream baseNCodecInputStream0 = Base64InputStream.Base64InputStream2(sequenceInputStream0, true, 752, byteArray0);\n",
                        "      assertFalse(baseNCodecInputStream0.markSupported());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test3()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "java.base/java/io/SequenceInputStream",
                            "SequenceInputStream"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base64InputStream",
                            "Base64InputStream",
                            "97-103:Base64InputStream2"
                        ],
                        [
                            "library",
                            "java.base/java/util/Enumeration",
                            "hasMoreElements"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodecInputStream",
                            "BaseNCodecInputStream",
                            "99-101:markSupported"
                        ]
                    ]
                },
                "64-72:test2": {
                    "start": 64,
                    "end": 72,
                    "body": [
                        "  public void test2()  throws Throwable  {\n",
                        "      PipedInputStream pipedInputStream0 = new PipedInputStream();\n",
                        "      byte[] byteArray0 = new byte[4];\n",
                        "      CodecPolicy codecPolicy0 = CodecPolicy.STRICT;\n",
                        "      Base64InputStream base64InputStream0 = new Base64InputStream(pipedInputStream0, false, 0, byteArray0, codecPolicy0);\n",
                        "      DataInputStream dataInputStream0 = new DataInputStream(base64InputStream0);\n",
                        "      BaseNCodecInputStream baseNCodecInputStream0 = Base64InputStream.Base64InputStream1(dataInputStream0, false);\n",
                        "      assertEquals(1, baseNCodecInputStream0.available());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test2()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/PipedInputStream",
                            "PipedInputStream"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base64InputStream",
                            "Base64InputStream",
                            "120-127:Base64InputStream"
                        ],
                        [
                            "library",
                            "java.base/java/io/DataInputStream",
                            "DataInputStream"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base64InputStream",
                            "Base64InputStream",
                            "79-82:Base64InputStream1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodecInputStream",
                            "BaseNCodecInputStream",
                            "61-64:available"
                        ]
                    ]
                },
                "46-61:test1": {
                    "start": 46,
                    "end": 61,
                    "body": [
                        "  public void test1()  throws Throwable  {\n",
                        "      byte[] byteArray0 = new byte[1];\n",
                        "      byteArray0[0] = (byte)56;\n",
                        "      CodecPolicy codecPolicy0 = CodecPolicy.LENIENT;\n",
                        "      Base64InputStream base64InputStream0 = null;\n",
                        "      try {\n",
                        "        base64InputStream0 = new Base64InputStream((InputStream) null, true, 0, byteArray0, codecPolicy0);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // lineSeparator must not contain base64 characters: [8]\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.codec.binary.Base64\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test1()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base64InputStream",
                            "Base64InputStream",
                            "120-127:Base64InputStream"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "29-43:test0": {
                    "start": 29,
                    "end": 43,
                    "body": [
                        "  public void test0()  throws Throwable  {\n",
                        "      byte[] byteArray0 = new byte[2];\n",
                        "      byteArray0[0] = (byte)65;\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        Base64InputStream.Base64InputStream2((InputStream) null, true, 0, byteArray0);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // lineSeparator must not contain base64 characters: [A\\u0000]\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.codec.binary.Base64\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test0()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base64InputStream",
                            "Base64InputStream",
                            "97-103:Base64InputStream2"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}