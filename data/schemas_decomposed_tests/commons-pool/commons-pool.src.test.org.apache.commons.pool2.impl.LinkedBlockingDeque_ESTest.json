{
    "path": "java_projects/cleaned_final_projects_evosuite/commons-pool/src/test/java/org/apache/commons/pool2/impl/LinkedBlockingDeque_ESTest.java",
    "imports": {
        "37-37:import Stream": {
            "start": 37,
            "end": 37,
            "body": [
                "import java.util.stream.Stream;\n"
            ]
        },
        "33-33:import List": {
            "start": 33,
            "end": 33,
            "body": [
                "import java.util.List;\n"
            ]
        },
        "30-30:import Collection": {
            "start": 30,
            "end": 30,
            "body": [
                "import java.util.Collection;\n"
            ]
        },
        "35-35:import Spliterator": {
            "start": 35,
            "end": 35,
            "body": [
                "import java.util.Spliterator;\n"
            ]
        },
        "36-36:import TimeUnit": {
            "start": 36,
            "end": 36,
            "body": [
                "import java.util.concurrent.TimeUnit;\n"
            ]
        },
        "27-27:import Duration": {
            "start": 27,
            "end": 27,
            "body": [
                "import java.time.Duration;\n"
            ]
        },
        "28-28:import ChronoUnit": {
            "start": 28,
            "end": 28,
            "body": [
                "import java.time.temporal.ChronoUnit;\n"
            ]
        },
        "29-29:import UnsupportedTemporalTypeException": {
            "start": 29,
            "end": 29,
            "body": [
                "import java.time.temporal.UnsupportedTemporalTypeException;\n"
            ]
        },
        "31-31:import LinkedHashSet": {
            "start": 31,
            "end": 31,
            "body": [
                "import java.util.LinkedHashSet;\n"
            ]
        },
        "32-32:import LinkedList": {
            "start": 32,
            "end": 32,
            "body": [
                "import java.util.LinkedList;\n"
            ]
        },
        "34-34:import NoSuchElementException": {
            "start": 34,
            "end": 34,
            "body": [
                "import java.util.NoSuchElementException;\n"
            ]
        },
        "40-40:import EvoRunnerParameters": {
            "start": 40,
            "end": 40,
            "body": [
                "import org.evosuite.runtime.EvoRunnerParameters;\n"
            ]
        },
        "41-41:import RunWith": {
            "start": 41,
            "end": 41,
            "body": [
                "import org.junit.runner.RunWith;\n"
            ]
        },
        "39-39:import EvoRunner": {
            "start": 39,
            "end": 39,
            "body": [
                "import org.evosuite.runtime.EvoRunner;\n"
            ]
        },
        "24-24:import Test": {
            "start": 24,
            "end": 24,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "38-38:import LinkedBlockingDeque": {
            "start": 38,
            "end": 38,
            "body": [
                "import org.apache.commons.pool2.impl.LinkedBlockingDeque;\n"
            ]
        },
        "26-26:import static EvoAssertions.*": {
            "start": 26,
            "end": 26,
            "body": [
                "import static org.evosuite.runtime.EvoAssertions.*;\n"
            ]
        },
        "25-25:import static Assert.*": {
            "start": 25,
            "end": 25,
            "body": [
                "import static org.junit.Assert.*;\n"
            ]
        }
    },
    "classes": {
        "LinkedBlockingDeque_ESTest": {
            "start": 44,
            "end": 44,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "LinkedBlockingDeque_ESTest_scaffolding"
            ],
            "methods": {
                "3614-3630:test49": {
                    "start": 3614,
                    "end": 3630,
                    "body": [
                        "  public void test49()  throws Throwable  {\n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>((-2323), 0, true, linkedHashSet0);\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>((-3328), (-1225), true, linkedBlockingDeque0);\n",
                        "      Integer integer0 = new Integer((-1283));\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque1.addLast(integer0);\n",
                        "        fail(\"Expecting exception: IllegalStateException\");\n",
                        "      \n",
                        "      } catch(IllegalStateException e) {\n",
                        "         //\n",
                        "         // Deque full\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.pool2.impl.LinkedBlockingDeque\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test49()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "addLast"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "3597-3611:test48": {
                    "start": 3597,
                    "end": 3611,
                    "body": [
                        "  public void test48()  throws Throwable  {\n",
                        "      int int0 = 103;\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(0, 103, true, (Collection<? extends Integer>) null);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque0.offerLast((Integer) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // e\n",
                        "         //\n",
                        "         verifyException(\"java.util.Objects\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test48()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offerLast"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "3582-3594:test47": {
                    "start": 3582,
                    "end": 3594,
                    "body": [
                        "  public void test47()  throws Throwable  {\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = null;\n",
                        "      try {\n",
                        "        linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(0, 0, false, (Collection<? extends Integer>) null);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.pool2.impl.LinkedBlockingDeque\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test47()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "3571-3579:test46": {
                    "start": 3571,
                    "end": 3579,
                    "body": [
                        "  public void test46()  throws Throwable  {\n",
                        "      Integer integer0 = new Integer(2407);\n",
                        "      Integer integer1 = new Integer(2);\n",
                        "      List<Integer> list0 = List.of(integer0, integer0, integer0, integer1, integer0, integer1, integer1, integer0, integer1);\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(4577, 0, false, list0);\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(5, (-663), false, linkedBlockingDeque0);\n",
                        "      boolean boolean0 = linkedBlockingDeque1.offerLast(integer1);\n",
                        "      assertFalse(boolean0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test46()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "of"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offerLast"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ]
                    ]
                },
                "3553-3568:test45": {
                    "start": 3553,
                    "end": 3568,
                    "body": [
                        "  public void test45()  throws Throwable  {\n",
                        "      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, 1, true, linkedList0);\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(0, 2293, true, linkedBlockingDeque0);\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = null;\n",
                        "      try {\n",
                        "        linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>(0, 0, true, linkedBlockingDeque1);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.pool2.impl.LinkedBlockingDeque\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test45()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "3527-3550:test44": {
                    "start": 3527,
                    "end": 3550,
                    "body": [
                        "  public void test44()  throws Throwable  {\n",
                        "      LinkedBlockingDeque.LinkedBlockingDeque0();\n",
                        "      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>((-603), 535, false, linkedList0);\n",
                        "      linkedBlockingDeque0.toArray0();\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>((-603), 535, false, linkedBlockingDeque0);\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>((-603), 1119, false, linkedBlockingDeque1);\n",
                        "      Duration duration0 = Duration.ZERO;\n",
                        "      LinkedBlockingDeque.LinkedBlockingDeque2(linkedBlockingDeque0);\n",
                        "      linkedBlockingDeque2.pollFirst1(duration0);\n",
                        "      Integer integer0 = new Integer(0);\n",
                        "      linkedList0.add(integer0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque2.putLast((Integer) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // e\n",
                        "         //\n",
                        "         verifyException(\"java.util.Objects\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test44()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.impl.LinkedBlockingDeque",
                            "LinkedBlockingDeque",
                            "283-285:LinkedBlockingDeque0"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "toArray0"
                        ],
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.impl.LinkedBlockingDeque",
                            "LinkedBlockingDeque",
                            "306-308:LinkedBlockingDeque2"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "pollFirst1"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "add"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "putLast"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "3508-3524:test43": {
                    "start": 3508,
                    "end": 3524,
                    "body": [
                        "  public void test43()  throws Throwable  {\n",
                        "      LinkedBlockingDeque.LinkedBlockingDeque1(false);\n",
                        "      int int0 = 4;\n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(4, 4, false, linkedHashSet0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque0.pop();\n",
                        "        fail(\"Expecting exception: NoSuchElementException\");\n",
                        "      \n",
                        "      } catch(NoSuchElementException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.pool2.impl.LinkedBlockingDeque\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test43()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.impl.LinkedBlockingDeque",
                            "LinkedBlockingDeque",
                            "294-296:LinkedBlockingDeque1"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "pop"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "3499-3505:test42": {
                    "start": 3499,
                    "end": 3505,
                    "body": [
                        "  public void test42()  throws Throwable  {\n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>((-166), 2, true, linkedHashSet0);\n",
                        "      TimeUnit timeUnit0 = TimeUnit.HOURS;\n",
                        "      Integer integer0 = linkedBlockingDeque0.poll2((-639L), timeUnit0);\n",
                        "      assertNull(integer0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test42()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "poll2"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull"
                        ]
                    ]
                },
                "3480-3496:test41": {
                    "start": 3480,
                    "end": 3496,
                    "body": [
                        "  public void test41()  throws Throwable  {\n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>((-1678), (-1678), true, linkedHashSet0);\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(5, 0, true, linkedBlockingDeque0);\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>(5, 1069, true, linkedBlockingDeque1);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque2.removeFirst();\n",
                        "        fail(\"Expecting exception: NoSuchElementException\");\n",
                        "      \n",
                        "      } catch(NoSuchElementException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.pool2.impl.LinkedBlockingDeque\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test41()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "removeFirst"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "3459-3477:test40": {
                    "start": 3459,
                    "end": 3477,
                    "body": [
                        "  public void test40()  throws Throwable  {\n",
                        "      int int0 = 393;\n",
                        "      int int1 = (-1);\n",
                        "      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n",
                        "      Integer integer0 = new Integer(0);\n",
                        "      linkedList0.removeFirstOccurrence(integer0);\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(393, (-1), true, linkedList0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque0.pop();\n",
                        "        fail(\"Expecting exception: NoSuchElementException\");\n",
                        "      \n",
                        "      } catch(NoSuchElementException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.pool2.impl.LinkedBlockingDeque\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test40()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "removeFirstOccurrence"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "pop"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "3453-3456:test39": {
                    "start": 3453,
                    "end": 3456,
                    "body": [
                        "  public void test39()  throws Throwable  {\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(1029, 166, false, (Collection<? extends Integer>) null);\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1029));\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test39()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ]
                    ]
                },
                "3436-3450:test38": {
                    "start": 3436,
                    "end": 3450,
                    "body": [
                        "  public void test38()  throws Throwable  {\n",
                        "      int int0 = 0;\n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = null;\n",
                        "      try {\n",
                        "        linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(0, (-899), false, linkedHashSet0);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.pool2.impl.LinkedBlockingDeque\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test38()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "3417-3433:test37": {
                    "start": 3417,
                    "end": 3433,
                    "body": [
                        "  public void test37()  throws Throwable  {\n",
                        "      int int0 = 0;\n",
                        "      int int1 = 0;\n",
                        "      boolean boolean0 = false;\n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = null;\n",
                        "      try {\n",
                        "        linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(0, 0, false, linkedHashSet0);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.pool2.impl.LinkedBlockingDeque\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test37()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "3384-3414:test36": {
                    "start": 3384,
                    "end": 3414,
                    "body": [
                        "  public void test36()  throws Throwable  {\n",
                        "      int int0 = 3;\n",
                        "      Integer[] integerArray0 = new Integer[8];\n",
                        "      Integer integer0 = new Integer((-896));\n",
                        "      integerArray0[0] = integer0;\n",
                        "      Integer integer1 = new Integer(3);\n",
                        "      integerArray0[1] = integer1;\n",
                        "      Integer integer2 = new Integer((-3258));\n",
                        "      integerArray0[2] = integer2;\n",
                        "      Integer integer3 = new Integer(0);\n",
                        "      integerArray0[3] = integer3;\n",
                        "      Integer integer4 = new Integer(3);\n",
                        "      integerArray0[4] = integer4;\n",
                        "      Integer integer5 = new Integer(int0);\n",
                        "      integerArray0[5] = integer5;\n",
                        "      Integer integer6 = new Integer(0);\n",
                        "      integerArray0[6] = integer6;\n",
                        "      Integer integer7 = new Integer(0);\n",
                        "      integerArray0[7] = integer7;\n",
                        "      List<Integer> list0 = List.of(integerArray0);\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3, 3, false, list0);\n",
                        "      linkedBlockingDeque0.poll0();\n",
                        "      TimeUnit timeUnit0 = TimeUnit.MINUTES;\n",
                        "      linkedBlockingDeque0.pollLast2((long) integerArray0[2], timeUnit0);\n",
                        "      linkedBlockingDeque0.putLast(integer1);\n",
                        "      assertTrue(linkedBlockingDeque0.contains(int0));\n",
                        "      \n",
                        "      linkedBlockingDeque0.remove0();\n",
                        "      Object[] objectArray0 = linkedBlockingDeque0.toArray0();\n",
                        "      assertEquals(0, objectArray0.length);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test36()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "of"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "toArray0"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "poll0"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "pollLast2"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "putLast"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "remove0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ]
                    ]
                },
                "3341-3381:test35": {
                    "start": 3341,
                    "end": 3381,
                    "body": [
                        "  public void test35()  throws Throwable  {\n",
                        "      int int0 = 917;\n",
                        "      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n",
                        "      assertFalse(linkedList0.contains(int0));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedList0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(917, 917, true, linkedList0);\n",
                        "      assertFalse(linkedList0.contains(int0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(int0));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;\n",
                        "      Integer integer0 = linkedBlockingDeque0.pollLast2(371L, timeUnit0);\n",
                        "      assertFalse(linkedList0.contains(int0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(int0));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNull(integer0);\n",
                        "      \n",
                        "      Object object0 = new Object();\n",
                        "      assertNotNull(object0);\n",
                        "      \n",
                        "      boolean boolean0 = linkedBlockingDeque0.remove1(object0);\n",
                        "      assertFalse(linkedList0.contains(int0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(int0));\n",
                        "      assertFalse(boolean0);\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      \n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque0.removeFirst();\n",
                        "        fail(\"Expecting exception: NoSuchElementException\");\n",
                        "      \n",
                        "      } catch(NoSuchElementException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.pool2.impl.LinkedBlockingDeque\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test35()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "pollLast2"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "Object"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "remove1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "contains"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "removeFirst"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "3191-3338:test34": {
                    "start": 3191,
                    "end": 3338,
                    "body": [
                        "  public void test34()  throws Throwable  {\n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotNull(linkedHashSet0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(0, 290, true, linkedHashSet0);\n",
                        "      assertFalse(linkedHashSet0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(0));\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(290, 3, true, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedHashSet0.contains(290));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(290));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(290));\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotNull(linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Integer integer0 = linkedBlockingDeque1.pollLast0();\n",
                        "      assertFalse(linkedHashSet0.contains(290));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(290));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(290));\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertNull(integer0);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>(0, 1, true, linkedBlockingDeque1);\n",
                        "      assertFalse(linkedHashSet0.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque2.contains(1));\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotNull(linkedBlockingDeque2);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Integer integer1 = new Integer(0);\n",
                        "      assertEquals(0, (int)integer1);\n",
                        "      assertNotNull(integer1);\n",
                        "      \n",
                        "      boolean boolean0 = linkedBlockingDeque2.offer(integer1);\n",
                        "      assertFalse(linkedHashSet0.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque2.contains(1));\n",
                        "      assertTrue(linkedBlockingDeque2.contains(0));\n",
                        "      assertTrue(boolean0);\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Object object0 = linkedBlockingDeque2.pollFirst();\n",
                        "      assertFalse(linkedHashSet0.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque2.contains(1));\n",
                        "      assertEquals(0, object0);\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque0);\n",
                        "      assertNotNull(object0);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      boolean boolean1 = linkedHashSet0.remove(object0);\n",
                        "      assertFalse(linkedHashSet0.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque2.contains(1));\n",
                        "      assertFalse(boolean1);\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(boolean1 == boolean0);\n",
                        "      \n",
                        "      LinkedBlockingDeque linkedBlockingDeque3 = LinkedBlockingDeque.LinkedBlockingDeque1(true);\n",
                        "      assertNotNull(linkedBlockingDeque3);\n",
                        "      \n",
                        "      int int0 = linkedBlockingDeque1.remainingCapacity();\n",
                        "      assertFalse(linkedHashSet0.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(1));\n",
                        "      assertEquals(3, int0);\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque2);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque2));\n",
                        "      \n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque1.remove0();\n",
                        "        fail(\"Expecting exception: NoSuchElementException\");\n",
                        "      \n",
                        "      } catch(NoSuchElementException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.pool2.impl.LinkedBlockingDeque\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test34()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "pollLast0"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offer"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "pollFirst"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "remove"
                        ],
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.impl.LinkedBlockingDeque",
                            "LinkedBlockingDeque",
                            "294-296:LinkedBlockingDeque1"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "remainingCapacity"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "isEmpty"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotSame"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "remove0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "3108-3188:test33": {
                    "start": 3108,
                    "end": 3188,
                    "body": [
                        "  public void test33()  throws Throwable  {\n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotNull(linkedHashSet0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(1, 0, true, linkedHashSet0);\n",
                        "      assertFalse(linkedHashSet0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(0));\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      Integer integer0 = new Integer(1);\n",
                        "      assertEquals(1, (int)integer0);\n",
                        "      assertNotNull(integer0);\n",
                        "      \n",
                        "      boolean boolean0 = linkedHashSet0.add(integer0);\n",
                        "      assertTrue(linkedHashSet0.contains(integer0));\n",
                        "      assertFalse(linkedHashSet0.contains(0));\n",
                        "      assertTrue(boolean0);\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      \n",
                        "      boolean boolean1 = linkedBlockingDeque0.hasTakeWaiters();\n",
                        "      assertTrue(linkedHashSet0.contains(integer0));\n",
                        "      assertFalse(linkedHashSet0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(integer0));\n",
                        "      assertFalse(boolean1);\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertFalse(boolean1 == boolean0);\n",
                        "      \n",
                        "      boolean boolean2 = linkedBlockingDeque0.contains((Object) null);\n",
                        "      assertTrue(linkedHashSet0.contains(integer0));\n",
                        "      assertFalse(linkedHashSet0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(integer0));\n",
                        "      assertFalse(boolean2);\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertTrue(boolean2 == boolean1);\n",
                        "      assertFalse(boolean2 == boolean0);\n",
                        "      \n",
                        "      boolean boolean3 = linkedBlockingDeque0.hasTakeWaiters();\n",
                        "      assertTrue(linkedHashSet0.contains(integer0));\n",
                        "      assertFalse(linkedHashSet0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(integer0));\n",
                        "      assertFalse(boolean3);\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertTrue(boolean3 == boolean2);\n",
                        "      assertFalse(boolean3 == boolean0);\n",
                        "      assertTrue(boolean3 == boolean1);\n",
                        "      \n",
                        "      Duration duration0 = Duration.ZERO;\n",
                        "      assertNotNull(duration0);\n",
                        "      \n",
                        "      boolean boolean4 = linkedBlockingDeque0.offerLast1(integer0, duration0);\n",
                        "      assertTrue(linkedHashSet0.contains(integer0));\n",
                        "      assertFalse(linkedHashSet0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(integer0));\n",
                        "      assertFalse(boolean4);\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertFalse(boolean4 == boolean0);\n",
                        "      assertTrue(boolean4 == boolean1);\n",
                        "      assertTrue(boolean4 == boolean2);\n",
                        "      assertTrue(boolean4 == boolean3);\n",
                        "      \n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque0.remove0();\n",
                        "        fail(\"Expecting exception: NoSuchElementException\");\n",
                        "      \n",
                        "      } catch(NoSuchElementException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.pool2.impl.LinkedBlockingDeque\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test33()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "add"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "hasTakeWaiters"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offerLast1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "isEmpty"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "remove0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "2988-3105:test32": {
                    "start": 2988,
                    "end": 3105,
                    "body": [
                        "  public void test32()  throws Throwable  {\n",
                        "      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedList0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>((-2902), Integer.MAX_VALUE, false, linkedList0);\n",
                        "      assertFalse(linkedList0.contains(Integer.MAX_VALUE));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      Integer integer0 = linkedBlockingDeque0.pollLast();\n",
                        "      assertFalse(linkedList0.contains(Integer.MAX_VALUE));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNull(integer0);\n",
                        "      \n",
                        "      Integer integer1 = new Integer((-2902));\n",
                        "      assertEquals((-2902), (int)integer1);\n",
                        "      assertNotNull(integer1);\n",
                        "      \n",
                        "      linkedBlockingDeque0.putFirst(integer1);\n",
                        "      assertFalse(linkedList0.contains(Integer.MAX_VALUE));\n",
                        "      assertTrue(linkedBlockingDeque0.contains((-2902)));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      \n",
                        "      linkedBlockingDeque0.addLast(integer1);\n",
                        "      assertFalse(linkedList0.contains(Integer.MAX_VALUE));\n",
                        "      assertTrue(linkedBlockingDeque0.contains((-2902)));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      \n",
                        "      linkedBlockingDeque0.addFirst(integer1);\n",
                        "      assertFalse(linkedList0.contains(Integer.MAX_VALUE));\n",
                        "      assertTrue(linkedBlockingDeque0.contains((-2902)));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, 150, false, linkedList0);\n",
                        "      assertFalse(linkedList0.contains(Integer.MAX_VALUE));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(Integer.MAX_VALUE));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Object object0 = linkedBlockingDeque1.pollLast0();\n",
                        "      assertFalse(linkedList0.contains(Integer.MAX_VALUE));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(Integer.MAX_VALUE));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertNull(object0);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      boolean boolean0 = linkedBlockingDeque1.removeLastOccurrence((Object) null);\n",
                        "      assertFalse(linkedList0.contains(Integer.MAX_VALUE));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(Integer.MAX_VALUE));\n",
                        "      assertFalse(boolean0);\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      boolean boolean1 = linkedBlockingDeque0.contains((Object) null);\n",
                        "      assertFalse(linkedList0.contains(Integer.MAX_VALUE));\n",
                        "      assertTrue(linkedBlockingDeque0.contains(integer1));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));\n",
                        "      assertFalse(boolean1);\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertTrue(boolean1 == boolean0);\n",
                        "      \n",
                        "      LinkedBlockingDeque linkedBlockingDeque2 = LinkedBlockingDeque.LinkedBlockingDeque1(true);\n",
                        "      assertNotNull(linkedBlockingDeque2);\n",
                        "      \n",
                        "      Integer integer2 = linkedBlockingDeque0.poll();\n",
                        "      assertFalse(linkedList0.contains(Integer.MAX_VALUE));\n",
                        "      assertTrue(linkedBlockingDeque0.contains(integer1));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));\n",
                        "      assertEquals((-2902), (int)integer2);\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotNull(integer2);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      \n",
                        "      Integer integer3 = linkedBlockingDeque0.removeFirst();\n",
                        "      assertFalse(linkedList0.contains(Integer.MAX_VALUE));\n",
                        "      assertTrue(linkedBlockingDeque0.contains(integer1));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));\n",
                        "      assertEquals((-2902), (int)integer3);\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotNull(integer3);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      \n",
                        "      boolean boolean2 = linkedBlockingDeque0.offer(integer2);\n",
                        "      assertFalse(linkedList0.contains(Integer.MAX_VALUE));\n",
                        "      assertTrue(linkedBlockingDeque0.contains(integer1));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));\n",
                        "      assertTrue(boolean2);\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(boolean2 == boolean0);\n",
                        "      assertFalse(boolean2 == boolean1);\n",
                        "      \n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque1.removeLast();\n",
                        "        fail(\"Expecting exception: NoSuchElementException\");\n",
                        "      \n",
                        "      } catch(NoSuchElementException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.pool2.impl.LinkedBlockingDeque\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test32()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "pollLast"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "pollLast0"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "removeLastOccurrence"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.impl.LinkedBlockingDeque",
                            "LinkedBlockingDeque",
                            "294-296:LinkedBlockingDeque1"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "poll"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "removeFirst"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offer"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "contains"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "putFirst"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "addLast"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "addFirst"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotSame"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "removeLast"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "2948-2985:test31": {
                    "start": 2948,
                    "end": 2985,
                    "body": [
                        "  public void test31()  throws Throwable  {\n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotNull(linkedHashSet0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(1359, (-6730), false, linkedHashSet0);\n",
                        "      assertFalse(linkedHashSet0.contains((-6730)));\n",
                        "      assertFalse(linkedBlockingDeque0.contains((-6730)));\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(1934, 183, false, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedHashSet0.contains(183));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(183));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(183));\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotNull(linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Integer integer0 = new Integer(1359);\n",
                        "      assertEquals(1359, (int)integer0);\n",
                        "      assertNotNull(integer0);\n",
                        "      \n",
                        "      linkedBlockingDeque1.putLast(integer0);\n",
                        "      assertFalse(linkedHashSet0.contains((-6730)));\n",
                        "      assertFalse(linkedBlockingDeque0.contains((-6730)));\n",
                        "      assertFalse(linkedBlockingDeque1.contains((-6730)));\n",
                        "      assertTrue(linkedBlockingDeque1.contains(1359));\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test31()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "isEmpty"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "putLast"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotSame"
                        ]
                    ]
                },
                "2868-2945:test30": {
                    "start": 2868,
                    "end": 2945,
                    "body": [
                        "  public void test30()  throws Throwable  {\n",
                        "      LinkedBlockingDeque linkedBlockingDeque0 = LinkedBlockingDeque.LinkedBlockingDeque0();\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedList0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>((-603), 535, false, linkedList0);\n",
                        "      assertFalse(linkedList0.contains(535));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(535));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedBlockingDeque1);\n",
                        "      \n",
                        "      Object[] objectArray0 = linkedBlockingDeque1.toArray0();\n",
                        "      assertFalse(linkedList0.contains(535));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(535));\n",
                        "      assertEquals(0, objectArray0.length);\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(objectArray0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>((-603), 535, false, linkedBlockingDeque1);\n",
                        "      assertFalse(linkedList0.contains(535));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(535));\n",
                        "      assertFalse(linkedBlockingDeque2.contains(535));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedBlockingDeque2);\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque3 = new LinkedBlockingDeque<Integer>((-603), 1119, false, linkedBlockingDeque2);\n",
                        "      assertFalse(linkedList0.contains(535));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(535));\n",
                        "      assertFalse(linkedBlockingDeque2.contains(535));\n",
                        "      assertFalse(linkedBlockingDeque3.contains(535));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedBlockingDeque3);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque1));\n",
                        "      \n",
                        "      Duration duration0 = Duration.ZERO;\n",
                        "      assertNotNull(duration0);\n",
                        "      \n",
                        "      LinkedBlockingDeque linkedBlockingDeque4 = LinkedBlockingDeque.LinkedBlockingDeque2(linkedBlockingDeque1);\n",
                        "      assertFalse(linkedList0.contains(535));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(535));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque3);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque4, linkedBlockingDeque0);\n",
                        "      assertNotNull(linkedBlockingDeque4);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque3));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque4.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Integer integer0 = new Integer(0);\n",
                        "      assertEquals(0, (int)integer0);\n",
                        "      assertNotNull(integer0);\n",
                        "      \n",
                        "      boolean boolean0 = linkedList0.add(integer0);\n",
                        "      assertTrue(linkedList0.contains(0));\n",
                        "      assertFalse(linkedList0.contains(535));\n",
                        "      assertTrue(boolean0);\n",
                        "      assertEquals(1, linkedList0.size());\n",
                        "      \n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque3.putLast((Integer) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // e\n",
                        "         //\n",
                        "         verifyException(\"java.util.Objects\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test30()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.impl.LinkedBlockingDeque",
                            "LinkedBlockingDeque",
                            "283-285:LinkedBlockingDeque0"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "toArray0"
                        ],
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.impl.LinkedBlockingDeque",
                            "LinkedBlockingDeque",
                            "306-308:LinkedBlockingDeque2"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "add"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotSame"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "putLast"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "2827-2865:test29": {
                    "start": 2827,
                    "end": 2865,
                    "body": [
                        "  public void test29()  throws Throwable  {\n",
                        "      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedList0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(917, 917, true, linkedList0);\n",
                        "      assertFalse(linkedList0.contains(917));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(917));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;\n",
                        "      Integer integer0 = linkedBlockingDeque0.pollLast2(371L, timeUnit0);\n",
                        "      assertFalse(linkedList0.contains(917));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(917));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNull(integer0);\n",
                        "      \n",
                        "      Object object0 = new Object();\n",
                        "      assertNotNull(object0);\n",
                        "      \n",
                        "      boolean boolean0 = linkedBlockingDeque0.remove1(object0);\n",
                        "      assertFalse(linkedList0.contains(917));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(917));\n",
                        "      assertFalse(boolean0);\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      \n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque0.removeFirst();\n",
                        "        fail(\"Expecting exception: NoSuchElementException\");\n",
                        "      \n",
                        "      } catch(NoSuchElementException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.pool2.impl.LinkedBlockingDeque\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test29()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "pollLast2"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "Object"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "remove1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "removeFirst"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "2791-2824:test28": {
                    "start": 2791,
                    "end": 2824,
                    "body": [
                        "  public void test28()  throws Throwable  {\n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotNull(linkedHashSet0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>((-343), (-343), true, linkedHashSet0);\n",
                        "      assertFalse(linkedHashSet0.contains((-343)));\n",
                        "      assertFalse(linkedBlockingDeque0.contains((-343)));\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>((-343), (-1), true, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedHashSet0.contains((-343)));\n",
                        "      assertFalse(linkedBlockingDeque0.contains((-343)));\n",
                        "      assertFalse(linkedBlockingDeque1.contains((-343)));\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotNull(linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      int int0 = linkedBlockingDeque1.drainTo1(linkedHashSet0, (-343));\n",
                        "      assertFalse(linkedHashSet0.contains((-343)));\n",
                        "      assertFalse(linkedBlockingDeque0.contains((-343)));\n",
                        "      assertFalse(linkedBlockingDeque1.contains((-343)));\n",
                        "      assertEquals((-343), int0);\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test28()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "drainTo1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "isEmpty"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotSame"
                        ]
                    ]
                },
                "2735-2788:test27": {
                    "start": 2735,
                    "end": 2788,
                    "body": [
                        "  public void test27()  throws Throwable  {\n",
                        "      int int0 = 0;\n",
                        "      int int1 = 2;\n",
                        "      boolean boolean0 = false;\n",
                        "      int int2 = 25;\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(2, 25, true, (Collection<? extends Integer>) null);\n",
                        "      assertFalse(linkedBlockingDeque0.contains(int2));\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(25, 0, true, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedBlockingDeque0.contains(int0));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(int0));\n",
                        "      assertNotNull(linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Stream<Integer> stream0 = linkedBlockingDeque1.stream();\n",
                        "      assertFalse(linkedBlockingDeque0.contains(int0));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(int0));\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertNotNull(stream0);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Integer integer0 = new Integer(1531);\n",
                        "      assertEquals(1531, (int)integer0);\n",
                        "      assertNotNull(integer0);\n",
                        "      assertFalse(integer0.equals((Object)int2));\n",
                        "      assertFalse(integer0.equals((Object)int0));\n",
                        "      assertFalse(integer0.equals((Object)int1));\n",
                        "      \n",
                        "      boolean boolean1 = linkedBlockingDeque0.contains(integer0);\n",
                        "      assertFalse(linkedBlockingDeque0.contains(int0));\n",
                        "      assertFalse(boolean1);\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(integer0.equals((Object)int2));\n",
                        "      assertFalse(integer0.equals((Object)int0));\n",
                        "      assertFalse(integer0.equals((Object)int1));\n",
                        "      assertTrue(boolean1 == boolean0);\n",
                        "      \n",
                        "      Integer integer1 = null;\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque1.offerFirst((Integer) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // e\n",
                        "         //\n",
                        "         verifyException(\"java.util.Objects\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test27()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/util/Collection",
                            "stream"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotSame"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offerFirst"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "2671-2732:test26": {
                    "start": 2671,
                    "end": 2732,
                    "body": [
                        "  public void test26()  throws Throwable  {\n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedHashSet0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(4, 1286, true, linkedHashSet0);\n",
                        "      assertFalse(linkedHashSet0.contains(4));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(4));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(1286, 3, true, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedHashSet0.contains(1286));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1286));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(1286));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Integer integer0 = new Integer(3);\n",
                        "      assertEquals(3, (int)integer0);\n",
                        "      assertNotNull(integer0);\n",
                        "      \n",
                        "      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);\n",
                        "      assertFalse(linkedHashSet0.contains(1286));\n",
                        "      assertTrue(linkedBlockingDeque0.contains(3));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1286));\n",
                        "      assertTrue(boolean0);\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      \n",
                        "      int int0 = linkedBlockingDeque0.drainTo1(linkedBlockingDeque1, 0);\n",
                        "      assertFalse(linkedHashSet0.contains(0));\n",
                        "      assertTrue(linkedBlockingDeque0.contains(3));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(0));\n",
                        "      assertEquals(0, int0);\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      TimeUnit timeUnit0 = TimeUnit.DAYS;\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque1.pollFirst2(371000000L, timeUnit0);\n",
                        "        fail(\"Expecting exception: ArithmeticException\");\n",
                        "      \n",
                        "      } catch(ArithmeticException e) {\n",
                        "         //\n",
                        "         // long overflow\n",
                        "         //\n",
                        "         verifyException(\"java.lang.Math\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test26()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offerFirst"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "drainTo1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "isEmpty"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotSame"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "pollFirst2"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "2576-2668:test25": {
                    "start": 2576,
                    "end": 2668,
                    "body": [
                        "  public void test25()  throws Throwable  {\n",
                        "      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedList0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(917, 917, true, linkedList0);\n",
                        "      assertFalse(linkedList0.contains(917));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(917));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      assertFalse(linkedHashSet0.contains(917));\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotNull(linkedHashSet0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(917, 917, true, linkedHashSet0);\n",
                        "      assertFalse(linkedHashSet0.contains(917));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(917));\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotNull(linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Integer integer0 = new Integer(917);\n",
                        "      assertEquals(917, (int)integer0);\n",
                        "      assertNotNull(integer0);\n",
                        "      \n",
                        "      boolean boolean0 = linkedHashSet0.add(integer0);\n",
                        "      assertTrue(linkedHashSet0.contains(917));\n",
                        "      assertTrue(boolean0);\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      \n",
                        "      boolean boolean1 = linkedBlockingDeque0.hasTakeWaiters();\n",
                        "      assertFalse(linkedList0.contains(917));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(917));\n",
                        "      assertFalse(boolean1);\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(boolean1 == boolean0);\n",
                        "      \n",
                        "      boolean boolean2 = linkedBlockingDeque0.contains(integer0);\n",
                        "      assertFalse(linkedList0.contains(917));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(917));\n",
                        "      assertFalse(boolean2);\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertTrue(boolean2 == boolean1);\n",
                        "      assertFalse(boolean2 == boolean0);\n",
                        "      \n",
                        "      boolean boolean3 = linkedBlockingDeque0.hasTakeWaiters();\n",
                        "      assertFalse(linkedList0.contains(917));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(917));\n",
                        "      assertFalse(boolean3);\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertTrue(boolean3 == boolean1);\n",
                        "      assertFalse(boolean3 == boolean0);\n",
                        "      assertTrue(boolean3 == boolean2);\n",
                        "      \n",
                        "      Duration duration0 = Duration.ZERO;\n",
                        "      assertNotNull(duration0);\n",
                        "      \n",
                        "      boolean boolean4 = linkedBlockingDeque1.offerLast1(integer0, duration0);\n",
                        "      assertTrue(linkedHashSet0.contains(917));\n",
                        "      assertTrue(linkedBlockingDeque1.contains(917));\n",
                        "      assertTrue(boolean4);\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(boolean4 == boolean1);\n",
                        "      assertFalse(boolean4 == boolean2);\n",
                        "      assertFalse(boolean4 == boolean3);\n",
                        "      assertTrue(boolean4 == boolean0);\n",
                        "      \n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque0.remove0();\n",
                        "        fail(\"Expecting exception: NoSuchElementException\");\n",
                        "      \n",
                        "      } catch(NoSuchElementException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.pool2.impl.LinkedBlockingDeque\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test25()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "add"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "hasTakeWaiters"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offerLast1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "contains"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "contains"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "isEmpty"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "size"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotSame"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "remove0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "2526-2573:test24": {
                    "start": 2526,
                    "end": 2573,
                    "body": [
                        "  public void test24()  throws Throwable  {\n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(4, 1827.0F);\n",
                        "      assertFalse(linkedHashSet0.contains(4));\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotNull(linkedHashSet0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>((-2539), (-1), false, linkedHashSet0);\n",
                        "      assertFalse(linkedHashSet0.contains((-2539)));\n",
                        "      assertFalse(linkedBlockingDeque0.contains((-2539)));\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(4, 4, true, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedHashSet0.contains((-2539)));\n",
                        "      assertFalse(linkedBlockingDeque0.contains((-2539)));\n",
                        "      assertFalse(linkedBlockingDeque1.contains((-2539)));\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotNull(linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>(4, 4, true, linkedBlockingDeque1);\n",
                        "      assertFalse(linkedHashSet0.contains(4));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(4));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(4));\n",
                        "      assertFalse(linkedBlockingDeque2.contains(4));\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotNull(linkedBlockingDeque2);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));\n",
                        "      \n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque2.offerLast0((Integer) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // e\n",
                        "         //\n",
                        "         verifyException(\"java.util.Objects\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test24()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "contains"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "isEmpty"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offerLast0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "2427-2523:test23": {
                    "start": 2427,
                    "end": 2523,
                    "body": [
                        "  public void test23()  throws Throwable  {\n",
                        "      int int0 = 1;\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(1, 7, false, (Collection<? extends Integer>) null);\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      Integer integer0 = null;\n",
                        "      Integer integer1 = new Integer(2155);\n",
                        "      assertEquals(2155, (int)integer1);\n",
                        "      assertNotNull(integer1);\n",
                        "      assertFalse(integer1.equals((Object)int0));\n",
                        "      \n",
                        "      TimeUnit timeUnit0 = TimeUnit.DAYS;\n",
                        "      boolean boolean0 = linkedBlockingDeque0.offerLast2(integer1, 7, timeUnit0);\n",
                        "      assertTrue(linkedBlockingDeque0.contains(integer1));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertTrue(boolean0);\n",
                        "      assertFalse(integer1.equals((Object)int0));\n",
                        "      \n",
                        "      int int1 = linkedBlockingDeque0.size();\n",
                        "      assertTrue(linkedBlockingDeque0.contains(integer1));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertEquals(1, int1);\n",
                        "      assertTrue(int1 == int0);\n",
                        "      \n",
                        "      Spliterator<Integer> spliterator0 = linkedBlockingDeque0.spliterator();\n",
                        "      assertTrue(linkedBlockingDeque0.contains(integer1));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertNotNull(spliterator0);\n",
                        "      \n",
                        "      Duration duration0 = Duration.ofDays(1665L);\n",
                        "      assertNotNull(duration0);\n",
                        "      \n",
                        "      Duration duration1 = Duration.ofSeconds(1665L, 1885L);\n",
                        "      assertNotSame(duration1, duration0);\n",
                        "      assertNotNull(duration1);\n",
                        "      assertFalse(duration1.equals((Object)duration0));\n",
                        "      \n",
                        "      Duration duration2 = duration1.plusMillis(2288L);\n",
                        "      assertNotSame(duration1, duration0);\n",
                        "      assertNotSame(duration1, duration2);\n",
                        "      assertNotSame(duration2, duration0);\n",
                        "      assertNotSame(duration2, duration1);\n",
                        "      assertNotNull(duration2);\n",
                        "      assertFalse(duration1.equals((Object)duration0));\n",
                        "      assertFalse(duration2.equals((Object)duration0));\n",
                        "      assertFalse(duration2.equals((Object)duration1));\n",
                        "      \n",
                        "      Duration duration3 = duration1.abs();\n",
                        "      assertNotSame(duration1, duration0);\n",
                        "      assertSame(duration1, duration3);\n",
                        "      assertNotSame(duration1, duration2);\n",
                        "      assertNotSame(duration3, duration2);\n",
                        "      assertSame(duration3, duration1);\n",
                        "      assertNotSame(duration3, duration0);\n",
                        "      assertNotNull(duration3);\n",
                        "      assertFalse(duration1.equals((Object)duration0));\n",
                        "      assertFalse(duration1.equals((Object)duration2));\n",
                        "      assertFalse(duration3.equals((Object)duration2));\n",
                        "      assertFalse(duration3.equals((Object)duration0));\n",
                        "      \n",
                        "      Duration duration4 = duration0.minus(duration1);\n",
                        "      assertNotSame(duration0, duration2);\n",
                        "      assertNotSame(duration0, duration4);\n",
                        "      assertNotSame(duration0, duration3);\n",
                        "      assertNotSame(duration0, duration1);\n",
                        "      assertNotSame(duration1, duration0);\n",
                        "      assertSame(duration1, duration3);\n",
                        "      assertNotSame(duration1, duration2);\n",
                        "      assertNotSame(duration1, duration4);\n",
                        "      assertNotSame(duration4, duration2);\n",
                        "      assertNotSame(duration4, duration0);\n",
                        "      assertNotSame(duration4, duration1);\n",
                        "      assertNotSame(duration4, duration3);\n",
                        "      assertNotNull(duration4);\n",
                        "      assertFalse(duration0.equals((Object)duration2));\n",
                        "      assertFalse(duration0.equals((Object)duration3));\n",
                        "      assertFalse(duration0.equals((Object)duration1));\n",
                        "      assertFalse(duration1.equals((Object)duration0));\n",
                        "      assertFalse(duration1.equals((Object)duration2));\n",
                        "      assertFalse(duration4.equals((Object)duration2));\n",
                        "      assertFalse(duration4.equals((Object)duration0));\n",
                        "      assertFalse(duration4.equals((Object)duration1));\n",
                        "      assertFalse(duration4.equals((Object)duration3));\n",
                        "      \n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque0.offer1((Integer) null, duration0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // e\n",
                        "         //\n",
                        "         verifyException(\"java.util.Objects\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test23()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offerLast2"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "size"
                        ],
                        [
                            "library",
                            "java.base/java/util/Collection",
                            "spliterator"
                        ],
                        [
                            "library",
                            "java.base/java/time/Duration",
                            "ofDays"
                        ],
                        [
                            "library",
                            "java.base/java/time/Duration",
                            "ofSeconds"
                        ],
                        [
                            "library",
                            "java.base/java/time/Duration",
                            "plusMillis"
                        ],
                        [
                            "library",
                            "java.base/java/time/Duration",
                            "abs"
                        ],
                        [
                            "library",
                            "java.base/java/time/Duration",
                            "minus"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotSame"
                        ],
                        [
                            "library",
                            "java.base/java/time/Duration",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertSame"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offer1"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "2294-2424:test22": {
                    "start": 2294,
                    "end": 2424,
                    "body": [
                        "  public void test22()  throws Throwable  {\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(1, 7, false, (Collection<? extends Integer>) null);\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      Integer integer0 = new Integer(2155);\n",
                        "      assertEquals(2155, (int)integer0);\n",
                        "      assertNotNull(integer0);\n",
                        "      \n",
                        "      TimeUnit timeUnit0 = TimeUnit.DAYS;\n",
                        "      boolean boolean0 = linkedBlockingDeque0.offerLast2(integer0, 7, timeUnit0);\n",
                        "      assertTrue(linkedBlockingDeque0.contains(integer0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(7));\n",
                        "      assertTrue(boolean0);\n",
                        "      \n",
                        "      int int0 = linkedBlockingDeque0.size();\n",
                        "      assertTrue(linkedBlockingDeque0.contains(integer0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(7));\n",
                        "      assertEquals(1, int0);\n",
                        "      \n",
                        "      Spliterator<Integer> spliterator0 = linkedBlockingDeque0.spliterator();\n",
                        "      assertTrue(linkedBlockingDeque0.contains(integer0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(7));\n",
                        "      assertNotNull(spliterator0);\n",
                        "      \n",
                        "      Duration duration0 = Duration.ofSeconds(1665L, 1885L);\n",
                        "      assertNotNull(duration0);\n",
                        "      \n",
                        "      Duration duration1 = duration0.plusMillis(2288L);\n",
                        "      assertNotSame(duration0, duration1);\n",
                        "      assertNotSame(duration1, duration0);\n",
                        "      assertNotNull(duration1);\n",
                        "      assertFalse(duration1.equals((Object)duration0));\n",
                        "      \n",
                        "      Duration duration2 = duration0.abs();\n",
                        "      assertNotSame(duration0, duration1);\n",
                        "      assertSame(duration0, duration2);\n",
                        "      assertSame(duration2, duration0);\n",
                        "      assertNotSame(duration2, duration1);\n",
                        "      assertNotNull(duration2);\n",
                        "      assertFalse(duration0.equals((Object)duration1));\n",
                        "      assertFalse(duration2.equals((Object)duration1));\n",
                        "      \n",
                        "      Integer integer1 = new Integer(1);\n",
                        "      assertEquals(1, (int)integer1);\n",
                        "      assertNotNull(integer1);\n",
                        "      assertTrue(integer1.equals((Object)int0));\n",
                        "      assertFalse(integer1.equals((Object)integer0));\n",
                        "      \n",
                        "      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;\n",
                        "      Integer integer2 = new Integer(0);\n",
                        "      assertEquals(0, (int)integer2);\n",
                        "      assertNotNull(integer2);\n",
                        "      assertFalse(integer2.equals((Object)integer0));\n",
                        "      assertFalse(integer2.equals((Object)int0));\n",
                        "      assertFalse(integer2.equals((Object)integer1));\n",
                        "      \n",
                        "      boolean boolean1 = linkedBlockingDeque0.offer(integer2);\n",
                        "      assertTrue(linkedBlockingDeque0.contains(integer2));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertTrue(boolean1);\n",
                        "      assertFalse(integer2.equals((Object)integer0));\n",
                        "      assertFalse(integer2.equals((Object)int0));\n",
                        "      assertFalse(integer2.equals((Object)integer1));\n",
                        "      assertTrue(boolean1 == boolean0);\n",
                        "      \n",
                        "      Integer integer3 = new Integer(0);\n",
                        "      assertEquals(0, (int)integer3);\n",
                        "      assertNotNull(integer3);\n",
                        "      assertFalse(integer3.equals((Object)integer0));\n",
                        "      assertFalse(integer3.equals((Object)int0));\n",
                        "      assertFalse(integer3.equals((Object)integer1));\n",
                        "      assertTrue(integer3.equals((Object)integer2));\n",
                        "      \n",
                        "      linkedBlockingDeque0.putFirst(integer3);\n",
                        "      assertTrue(linkedBlockingDeque0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(7));\n",
                        "      assertFalse(integer3.equals((Object)integer0));\n",
                        "      assertFalse(integer3.equals((Object)int0));\n",
                        "      assertFalse(integer3.equals((Object)integer1));\n",
                        "      assertTrue(integer3.equals((Object)integer2));\n",
                        "      \n",
                        "      boolean boolean2 = linkedBlockingDeque0.offerFirst2(integer1, 0L, timeUnit1);\n",
                        "      assertTrue(linkedBlockingDeque0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(7));\n",
                        "      assertTrue(boolean2);\n",
                        "      assertNotSame(timeUnit1, timeUnit0);\n",
                        "      assertTrue(integer1.equals((Object)int0));\n",
                        "      assertFalse(integer1.equals((Object)integer3));\n",
                        "      assertFalse(integer1.equals((Object)integer2));\n",
                        "      assertFalse(integer1.equals((Object)integer0));\n",
                        "      assertFalse(timeUnit1.equals((Object)timeUnit0));\n",
                        "      assertTrue(boolean2 == boolean1);\n",
                        "      assertTrue(boolean2 == boolean0);\n",
                        "      \n",
                        "      linkedBlockingDeque0.interuptTakeWaiters();\n",
                        "      assertTrue(linkedBlockingDeque0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(7));\n",
                        "      \n",
                        "      linkedBlockingDeque0.putLast(integer2);\n",
                        "      assertTrue(linkedBlockingDeque0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(7));\n",
                        "      assertTrue(integer2.equals((Object)integer3));\n",
                        "      assertFalse(integer2.equals((Object)integer0));\n",
                        "      assertFalse(integer2.equals((Object)int0));\n",
                        "      assertFalse(integer2.equals((Object)integer1));\n",
                        "      \n",
                        "      Integer integer4 = linkedBlockingDeque0.removeLast();\n",
                        "      assertTrue(linkedBlockingDeque0.contains(integer4));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(7));\n",
                        "      assertEquals(0, (int)integer4);\n",
                        "      assertNotNull(integer4);\n",
                        "      assertTrue(integer4.equals((Object)integer3));\n",
                        "      assertFalse(integer4.equals((Object)int0));\n",
                        "      assertFalse(integer4.equals((Object)integer1));\n",
                        "      assertFalse(integer4.equals((Object)integer0));\n",
                        "      \n",
                        "      Integer[] integerArray0 = new Integer[4];\n",
                        "      integerArray0[0] = integer0;\n",
                        "      integerArray0[1] = integer0;\n",
                        "      integerArray0[2] = null;\n",
                        "      integerArray0[3] = integer4;\n",
                        "      Integer[] integerArray1 = linkedBlockingDeque0.toArray1(integerArray0);\n",
                        "      assertTrue(linkedBlockingDeque0.contains(integer4));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(7));\n",
                        "      assertEquals(4, integerArray0.length);\n",
                        "      assertEquals(4, integerArray1.length);\n",
                        "      assertSame(integerArray0, integerArray1);\n",
                        "      assertSame(integerArray1, integerArray0);\n",
                        "      assertNotNull(integerArray1);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test22()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offerLast2"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "size"
                        ],
                        [
                            "library",
                            "java.base/java/util/Collection",
                            "spliterator"
                        ],
                        [
                            "library",
                            "java.base/java/time/Duration",
                            "ofSeconds"
                        ],
                        [
                            "library",
                            "java.base/java/time/Duration",
                            "plusMillis"
                        ],
                        [
                            "library",
                            "java.base/java/time/Duration",
                            "abs"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offer"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offerFirst2"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "removeLast"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "toArray1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotSame"
                        ],
                        [
                            "library",
                            "java.base/java/time/Duration",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertSame"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "equals"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "putFirst"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Enum",
                            "equals"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "interuptTakeWaiters"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "putLast"
                        ]
                    ]
                },
                "2196-2291:test21": {
                    "start": 2196,
                    "end": 2291,
                    "body": [
                        "  public void test21()  throws Throwable  {\n",
                        "      int int0 = 1;\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(1, 7, false, (Collection<? extends Integer>) null);\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      Integer integer0 = new Integer(2155);\n",
                        "      assertEquals(2155, (int)integer0);\n",
                        "      assertNotNull(integer0);\n",
                        "      assertFalse(integer0.equals((Object)int0));\n",
                        "      \n",
                        "      TimeUnit timeUnit0 = TimeUnit.DAYS;\n",
                        "      boolean boolean0 = linkedBlockingDeque0.offerLast2(integer0, 7, timeUnit0);\n",
                        "      assertTrue(linkedBlockingDeque0.contains(2155));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertTrue(boolean0);\n",
                        "      assertFalse(integer0.equals((Object)int0));\n",
                        "      \n",
                        "      int int1 = linkedBlockingDeque0.size();\n",
                        "      assertTrue(linkedBlockingDeque0.contains(2155));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertEquals(1, int1);\n",
                        "      assertTrue(int1 == int0);\n",
                        "      \n",
                        "      Spliterator<Integer> spliterator0 = linkedBlockingDeque0.spliterator();\n",
                        "      assertTrue(linkedBlockingDeque0.contains(2155));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertNotNull(spliterator0);\n",
                        "      \n",
                        "      Duration duration0 = Duration.ofDays(1665L);\n",
                        "      assertNotNull(duration0);\n",
                        "      \n",
                        "      Duration duration1 = Duration.ofSeconds(1665L, 1885L);\n",
                        "      assertNotSame(duration1, duration0);\n",
                        "      assertNotNull(duration1);\n",
                        "      assertFalse(duration1.equals((Object)duration0));\n",
                        "      \n",
                        "      Duration duration2 = duration1.plusMillis(2288L);\n",
                        "      assertNotSame(duration1, duration2);\n",
                        "      assertNotSame(duration1, duration0);\n",
                        "      assertNotSame(duration2, duration0);\n",
                        "      assertNotSame(duration2, duration1);\n",
                        "      assertNotNull(duration2);\n",
                        "      assertFalse(duration1.equals((Object)duration0));\n",
                        "      assertFalse(duration2.equals((Object)duration0));\n",
                        "      assertFalse(duration2.equals((Object)duration1));\n",
                        "      \n",
                        "      Duration duration3 = duration1.abs();\n",
                        "      assertNotSame(duration1, duration2);\n",
                        "      assertSame(duration1, duration3);\n",
                        "      assertNotSame(duration1, duration0);\n",
                        "      assertNotSame(duration3, duration0);\n",
                        "      assertSame(duration3, duration1);\n",
                        "      assertNotSame(duration3, duration2);\n",
                        "      assertNotNull(duration3);\n",
                        "      assertFalse(duration1.equals((Object)duration2));\n",
                        "      assertFalse(duration1.equals((Object)duration0));\n",
                        "      assertFalse(duration3.equals((Object)duration0));\n",
                        "      assertFalse(duration3.equals((Object)duration2));\n",
                        "      \n",
                        "      Duration duration4 = duration0.minus(duration1);\n",
                        "      assertNotSame(duration0, duration1);\n",
                        "      assertNotSame(duration0, duration4);\n",
                        "      assertNotSame(duration0, duration3);\n",
                        "      assertNotSame(duration0, duration2);\n",
                        "      assertNotSame(duration1, duration2);\n",
                        "      assertSame(duration1, duration3);\n",
                        "      assertNotSame(duration1, duration4);\n",
                        "      assertNotSame(duration1, duration0);\n",
                        "      assertNotSame(duration4, duration3);\n",
                        "      assertNotSame(duration4, duration0);\n",
                        "      assertNotSame(duration4, duration1);\n",
                        "      assertNotSame(duration4, duration2);\n",
                        "      assertNotNull(duration4);\n",
                        "      assertFalse(duration0.equals((Object)duration1));\n",
                        "      assertFalse(duration0.equals((Object)duration3));\n",
                        "      assertFalse(duration0.equals((Object)duration2));\n",
                        "      assertFalse(duration1.equals((Object)duration2));\n",
                        "      assertFalse(duration1.equals((Object)duration0));\n",
                        "      assertFalse(duration4.equals((Object)duration3));\n",
                        "      assertFalse(duration4.equals((Object)duration0));\n",
                        "      assertFalse(duration4.equals((Object)duration1));\n",
                        "      assertFalse(duration4.equals((Object)duration2));\n",
                        "      \n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque0.offer1((Integer) null, duration0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // e\n",
                        "         //\n",
                        "         verifyException(\"java.util.Objects\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test21()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offerLast2"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "size"
                        ],
                        [
                            "library",
                            "java.base/java/util/Collection",
                            "spliterator"
                        ],
                        [
                            "library",
                            "java.base/java/time/Duration",
                            "ofDays"
                        ],
                        [
                            "library",
                            "java.base/java/time/Duration",
                            "ofSeconds"
                        ],
                        [
                            "library",
                            "java.base/java/time/Duration",
                            "plusMillis"
                        ],
                        [
                            "library",
                            "java.base/java/time/Duration",
                            "abs"
                        ],
                        [
                            "library",
                            "java.base/java/time/Duration",
                            "minus"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotSame"
                        ],
                        [
                            "library",
                            "java.base/java/time/Duration",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertSame"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offer1"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "2168-2193:test20": {
                    "start": 2168,
                    "end": 2193,
                    "body": [
                        "  public void test20()  throws Throwable  {\n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedHashSet0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(2359, 1, false, linkedHashSet0);\n",
                        "      assertFalse(linkedHashSet0.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      int int0 = 0;\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque0.removeLast();\n",
                        "        fail(\"Expecting exception: NoSuchElementException\");\n",
                        "      \n",
                        "      } catch(NoSuchElementException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.pool2.impl.LinkedBlockingDeque\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test20()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "isEmpty"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "removeLast"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "2121-2165:test19": {
                    "start": 2121,
                    "end": 2165,
                    "body": [
                        "  public void test19()  throws Throwable  {\n",
                        "      int int0 = 5;\n",
                        "      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n",
                        "      assertFalse(linkedList0.contains(int0));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedList0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(5, 5, false, linkedList0);\n",
                        "      assertFalse(linkedList0.contains(int0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(int0));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      Duration duration0 = Duration.ofMinutes(0L);\n",
                        "      assertNotNull(duration0);\n",
                        "      \n",
                        "      int int1 = duration0.toSecondsPart();\n",
                        "      assertEquals(0, int1);\n",
                        "      assertFalse(int1 == int0);\n",
                        "      \n",
                        "      Integer integer0 = linkedBlockingDeque0.poll1(duration0);\n",
                        "      assertFalse(linkedList0.contains(int0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(int0));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNull(integer0);\n",
                        "      \n",
                        "      Stream<Integer> stream0 = linkedBlockingDeque0.parallelStream();\n",
                        "      assertFalse(linkedList0.contains(int0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(int0));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(stream0);\n",
                        "      \n",
                        "      int int2 = 2412;\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedList0.remove(2412);\n",
                        "        fail(\"Expecting exception: IndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(IndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index: 2412, Size: 0\n",
                        "         //\n",
                        "         verifyException(\"java.util.LinkedList\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test19()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/time/Duration",
                            "ofMinutes"
                        ],
                        [
                            "library",
                            "java.base/java/time/Duration",
                            "toSecondsPart"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "poll1"
                        ],
                        [
                            "library",
                            "java.base/java/util/Collection",
                            "parallelStream"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "contains"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "remove"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "2067-2118:test18": {
                    "start": 2067,
                    "end": 2118,
                    "body": [
                        "  public void test18()  throws Throwable  {\n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedHashSet0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>((-1), (-1), true, linkedHashSet0);\n",
                        "      assertFalse(linkedHashSet0.contains((-1)));\n",
                        "      assertFalse(linkedBlockingDeque0.contains((-1)));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      Integer integer0 = new Integer((-1));\n",
                        "      assertEquals((-1), (int)integer0);\n",
                        "      assertNotNull(integer0);\n",
                        "      \n",
                        "      boolean boolean0 = linkedHashSet0.add(integer0);\n",
                        "      assertTrue(linkedHashSet0.contains(integer0));\n",
                        "      assertTrue(boolean0);\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      \n",
                        "      linkedBlockingDeque0.clear();\n",
                        "      assertTrue(linkedHashSet0.contains(integer0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(integer0));\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      \n",
                        "      linkedBlockingDeque0.clear();\n",
                        "      assertTrue(linkedHashSet0.contains(integer0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(integer0));\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      \n",
                        "      Integer integer1 = new Integer((-1));\n",
                        "      assertEquals((-1), (int)integer1);\n",
                        "      assertNotNull(integer1);\n",
                        "      assertTrue(integer1.equals((Object)integer0));\n",
                        "      \n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque0.addLast(integer1);\n",
                        "        fail(\"Expecting exception: IllegalStateException\");\n",
                        "      \n",
                        "      } catch(IllegalStateException e) {\n",
                        "         //\n",
                        "         // Deque full\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.pool2.impl.LinkedBlockingDeque\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test18()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "add"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "isEmpty"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "clear"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "equals"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "addLast"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "2025-2064:test17": {
                    "start": 2025,
                    "end": 2064,
                    "body": [
                        "  public void test17()  throws Throwable  {\n",
                        "      int int0 = 2969;\n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      assertFalse(linkedHashSet0.contains(int0));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedHashSet0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(2969, 2969, false, linkedHashSet0);\n",
                        "      assertFalse(linkedHashSet0.contains(2969));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(2969));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      Integer integer0 = new Integer(1);\n",
                        "      assertEquals(1, (int)integer0);\n",
                        "      assertNotNull(integer0);\n",
                        "      assertFalse(integer0.equals((Object)int0));\n",
                        "      \n",
                        "      boolean boolean0 = linkedHashSet0.add(integer0);\n",
                        "      assertTrue(linkedHashSet0.contains(integer0));\n",
                        "      assertFalse(linkedHashSet0.contains(2969));\n",
                        "      assertTrue(boolean0);\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertFalse(integer0.equals((Object)int0));\n",
                        "      \n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque0.getLast();\n",
                        "        fail(\"Expecting exception: NoSuchElementException\");\n",
                        "      \n",
                        "      } catch(NoSuchElementException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.pool2.impl.LinkedBlockingDeque\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test17()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "add"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "contains"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "isEmpty"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "equals"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "getLast"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "1763-2022:test16": {
                    "start": 1763,
                    "end": 2022,
                    "body": [
                        "  public void test16()  throws Throwable  {\n",
                        "      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedList0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(917, 917, true, linkedList0);\n",
                        "      assertFalse(linkedList0.contains(917));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(917));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;\n",
                        "      Integer integer0 = linkedBlockingDeque0.pollLast2(371L, timeUnit0);\n",
                        "      assertFalse(linkedList0.contains(917));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(917));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNull(integer0);\n",
                        "      \n",
                        "      Object object0 = new Object();\n",
                        "      assertNotNull(object0);\n",
                        "      \n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      assertFalse(linkedHashSet0.contains(917));\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotNull(linkedHashSet0);\n",
                        "      \n",
                        "      boolean boolean0 = linkedHashSet0.add((Integer) null);\n",
                        "      assertFalse(linkedHashSet0.contains(917));\n",
                        "      assertTrue(boolean0);\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      \n",
                        "      int int0 = 399;\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(399, 399, true, linkedHashSet0);\n",
                        "      assertFalse(linkedHashSet0.contains(399));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(399));\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertNotNull(linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      linkedBlockingDeque1.clear();\n",
                        "      assertFalse(linkedHashSet0.contains(399));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(399));\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      linkedBlockingDeque0.clear();\n",
                        "      assertFalse(linkedList0.contains(399));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(399));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      \n",
                        "      Integer integer1 = new Integer((-6109));\n",
                        "      assertEquals((-6109), (int)integer1);\n",
                        "      assertNotNull(integer1);\n",
                        "      assertFalse(integer1.equals((Object)int0));\n",
                        "      \n",
                        "      Integer integer2 = new Integer((-2795));\n",
                        "      assertEquals((-2795), (int)integer2);\n",
                        "      assertNotNull(integer2);\n",
                        "      assertFalse(integer2.equals((Object)int0));\n",
                        "      assertFalse(integer2.equals((Object)integer1));\n",
                        "      \n",
                        "      linkedBlockingDeque1.addLast(integer2);\n",
                        "      assertFalse(linkedHashSet0.contains(399));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(399));\n",
                        "      assertTrue(linkedBlockingDeque1.contains(integer2));\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(integer2.equals((Object)int0));\n",
                        "      assertFalse(integer2.equals((Object)integer1));\n",
                        "      \n",
                        "      int int1 = linkedBlockingDeque1.getTakeQueueLength();\n",
                        "      assertFalse(linkedHashSet0.contains(399));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(399));\n",
                        "      assertTrue(linkedBlockingDeque1.contains(integer2));\n",
                        "      assertEquals(0, int1);\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(int1 == int0);\n",
                        "      \n",
                        "      Integer integer3 = new Integer(669);\n",
                        "      assertEquals(669, (int)integer3);\n",
                        "      assertNotNull(integer3);\n",
                        "      assertFalse(integer3.equals((Object)integer1));\n",
                        "      assertFalse(integer3.equals((Object)int0));\n",
                        "      assertFalse(integer3.equals((Object)integer2));\n",
                        "      assertFalse(integer3.equals((Object)int1));\n",
                        "      \n",
                        "      Integer integer4 = new Integer(399);\n",
                        "      assertEquals(399, (int)integer4);\n",
                        "      assertNotNull(integer4);\n",
                        "      assertFalse(integer4.equals((Object)integer1));\n",
                        "      assertTrue(integer4.equals((Object)int0));\n",
                        "      assertFalse(integer4.equals((Object)int1));\n",
                        "      assertFalse(integer4.equals((Object)integer3));\n",
                        "      assertFalse(integer4.equals((Object)integer2));\n",
                        "      \n",
                        "      linkedHashSet0.clear();\n",
                        "      assertFalse(linkedHashSet0.contains(399));\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      \n",
                        "      boolean boolean1 = linkedHashSet0.add(integer4);\n",
                        "      assertFalse(linkedHashSet0.contains(integer3));\n",
                        "      assertTrue(linkedHashSet0.contains(399));\n",
                        "      assertTrue(boolean1);\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertFalse(integer4.equals((Object)integer1));\n",
                        "      assertTrue(integer4.equals((Object)int0));\n",
                        "      assertFalse(integer4.equals((Object)int1));\n",
                        "      assertFalse(integer4.equals((Object)integer3));\n",
                        "      assertFalse(integer4.equals((Object)integer2));\n",
                        "      \n",
                        "      Integer integer5 = new Integer((-6109));\n",
                        "      assertEquals((-6109), (int)integer5);\n",
                        "      assertNotNull(integer5);\n",
                        "      assertTrue(integer5.equals((Object)integer1));\n",
                        "      assertFalse(integer5.equals((Object)integer2));\n",
                        "      assertFalse(integer5.equals((Object)int1));\n",
                        "      assertFalse(integer5.equals((Object)int0));\n",
                        "      assertFalse(integer5.equals((Object)integer3));\n",
                        "      assertFalse(integer5.equals((Object)integer4));\n",
                        "      \n",
                        "      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(integer5);\n",
                        "      assertFalse(linkedHashSet0.contains((-6109)));\n",
                        "      assertTrue(linkedHashSet0.contains(399));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(399));\n",
                        "      assertTrue(linkedBlockingDeque1.contains(integer2));\n",
                        "      assertFalse(boolean2);\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertTrue(integer5.equals((Object)integer1));\n",
                        "      assertFalse(integer5.equals((Object)integer2));\n",
                        "      assertFalse(integer5.equals((Object)int1));\n",
                        "      assertFalse(integer5.equals((Object)int0));\n",
                        "      assertFalse(integer5.equals((Object)integer3));\n",
                        "      assertFalse(integer5.equals((Object)integer4));\n",
                        "      assertFalse(boolean2 == boolean1);\n",
                        "      assertFalse(boolean2 == boolean0);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Integer integer6 = new Integer((-2096));\n",
                        "      assertEquals((-2096), (int)integer6);\n",
                        "      assertNotNull(integer6);\n",
                        "      assertFalse(integer6.equals((Object)int0));\n",
                        "      assertFalse(integer6.equals((Object)integer3));\n",
                        "      assertFalse(integer6.equals((Object)integer2));\n",
                        "      assertFalse(integer6.equals((Object)int1));\n",
                        "      assertFalse(integer6.equals((Object)integer1));\n",
                        "      assertFalse(integer6.equals((Object)integer4));\n",
                        "      assertFalse(integer6.equals((Object)integer5));\n",
                        "      \n",
                        "      linkedBlockingDeque0.addFirst(integer6);\n",
                        "      assertFalse(linkedList0.contains(399));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(399));\n",
                        "      assertTrue(linkedBlockingDeque0.contains((-2096)));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(integer6.equals((Object)int0));\n",
                        "      assertFalse(integer6.equals((Object)integer3));\n",
                        "      assertFalse(integer6.equals((Object)integer2));\n",
                        "      assertFalse(integer6.equals((Object)int1));\n",
                        "      assertFalse(integer6.equals((Object)integer1));\n",
                        "      assertFalse(integer6.equals((Object)integer4));\n",
                        "      assertFalse(integer6.equals((Object)integer5));\n",
                        "      \n",
                        "      Integer integer7 = linkedBlockingDeque1.removeFirst();\n",
                        "      assertFalse(linkedHashSet0.contains((-6109)));\n",
                        "      assertTrue(linkedHashSet0.contains(399));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(399));\n",
                        "      assertEquals((-2795), (int)integer7);\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertNotNull(integer7);\n",
                        "      assertFalse(integer7.equals((Object)integer5));\n",
                        "      assertFalse(integer7.equals((Object)int1));\n",
                        "      assertFalse(integer7.equals((Object)integer6));\n",
                        "      assertFalse(integer7.equals((Object)integer3));\n",
                        "      assertFalse(integer7.equals((Object)int0));\n",
                        "      assertFalse(integer7.equals((Object)integer1));\n",
                        "      assertFalse(integer7.equals((Object)integer4));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Integer integer8 = new Integer(399);\n",
                        "      assertEquals(399, (int)integer8);\n",
                        "      assertNotNull(integer8);\n",
                        "      assertFalse(integer8.equals((Object)integer6));\n",
                        "      assertFalse(integer8.equals((Object)int1));\n",
                        "      assertFalse(integer8.equals((Object)integer3));\n",
                        "      assertFalse(integer8.equals((Object)integer2));\n",
                        "      assertTrue(integer8.equals((Object)int0));\n",
                        "      assertFalse(integer8.equals((Object)integer5));\n",
                        "      assertTrue(integer8.equals((Object)integer4));\n",
                        "      assertFalse(integer8.equals((Object)integer7));\n",
                        "      assertFalse(integer8.equals((Object)integer1));\n",
                        "      \n",
                        "      boolean boolean3 = linkedHashSet0.add(integer8);\n",
                        "      assertFalse(linkedHashSet0.contains((-6109)));\n",
                        "      assertTrue(linkedHashSet0.contains(399));\n",
                        "      assertFalse(boolean3);\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertFalse(integer8.equals((Object)integer6));\n",
                        "      assertFalse(integer8.equals((Object)int1));\n",
                        "      assertFalse(integer8.equals((Object)integer3));\n",
                        "      assertFalse(integer8.equals((Object)integer2));\n",
                        "      assertTrue(integer8.equals((Object)int0));\n",
                        "      assertFalse(integer8.equals((Object)integer5));\n",
                        "      assertTrue(integer8.equals((Object)integer4));\n",
                        "      assertFalse(integer8.equals((Object)integer7));\n",
                        "      assertFalse(integer8.equals((Object)integer1));\n",
                        "      assertFalse(boolean3 == boolean0);\n",
                        "      assertTrue(boolean3 == boolean2);\n",
                        "      assertFalse(boolean3 == boolean1);\n",
                        "      \n",
                        "      Integer integer9 = linkedBlockingDeque0.peek();\n",
                        "      assertFalse(linkedList0.contains(399));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(399));\n",
                        "      assertTrue(linkedBlockingDeque0.contains(integer9));\n",
                        "      assertEquals((-2096), (int)integer9);\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotNull(integer9);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(integer9.equals((Object)int1));\n",
                        "      assertFalse(integer9.equals((Object)integer5));\n",
                        "      assertFalse(integer9.equals((Object)integer2));\n",
                        "      assertFalse(integer9.equals((Object)integer3));\n",
                        "      assertFalse(integer9.equals((Object)integer1));\n",
                        "      assertFalse(integer9.equals((Object)integer8));\n",
                        "      assertFalse(integer9.equals((Object)integer4));\n",
                        "      assertFalse(integer9.equals((Object)int0));\n",
                        "      assertFalse(integer9.equals((Object)integer7));\n",
                        "      \n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque1.getLast();\n",
                        "        fail(\"Expecting exception: NoSuchElementException\");\n",
                        "      \n",
                        "      } catch(NoSuchElementException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.pool2.impl.LinkedBlockingDeque\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test16()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "pollLast2"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "Object"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "add"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "getTakeQueueLength"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "removeLastOccurrence"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "removeFirst"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "peek"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "contains"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "isEmpty"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "size"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "clear"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotSame"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "equals"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "addLast"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "clear"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "addFirst"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "getLast"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "1500-1760:test15": {
                    "start": 1500,
                    "end": 1760,
                    "body": [
                        "  public void test15()  throws Throwable  {\n",
                        "      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedList0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(917, 917, true, linkedList0);\n",
                        "      assertFalse(linkedList0.contains(917));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(917));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;\n",
                        "      Integer integer0 = linkedBlockingDeque0.pollLast2(371L, timeUnit0);\n",
                        "      assertFalse(linkedList0.contains(917));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(917));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNull(integer0);\n",
                        "      \n",
                        "      Object object0 = new Object();\n",
                        "      assertNotNull(object0);\n",
                        "      \n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      assertFalse(linkedHashSet0.contains(917));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedHashSet0);\n",
                        "      \n",
                        "      boolean boolean0 = linkedHashSet0.add((Integer) null);\n",
                        "      assertFalse(linkedHashSet0.contains(917));\n",
                        "      assertTrue(boolean0);\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(399, 399, true, linkedHashSet0);\n",
                        "      assertFalse(linkedHashSet0.contains(917));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(917));\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      linkedBlockingDeque1.clear();\n",
                        "      assertFalse(linkedHashSet0.contains(917));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(917));\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      linkedBlockingDeque0.clear();\n",
                        "      assertFalse(linkedList0.contains(917));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(917));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      \n",
                        "      Integer integer1 = new Integer((-6109));\n",
                        "      assertEquals((-6109), (int)integer1);\n",
                        "      assertNotNull(integer1);\n",
                        "      \n",
                        "      Integer integer2 = new Integer((-2795));\n",
                        "      assertEquals((-2795), (int)integer2);\n",
                        "      assertNotNull(integer2);\n",
                        "      assertFalse(integer2.equals((Object)integer1));\n",
                        "      \n",
                        "      linkedBlockingDeque1.addLast(integer2);\n",
                        "      assertFalse(linkedHashSet0.contains((-6109)));\n",
                        "      assertTrue(linkedBlockingDeque1.contains((-2795)));\n",
                        "      assertFalse(linkedBlockingDeque1.contains((-6109)));\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(integer2.equals((Object)integer1));\n",
                        "      \n",
                        "      int int0 = linkedBlockingDeque1.getTakeQueueLength();\n",
                        "      assertFalse(linkedHashSet0.contains((-6109)));\n",
                        "      assertTrue(linkedBlockingDeque1.contains((-2795)));\n",
                        "      assertFalse(linkedBlockingDeque1.contains((-6109)));\n",
                        "      assertEquals(0, int0);\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Integer integer3 = new Integer(669);\n",
                        "      assertEquals(669, (int)integer3);\n",
                        "      assertNotNull(integer3);\n",
                        "      assertFalse(integer3.equals((Object)integer1));\n",
                        "      assertFalse(integer3.equals((Object)int0));\n",
                        "      assertFalse(integer3.equals((Object)integer2));\n",
                        "      \n",
                        "      Integer integer4 = new Integer(399);\n",
                        "      assertEquals(399, (int)integer4);\n",
                        "      assertNotNull(integer4);\n",
                        "      assertFalse(integer4.equals((Object)integer1));\n",
                        "      assertFalse(integer4.equals((Object)int0));\n",
                        "      assertFalse(integer4.equals((Object)integer2));\n",
                        "      assertFalse(integer4.equals((Object)integer3));\n",
                        "      \n",
                        "      boolean boolean1 = linkedHashSet0.add(integer4);\n",
                        "      assertFalse(linkedHashSet0.contains((-6109)));\n",
                        "      assertTrue(linkedHashSet0.contains(399));\n",
                        "      assertTrue(boolean1);\n",
                        "      assertEquals(2, linkedHashSet0.size());\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertFalse(integer4.equals((Object)integer1));\n",
                        "      assertFalse(integer4.equals((Object)int0));\n",
                        "      assertFalse(integer4.equals((Object)integer2));\n",
                        "      assertFalse(integer4.equals((Object)integer3));\n",
                        "      \n",
                        "      Integer integer5 = new Integer((-6109));\n",
                        "      assertEquals((-6109), (int)integer5);\n",
                        "      assertNotNull(integer5);\n",
                        "      assertFalse(integer5.equals((Object)integer2));\n",
                        "      assertFalse(integer5.equals((Object)int0));\n",
                        "      assertFalse(integer5.equals((Object)integer3));\n",
                        "      assertFalse(integer5.equals((Object)integer4));\n",
                        "      assertTrue(integer5.equals((Object)integer1));\n",
                        "      \n",
                        "      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(integer5);\n",
                        "      assertFalse(linkedHashSet0.contains((-6109)));\n",
                        "      assertTrue(linkedHashSet0.contains(integer4));\n",
                        "      assertTrue(linkedBlockingDeque1.contains((-2795)));\n",
                        "      assertFalse(linkedBlockingDeque1.contains((-6109)));\n",
                        "      assertFalse(boolean2);\n",
                        "      assertEquals(2, linkedHashSet0.size());\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertFalse(integer5.equals((Object)integer2));\n",
                        "      assertFalse(integer5.equals((Object)int0));\n",
                        "      assertFalse(integer5.equals((Object)integer3));\n",
                        "      assertFalse(integer5.equals((Object)integer4));\n",
                        "      assertTrue(integer5.equals((Object)integer1));\n",
                        "      assertFalse(boolean2 == boolean1);\n",
                        "      assertFalse(boolean2 == boolean0);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Integer integer6 = new Integer((-2096));\n",
                        "      assertEquals((-2096), (int)integer6);\n",
                        "      assertNotNull(integer6);\n",
                        "      assertFalse(integer6.equals((Object)integer2));\n",
                        "      assertFalse(integer6.equals((Object)integer1));\n",
                        "      assertFalse(integer6.equals((Object)int0));\n",
                        "      assertFalse(integer6.equals((Object)integer5));\n",
                        "      assertFalse(integer6.equals((Object)integer3));\n",
                        "      assertFalse(integer6.equals((Object)integer4));\n",
                        "      \n",
                        "      linkedBlockingDeque0.addFirst(integer6);\n",
                        "      assertFalse(linkedList0.contains((-6109)));\n",
                        "      assertTrue(linkedBlockingDeque0.contains((-2096)));\n",
                        "      assertFalse(linkedBlockingDeque0.contains((-6109)));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(integer6.equals((Object)integer2));\n",
                        "      assertFalse(integer6.equals((Object)integer1));\n",
                        "      assertFalse(integer6.equals((Object)int0));\n",
                        "      assertFalse(integer6.equals((Object)integer5));\n",
                        "      assertFalse(integer6.equals((Object)integer3));\n",
                        "      assertFalse(integer6.equals((Object)integer4));\n",
                        "      \n",
                        "      Integer integer7 = linkedBlockingDeque1.removeFirst();\n",
                        "      assertFalse(linkedHashSet0.contains((-6109)));\n",
                        "      assertTrue(linkedHashSet0.contains(integer4));\n",
                        "      assertFalse(linkedBlockingDeque1.contains((-6109)));\n",
                        "      assertEquals((-2795), (int)integer7);\n",
                        "      assertEquals(2, linkedHashSet0.size());\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertNotNull(integer7);\n",
                        "      assertFalse(integer7.equals((Object)integer3));\n",
                        "      assertFalse(integer7.equals((Object)int0));\n",
                        "      assertFalse(integer7.equals((Object)integer1));\n",
                        "      assertFalse(integer7.equals((Object)integer4));\n",
                        "      assertFalse(integer7.equals((Object)integer6));\n",
                        "      assertFalse(integer7.equals((Object)integer5));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Integer integer8 = new Integer(399);\n",
                        "      assertEquals(399, (int)integer8);\n",
                        "      assertNotNull(integer8);\n",
                        "      assertFalse(integer8.equals((Object)integer2));\n",
                        "      assertFalse(integer8.equals((Object)integer1));\n",
                        "      assertFalse(integer8.equals((Object)integer3));\n",
                        "      assertTrue(integer8.equals((Object)integer4));\n",
                        "      assertFalse(integer8.equals((Object)int0));\n",
                        "      assertFalse(integer8.equals((Object)integer5));\n",
                        "      assertFalse(integer8.equals((Object)integer6));\n",
                        "      assertFalse(integer8.equals((Object)integer7));\n",
                        "      \n",
                        "      boolean boolean3 = linkedHashSet0.add(integer8);\n",
                        "      assertFalse(linkedHashSet0.contains((-6109)));\n",
                        "      assertTrue(linkedHashSet0.contains(399));\n",
                        "      assertFalse(boolean3);\n",
                        "      assertEquals(2, linkedHashSet0.size());\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertFalse(integer8.equals((Object)integer2));\n",
                        "      assertFalse(integer8.equals((Object)integer1));\n",
                        "      assertFalse(integer8.equals((Object)integer3));\n",
                        "      assertTrue(integer8.equals((Object)integer4));\n",
                        "      assertFalse(integer8.equals((Object)int0));\n",
                        "      assertFalse(integer8.equals((Object)integer5));\n",
                        "      assertFalse(integer8.equals((Object)integer6));\n",
                        "      assertFalse(integer8.equals((Object)integer7));\n",
                        "      assertTrue(boolean3 == boolean2);\n",
                        "      assertFalse(boolean3 == boolean0);\n",
                        "      assertFalse(boolean3 == boolean1);\n",
                        "      \n",
                        "      Integer integer9 = linkedBlockingDeque1.peek();\n",
                        "      assertFalse(linkedHashSet0.contains((-6109)));\n",
                        "      assertTrue(linkedHashSet0.contains(399));\n",
                        "      assertFalse(linkedBlockingDeque1.contains((-6109)));\n",
                        "      assertEquals(2, linkedHashSet0.size());\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertNull(integer9);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Integer integer10 = linkedBlockingDeque0.getLast();\n",
                        "      assertFalse(linkedList0.contains((-6109)));\n",
                        "      assertTrue(linkedBlockingDeque0.contains((-2096)));\n",
                        "      assertFalse(linkedBlockingDeque0.contains((-6109)));\n",
                        "      assertEquals((-2096), (int)integer10);\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotNull(integer10);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(integer10.equals((Object)int0));\n",
                        "      assertFalse(integer10.equals((Object)integer3));\n",
                        "      assertFalse(integer10.equals((Object)integer2));\n",
                        "      assertFalse(integer10.equals((Object)integer5));\n",
                        "      assertFalse(integer10.equals((Object)integer7));\n",
                        "      assertFalse(integer10.equals((Object)integer8));\n",
                        "      assertFalse(integer10.equals((Object)integer1));\n",
                        "      assertFalse(integer10.equals((Object)integer4));\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>((-1177), 0, true, linkedBlockingDeque1);\n",
                        "      assertFalse(linkedHashSet0.contains((-6109)));\n",
                        "      assertTrue(linkedHashSet0.contains(399));\n",
                        "      assertFalse(linkedBlockingDeque1.contains((-6109)));\n",
                        "      assertFalse(linkedBlockingDeque2.contains((-6109)));\n",
                        "      assertEquals(2, linkedHashSet0.size());\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedBlockingDeque2);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque2.offerFirst0((Integer) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // e\n",
                        "         //\n",
                        "         verifyException(\"java.util.Objects\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test15()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "pollLast2"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "Object"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "add"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "getTakeQueueLength"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "removeLastOccurrence"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "removeFirst"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "peek"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "getLast"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "contains"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "isEmpty"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "clear"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotSame"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "equals"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "addLast"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "addFirst"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offerFirst0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "1422-1497:test14": {
                    "start": 1422,
                    "end": 1497,
                    "body": [
                        "  public void test14()  throws Throwable  {\n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedHashSet0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>((-948), (-262), true, linkedHashSet0);\n",
                        "      assertFalse(linkedHashSet0.contains((-262)));\n",
                        "      assertFalse(linkedBlockingDeque0.contains((-262)));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(1, 1, true, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedHashSet0.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(1));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Integer[] integerArray0 = new Integer[2];\n",
                        "      Integer integer0 = new Integer(0);\n",
                        "      assertEquals(0, (int)integer0);\n",
                        "      assertNotNull(integer0);\n",
                        "      \n",
                        "      integerArray0[0] = integer0;\n",
                        "      Integer integer1 = new Integer((-2340));\n",
                        "      assertEquals((-2340), (int)integer1);\n",
                        "      assertNotNull(integer1);\n",
                        "      assertFalse(integer1.equals((Object)integer0));\n",
                        "      \n",
                        "      integerArray0[1] = integer1;\n",
                        "      Integer[] integerArray1 = linkedHashSet0.toArray(integerArray0);\n",
                        "      assertFalse(linkedHashSet0.contains(1));\n",
                        "      assertEquals(2, integerArray0.length);\n",
                        "      assertEquals(2, integerArray1.length);\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertSame(integerArray0, integerArray1);\n",
                        "      assertSame(integerArray1, integerArray0);\n",
                        "      assertNotNull(integerArray1);\n",
                        "      \n",
                        "      Integer integer2 = new Integer((-1729));\n",
                        "      assertEquals((-1729), (int)integer2);\n",
                        "      assertNotNull(integer2);\n",
                        "      assertFalse(integer2.equals((Object)integer0));\n",
                        "      assertFalse(integer2.equals((Object)integer1));\n",
                        "      \n",
                        "      linkedBlockingDeque1.put(integer2);\n",
                        "      assertFalse(linkedHashSet0.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(1));\n",
                        "      assertTrue(linkedBlockingDeque1.contains((-1729)));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(integer2.equals((Object)integer0));\n",
                        "      assertFalse(integer2.equals((Object)integer1));\n",
                        "      \n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque0.removeFirst();\n",
                        "        fail(\"Expecting exception: NoSuchElementException\");\n",
                        "      \n",
                        "      } catch(NoSuchElementException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.pool2.impl.LinkedBlockingDeque\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test14()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "toArray"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "isEmpty"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertSame"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "put"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotSame"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "removeFirst"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "1391-1419:test13": {
                    "start": 1391,
                    "end": 1419,
                    "body": [
                        "  public void test13()  throws Throwable  {\n",
                        "      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedList0);\n",
                        "      \n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedHashSet0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(399, (-2079), false, linkedHashSet0);\n",
                        "      assertFalse(linkedList0.contains(399));\n",
                        "      assertFalse(linkedHashSet0.contains(399));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(399));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      int int0 = linkedBlockingDeque0.remainingCapacity();\n",
                        "      assertFalse(linkedList0.contains(399));\n",
                        "      assertFalse(linkedHashSet0.contains(399));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(399));\n",
                        "      assertEquals((-2079), int0);\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test13()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "remainingCapacity"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "isEmpty"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "contains"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ]
                    ]
                },
                "1253-1388:test12": {
                    "start": 1253,
                    "end": 1388,
                    "body": [
                        "  public void test12()  throws Throwable  {\n",
                        "      LinkedBlockingDeque linkedBlockingDeque0 = LinkedBlockingDeque.LinkedBlockingDeque0();\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedList0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>((-603), 535, false, linkedList0);\n",
                        "      assertFalse(linkedList0.contains((-603)));\n",
                        "      assertFalse(linkedBlockingDeque1.contains((-603)));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedBlockingDeque1);\n",
                        "      \n",
                        "      Object[] objectArray0 = linkedBlockingDeque1.toArray0();\n",
                        "      assertFalse(linkedList0.contains((-603)));\n",
                        "      assertFalse(linkedBlockingDeque1.contains((-603)));\n",
                        "      assertEquals(0, objectArray0.length);\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(objectArray0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>((-603), 535, false, linkedBlockingDeque1);\n",
                        "      assertFalse(linkedList0.contains((-603)));\n",
                        "      assertFalse(linkedBlockingDeque1.contains((-603)));\n",
                        "      assertFalse(linkedBlockingDeque2.contains((-603)));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedBlockingDeque2);\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque3 = new LinkedBlockingDeque<Integer>((-603), 1119, false, linkedBlockingDeque2);\n",
                        "      assertFalse(linkedList0.contains((-603)));\n",
                        "      assertFalse(linkedBlockingDeque1.contains((-603)));\n",
                        "      assertFalse(linkedBlockingDeque2.contains((-603)));\n",
                        "      assertFalse(linkedBlockingDeque3.contains((-603)));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedBlockingDeque3);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque2));\n",
                        "      \n",
                        "      Duration duration0 = Duration.ZERO;\n",
                        "      assertNotNull(duration0);\n",
                        "      \n",
                        "      LinkedBlockingDeque linkedBlockingDeque4 = LinkedBlockingDeque.LinkedBlockingDeque2(linkedBlockingDeque1);\n",
                        "      assertFalse(linkedList0.contains((-603)));\n",
                        "      assertFalse(linkedBlockingDeque1.contains((-603)));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque3);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque4, linkedBlockingDeque0);\n",
                        "      assertNotNull(linkedBlockingDeque4);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque3));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque4.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Integer integer0 = linkedBlockingDeque3.pollFirst1(duration0);\n",
                        "      assertFalse(linkedList0.contains((-603)));\n",
                        "      assertFalse(linkedBlockingDeque1.contains((-603)));\n",
                        "      assertFalse(linkedBlockingDeque2.contains((-603)));\n",
                        "      assertFalse(linkedBlockingDeque3.contains((-603)));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque3);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque3);\n",
                        "      assertNotSame(linkedBlockingDeque3, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque3, linkedBlockingDeque2);\n",
                        "      assertNull(integer0);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque3));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque3));\n",
                        "      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque2));\n",
                        "      \n",
                        "      int int0 = linkedBlockingDeque2.getTakeQueueLength();\n",
                        "      assertFalse(linkedList0.contains((-603)));\n",
                        "      assertFalse(linkedBlockingDeque1.contains((-603)));\n",
                        "      assertFalse(linkedBlockingDeque2.contains((-603)));\n",
                        "      assertEquals(0, int0);\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque3);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque3);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque3));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque3));\n",
                        "      \n",
                        "      Integer integer1 = linkedBlockingDeque3.pollFirst0();\n",
                        "      assertFalse(linkedList0.contains((-603)));\n",
                        "      assertFalse(linkedBlockingDeque1.contains((-603)));\n",
                        "      assertFalse(linkedBlockingDeque2.contains((-603)));\n",
                        "      assertFalse(linkedBlockingDeque3.contains((-603)));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque3);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque3);\n",
                        "      assertNotSame(linkedBlockingDeque3, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque3, linkedBlockingDeque2);\n",
                        "      assertNull(integer1);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque3));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque3));\n",
                        "      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque2));\n",
                        "      \n",
                        "      int int1 = (-1);\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque5 = new LinkedBlockingDeque<Integer>((-1), (-1), true, linkedBlockingDeque1);\n",
                        "      assertFalse(linkedList0.contains((-603)));\n",
                        "      assertFalse(linkedBlockingDeque1.contains((-603)));\n",
                        "      assertFalse(linkedBlockingDeque5.contains((-603)));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedBlockingDeque5);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque3));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque5.equals((Object)linkedBlockingDeque3));\n",
                        "      assertFalse(linkedBlockingDeque5.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque5.equals((Object)linkedBlockingDeque2));\n",
                        "      \n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque5.element();\n",
                        "        fail(\"Expecting exception: NoSuchElementException\");\n",
                        "      \n",
                        "      } catch(NoSuchElementException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.pool2.impl.LinkedBlockingDeque\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test12()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.impl.LinkedBlockingDeque",
                            "LinkedBlockingDeque",
                            "283-285:LinkedBlockingDeque0"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "toArray0"
                        ],
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.impl.LinkedBlockingDeque",
                            "LinkedBlockingDeque",
                            "306-308:LinkedBlockingDeque2"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "pollFirst1"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "getTakeQueueLength"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "pollFirst0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotSame"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "element"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "1205-1250:test11": {
                    "start": 1205,
                    "end": 1250,
                    "body": [
                        "  public void test11()  throws Throwable  {\n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedHashSet0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(4, 1286, true, linkedHashSet0);\n",
                        "      assertFalse(linkedHashSet0.contains(4));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(4));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(1286, 3, true, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedHashSet0.contains(4));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(4));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(4));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      int int0 = linkedBlockingDeque0.drainTo1(linkedBlockingDeque1, 0);\n",
                        "      assertFalse(linkedHashSet0.contains(3));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(3));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(3));\n",
                        "      assertEquals(0, int0);\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Integer integer0 = linkedBlockingDeque1.peekFirst();\n",
                        "      assertFalse(linkedHashSet0.contains(3));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(3));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(3));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertNull(integer0);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test11()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "drainTo1"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "peekFirst"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "isEmpty"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotSame"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull"
                        ]
                    ]
                },
                "997-1202:test10": {
                    "start": 997,
                    "end": 1202,
                    "body": [
                        "  public void test10()  throws Throwable  {\n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedHashSet0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(0, 290, true, linkedHashSet0);\n",
                        "      assertFalse(linkedHashSet0.contains(290));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(290));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(290, 3, true, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedHashSet0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(0));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Integer integer0 = linkedBlockingDeque1.pollLast0();\n",
                        "      assertFalse(linkedHashSet0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(0));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertNull(integer0);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>(0, 1, true, linkedBlockingDeque1);\n",
                        "      assertFalse(linkedHashSet0.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque2.contains(1));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedBlockingDeque2);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));\n",
                        "      \n",
                        "      Integer integer1 = new Integer(0);\n",
                        "      assertEquals(0, (int)integer1);\n",
                        "      assertNotNull(integer1);\n",
                        "      \n",
                        "      boolean boolean0 = linkedBlockingDeque2.offer(integer1);\n",
                        "      assertFalse(linkedHashSet0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(0));\n",
                        "      assertTrue(linkedBlockingDeque2.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque2.contains(1));\n",
                        "      assertTrue(boolean0);\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque0);\n",
                        "      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));\n",
                        "      \n",
                        "      Object object0 = linkedBlockingDeque2.pollFirst();\n",
                        "      assertFalse(linkedHashSet0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque2.contains(0));\n",
                        "      assertEquals(0, object0);\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque0);\n",
                        "      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque1);\n",
                        "      assertNotNull(object0);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));\n",
                        "      \n",
                        "      boolean boolean1 = linkedHashSet0.remove(object0);\n",
                        "      assertFalse(linkedHashSet0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque2.contains(0));\n",
                        "      assertFalse(boolean1);\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque0);\n",
                        "      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(boolean1 == boolean0);\n",
                        "      \n",
                        "      LinkedBlockingDeque linkedBlockingDeque3 = LinkedBlockingDeque.LinkedBlockingDeque1(true);\n",
                        "      assertNotNull(linkedBlockingDeque3);\n",
                        "      \n",
                        "      int int0 = linkedBlockingDeque1.remainingCapacity();\n",
                        "      assertFalse(linkedHashSet0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(0));\n",
                        "      assertEquals(3, int0);\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Integer integer2 = new Integer(290);\n",
                        "      assertEquals(290, (int)integer2);\n",
                        "      assertNotNull(integer2);\n",
                        "      assertFalse(integer2.equals((Object)object0));\n",
                        "      assertFalse(integer2.equals((Object)int0));\n",
                        "      assertFalse(integer2.equals((Object)integer1));\n",
                        "      \n",
                        "      linkedBlockingDeque0.putLast(integer2);\n",
                        "      assertFalse(linkedHashSet0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(0));\n",
                        "      assertTrue(linkedBlockingDeque0.contains(290));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(integer2.equals((Object)object0));\n",
                        "      assertFalse(integer2.equals((Object)int0));\n",
                        "      assertFalse(integer2.equals((Object)integer1));\n",
                        "      \n",
                        "      Integer integer3 = linkedBlockingDeque0.removeLast();\n",
                        "      assertFalse(linkedHashSet0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(0));\n",
                        "      assertEquals(290, (int)integer3);\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotNull(integer3);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(integer3.equals((Object)integer1));\n",
                        "      assertFalse(integer3.equals((Object)object0));\n",
                        "      assertFalse(integer3.equals((Object)int0));\n",
                        "      \n",
                        "      Integer[] integerArray0 = new Integer[4];\n",
                        "      integerArray0[0] = null;\n",
                        "      Integer integer4 = new Integer(3);\n",
                        "      assertEquals(3, (int)integer4);\n",
                        "      assertNotNull(integer4);\n",
                        "      assertFalse(integer4.equals((Object)object0));\n",
                        "      assertFalse(integer4.equals((Object)integer1));\n",
                        "      assertFalse(integer4.equals((Object)integer2));\n",
                        "      assertFalse(integer4.equals((Object)integer3));\n",
                        "      assertTrue(integer4.equals((Object)int0));\n",
                        "      \n",
                        "      integerArray0[1] = integer4;\n",
                        "      integerArray0[2] = integer3;\n",
                        "      integerArray0[3] = integer1;\n",
                        "      Integer[] integerArray1 = linkedBlockingDeque1.toArray1(integerArray0);\n",
                        "      assertFalse(linkedHashSet0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(0));\n",
                        "      assertEquals(4, integerArray1.length);\n",
                        "      assertEquals(4, integerArray0.length);\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertSame(integerArray1, integerArray0);\n",
                        "      assertSame(integerArray0, integerArray1);\n",
                        "      assertNotNull(integerArray1);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test10()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "pollLast0"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offer"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "pollFirst"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "remove"
                        ],
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.impl.LinkedBlockingDeque",
                            "LinkedBlockingDeque",
                            "294-296:LinkedBlockingDeque1"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "remainingCapacity"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "removeLast"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "toArray1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "isEmpty"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotSame"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "equals"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "putLast"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertSame"
                        ]
                    ]
                },
                "884-994:test09": {
                    "start": 884,
                    "end": 994,
                    "body": [
                        "  public void test09()  throws Throwable  {\n",
                        "      LinkedBlockingDeque linkedBlockingDeque0 = LinkedBlockingDeque.LinkedBlockingDeque0();\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedList0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>((-603), 535, false, linkedList0);\n",
                        "      assertFalse(linkedList0.contains((-603)));\n",
                        "      assertFalse(linkedBlockingDeque1.contains((-603)));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedBlockingDeque1);\n",
                        "      \n",
                        "      Object[] objectArray0 = linkedBlockingDeque1.toArray0();\n",
                        "      assertFalse(linkedList0.contains((-603)));\n",
                        "      assertFalse(linkedBlockingDeque1.contains((-603)));\n",
                        "      assertEquals(0, objectArray0.length);\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(objectArray0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>((-603), 535, false, linkedBlockingDeque1);\n",
                        "      assertFalse(linkedList0.contains(535));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(535));\n",
                        "      assertFalse(linkedBlockingDeque2.contains(535));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedBlockingDeque2);\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque3 = new LinkedBlockingDeque<Integer>((-603), 1119, false, linkedBlockingDeque2);\n",
                        "      assertFalse(linkedList0.contains(535));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(535));\n",
                        "      assertFalse(linkedBlockingDeque2.contains(535));\n",
                        "      assertFalse(linkedBlockingDeque3.contains(535));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedBlockingDeque3);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque1));\n",
                        "      \n",
                        "      Duration duration0 = Duration.ZERO;\n",
                        "      assertNotNull(duration0);\n",
                        "      \n",
                        "      LinkedBlockingDeque linkedBlockingDeque4 = LinkedBlockingDeque.LinkedBlockingDeque2(linkedBlockingDeque1);\n",
                        "      assertFalse(linkedList0.contains(535));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(535));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque3);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque4, linkedBlockingDeque0);\n",
                        "      assertNotNull(linkedBlockingDeque4);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque3));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque4.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Integer integer0 = linkedBlockingDeque3.pollFirst1(duration0);\n",
                        "      assertFalse(linkedList0.contains(535));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(535));\n",
                        "      assertFalse(linkedBlockingDeque2.contains(535));\n",
                        "      assertFalse(linkedBlockingDeque3.contains(535));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque3);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque3);\n",
                        "      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque3, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque3, linkedBlockingDeque1);\n",
                        "      assertNull(integer0);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque3));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque3));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque1));\n",
                        "      \n",
                        "      Integer integer1 = null;\n",
                        "      Integer integer2 = new Integer(0);\n",
                        "      assertEquals(0, (int)integer2);\n",
                        "      assertNotNull(integer2);\n",
                        "      \n",
                        "      boolean boolean0 = linkedList0.add(integer2);\n",
                        "      assertFalse(linkedList0.contains(535));\n",
                        "      assertTrue(linkedList0.contains(integer2));\n",
                        "      assertTrue(boolean0);\n",
                        "      assertEquals(1, linkedList0.size());\n",
                        "      \n",
                        "      Integer integer3 = linkedBlockingDeque1.pollFirst1(duration0);\n",
                        "      assertFalse(linkedList0.contains(535));\n",
                        "      assertTrue(linkedList0.contains(integer2));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(535));\n",
                        "      assertEquals(1, linkedList0.size());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque3);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque2);\n",
                        "      assertNull(integer3);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque3));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque2));\n",
                        "      \n",
                        "      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque1.offerFirst2((Integer) null, (-1L), timeUnit0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // e\n",
                        "         //\n",
                        "         verifyException(\"java.util.Objects\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test09()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.impl.LinkedBlockingDeque",
                            "LinkedBlockingDeque",
                            "283-285:LinkedBlockingDeque0"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "toArray0"
                        ],
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.impl.LinkedBlockingDeque",
                            "LinkedBlockingDeque",
                            "306-308:LinkedBlockingDeque2"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "pollFirst1"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "add"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotSame"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offerFirst2"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "826-881:test08": {
                    "start": 826,
                    "end": 881,
                    "body": [
                        "  public void test08()  throws Throwable  {\n",
                        "      int int0 = (-626);\n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      assertFalse(linkedHashSet0.contains(int0));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedHashSet0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>((-626), 2302, true, linkedHashSet0);\n",
                        "      assertFalse(linkedHashSet0.contains((-626)));\n",
                        "      assertFalse(linkedBlockingDeque0.contains((-626)));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>(linkedBlockingDeque0);\n",
                        "      assertFalse(linkedHashSet0.contains((-626)));\n",
                        "      assertFalse(linkedBlockingDeque0.contains((-626)));\n",
                        "      assertFalse(linkedHashSet1.contains((-626)));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertTrue(linkedHashSet1.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet1.size());\n",
                        "      assertNotNull(linkedHashSet1);\n",
                        "      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));\n",
                        "      \n",
                        "      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedHashSet1);\n",
                        "      assertFalse(linkedHashSet0.contains((-626)));\n",
                        "      assertFalse(linkedBlockingDeque0.contains((-626)));\n",
                        "      assertFalse(linkedHashSet1.contains((-626)));\n",
                        "      assertTrue(boolean0);\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertTrue(linkedHashSet1.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet1.size());\n",
                        "      assertNotSame(linkedHashSet0, linkedHashSet1);\n",
                        "      assertNotSame(linkedHashSet1, linkedHashSet0);\n",
                        "      assertTrue(linkedHashSet0.equals((Object)linkedHashSet1));\n",
                        "      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));\n",
                        "      \n",
                        "      Integer integer0 = null;\n",
                        "      Duration duration0 = Duration.ofHours(2302);\n",
                        "      assertNotNull(duration0);\n",
                        "      \n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque0.offerFirst1((Integer) null, duration0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // e\n",
                        "         //\n",
                        "         verifyException(\"java.util.Objects\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test08()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/util/AbstractCollection",
                            "containsAll"
                        ],
                        [
                            "library",
                            "java.base/java/time/Duration",
                            "ofHours"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "contains"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "isEmpty"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "java.base/java/util/AbstractSet",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotSame"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offerFirst1"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "788-823:test07": {
                    "start": 788,
                    "end": 823,
                    "body": [
                        "  public void test07()  throws Throwable  {\n",
                        "      int int0 = 183;\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(1828, (-948), false, (Collection<? extends Integer>) null);\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1828));\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      Integer integer0 = linkedBlockingDeque0.pollLast0();\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1828));\n",
                        "      assertNull(integer0);\n",
                        "      \n",
                        "      int int1 = 1103;\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(1103, 1, false, (Collection<? extends Integer>) null);\n",
                        "      assertFalse(linkedBlockingDeque1.contains(1));\n",
                        "      assertNotNull(linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      int int2 = 4;\n",
                        "      Integer integer1 = new Integer(4);\n",
                        "      assertEquals(4, (int)integer1);\n",
                        "      assertNotNull(integer1);\n",
                        "      assertFalse(integer1.equals((Object)int0));\n",
                        "      assertFalse(integer1.equals((Object)int1));\n",
                        "      assertTrue(integer1.equals((Object)int2));\n",
                        "      \n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque1.offer((Integer) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // e\n",
                        "         //\n",
                        "         verifyException(\"java.util.Objects\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test07()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "pollLast0"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offer"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "708-785:test06": {
                    "start": 708,
                    "end": 785,
                    "body": [
                        "  public void test06()  throws Throwable  {\n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotNull(linkedHashSet0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>((-166), 2, true, linkedHashSet0);\n",
                        "      assertFalse(linkedHashSet0.contains((-166)));\n",
                        "      assertFalse(linkedBlockingDeque0.contains((-166)));\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      int int0 = Integer.MAX_VALUE;\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(2, Integer.MAX_VALUE, false, linkedHashSet0);\n",
                        "      assertFalse(linkedHashSet0.contains(2));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(2));\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotNull(linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Integer integer0 = new Integer((-1534));\n",
                        "      assertEquals((-1534), (int)integer0);\n",
                        "      assertNotNull(integer0);\n",
                        "      assertFalse(integer0.equals((Object)int0));\n",
                        "      \n",
                        "      boolean boolean0 = linkedBlockingDeque1.add(integer0);\n",
                        "      assertFalse(linkedHashSet0.contains(2));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(2));\n",
                        "      assertTrue(linkedBlockingDeque1.contains(integer0));\n",
                        "      assertTrue(boolean0);\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(integer0.equals((Object)int0));\n",
                        "      \n",
                        "      int int1 = 903;\n",
                        "      Integer integer1 = new Integer(903);\n",
                        "      assertEquals(903, (int)integer1);\n",
                        "      assertNotNull(integer1);\n",
                        "      assertFalse(integer1.equals((Object)int0));\n",
                        "      assertTrue(integer1.equals((Object)int1));\n",
                        "      assertFalse(integer1.equals((Object)integer0));\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>(2, (-13), true, linkedHashSet0);\n",
                        "      assertFalse(linkedHashSet0.contains(int1));\n",
                        "      assertFalse(linkedBlockingDeque2.contains(int1));\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertNotNull(linkedBlockingDeque2);\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));\n",
                        "      \n",
                        "      Integer integer2 = new Integer(1);\n",
                        "      assertEquals(1, (int)integer2);\n",
                        "      assertNotNull(integer2);\n",
                        "      assertFalse(integer2.equals((Object)int0));\n",
                        "      assertFalse(integer2.equals((Object)integer1));\n",
                        "      assertFalse(integer2.equals((Object)integer0));\n",
                        "      assertFalse(integer2.equals((Object)int1));\n",
                        "      \n",
                        "      ChronoUnit chronoUnit0 = ChronoUnit.DECADES;\n",
                        "      assertEquals(ChronoUnit.DECADES, chronoUnit0);\n",
                        "      \n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        Duration.of(Integer.MAX_VALUE, chronoUnit0);\n",
                        "        fail(\"Expecting exception: UnsupportedTemporalTypeException\");\n",
                        "      \n",
                        "      } catch(UnsupportedTemporalTypeException e) {\n",
                        "         //\n",
                        "         // Unit must not have an estimated duration\n",
                        "         //\n",
                        "         verifyException(\"java.time.Duration\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test06()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "add"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "isEmpty"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotSame"
                        ],
                        [
                            "library",
                            "java.base/java/time/Duration",
                            "of"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "614-705:test05": {
                    "start": 614,
                    "end": 705,
                    "body": [
                        "  public void test05()  throws Throwable  {\n",
                        "      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedList0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(917, 917, true, linkedList0);\n",
                        "      assertFalse(linkedList0.contains(917));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(917));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;\n",
                        "      Integer integer0 = new Integer((-1800));\n",
                        "      assertEquals((-1800), (int)integer0);\n",
                        "      assertNotNull(integer0);\n",
                        "      \n",
                        "      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);\n",
                        "      assertFalse(linkedList0.contains((-1800)));\n",
                        "      assertTrue(linkedBlockingDeque0.contains((-1800)));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(917));\n",
                        "      assertTrue(boolean0);\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      \n",
                        "      Integer integer1 = linkedBlockingDeque0.pollLast2(371L, timeUnit0);\n",
                        "      assertFalse(linkedList0.contains((-1800)));\n",
                        "      assertFalse(linkedBlockingDeque0.contains((-1800)));\n",
                        "      assertEquals((-1800), (int)integer1);\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(integer1);\n",
                        "      \n",
                        "      linkedBlockingDeque0.push(integer1);\n",
                        "      assertFalse(linkedList0.contains((-1800)));\n",
                        "      assertTrue(linkedBlockingDeque0.contains((-1800)));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(917));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      \n",
                        "      Object object0 = new Object();\n",
                        "      assertNotNull(object0);\n",
                        "      \n",
                        "      boolean boolean1 = linkedBlockingDeque0.remove1(object0);\n",
                        "      assertFalse(linkedList0.contains((-1800)));\n",
                        "      assertTrue(linkedBlockingDeque0.contains((-1800)));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(917));\n",
                        "      assertFalse(boolean1);\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertFalse(boolean1 == boolean0);\n",
                        "      \n",
                        "      Integer integer2 = linkedBlockingDeque0.removeFirst();\n",
                        "      assertFalse(linkedList0.contains(integer2));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(integer2));\n",
                        "      assertEquals((-1800), (int)integer2);\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(integer2);\n",
                        "      \n",
                        "      Integer integer3 = new Integer(0);\n",
                        "      assertEquals(0, (int)integer3);\n",
                        "      assertNotNull(integer3);\n",
                        "      assertFalse(integer3.equals((Object)integer0));\n",
                        "      assertFalse(integer3.equals((Object)integer1));\n",
                        "      assertFalse(integer3.equals((Object)integer2));\n",
                        "      \n",
                        "      Object[] objectArray0 = linkedBlockingDeque0.toArray();\n",
                        "      assertFalse(linkedList0.contains(integer2));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(integer2));\n",
                        "      assertEquals(0, objectArray0.length);\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(objectArray0);\n",
                        "      \n",
                        "      boolean boolean2 = linkedBlockingDeque0.offerLast0(integer3);\n",
                        "      assertFalse(linkedList0.contains(integer2));\n",
                        "      assertTrue(linkedBlockingDeque0.contains(integer3));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(integer2));\n",
                        "      assertTrue(boolean2);\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertFalse(integer3.equals((Object)integer0));\n",
                        "      assertFalse(integer3.equals((Object)integer1));\n",
                        "      assertFalse(integer3.equals((Object)integer2));\n",
                        "      assertTrue(boolean2 == boolean0);\n",
                        "      assertFalse(boolean2 == boolean1);\n",
                        "      \n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        LinkedBlockingDeque.LinkedBlockingDeque3(0);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.pool2.impl.LinkedBlockingDeque\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test05()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offerLast"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "pollLast2"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "Object"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "remove1"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "removeFirst"
                        ],
                        [
                            "library",
                            "java.base/java/util/AbstractCollection",
                            "toArray"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offerLast0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "push"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "equals"
                        ],
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.impl.LinkedBlockingDeque",
                            "LinkedBlockingDeque",
                            "316-318:LinkedBlockingDeque3"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "531-611:test04": {
                    "start": 531,
                    "end": 611,
                    "body": [
                        "  public void test04()  throws Throwable  {\n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedHashSet0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(1, 0, true, linkedHashSet0);\n",
                        "      assertFalse(linkedHashSet0.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      Integer integer0 = new Integer(1);\n",
                        "      assertEquals(1, (int)integer0);\n",
                        "      assertNotNull(integer0);\n",
                        "      \n",
                        "      boolean boolean0 = linkedHashSet0.add(integer0);\n",
                        "      assertFalse(linkedHashSet0.contains(0));\n",
                        "      assertTrue(linkedHashSet0.contains(1));\n",
                        "      assertTrue(boolean0);\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      \n",
                        "      boolean boolean1 = linkedBlockingDeque0.offerFirst0(integer0);\n",
                        "      assertFalse(linkedHashSet0.contains(0));\n",
                        "      assertTrue(linkedHashSet0.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertFalse(boolean1);\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertFalse(boolean1 == boolean0);\n",
                        "      \n",
                        "      boolean boolean2 = linkedBlockingDeque0.contains((Object) null);\n",
                        "      assertFalse(linkedHashSet0.contains(0));\n",
                        "      assertTrue(linkedHashSet0.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertFalse(boolean2);\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertFalse(boolean2 == boolean0);\n",
                        "      assertTrue(boolean2 == boolean1);\n",
                        "      \n",
                        "      boolean boolean3 = linkedBlockingDeque0.hasTakeWaiters();\n",
                        "      assertFalse(linkedHashSet0.contains(0));\n",
                        "      assertTrue(linkedHashSet0.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertFalse(boolean3);\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertTrue(boolean3 == boolean2);\n",
                        "      assertTrue(boolean3 == boolean1);\n",
                        "      assertFalse(boolean3 == boolean0);\n",
                        "      \n",
                        "      Duration duration0 = Duration.ZERO;\n",
                        "      assertNotNull(duration0);\n",
                        "      \n",
                        "      boolean boolean4 = linkedBlockingDeque0.offerLast1(integer0, duration0);\n",
                        "      assertFalse(linkedHashSet0.contains(0));\n",
                        "      assertTrue(linkedHashSet0.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertFalse(boolean4);\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertTrue(boolean4 == boolean1);\n",
                        "      assertFalse(boolean4 == boolean0);\n",
                        "      assertTrue(boolean4 == boolean2);\n",
                        "      assertTrue(boolean4 == boolean3);\n",
                        "      \n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque0.remove0();\n",
                        "        fail(\"Expecting exception: NoSuchElementException\");\n",
                        "      \n",
                        "      } catch(NoSuchElementException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.pool2.impl.LinkedBlockingDeque\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test04()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "add"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offerFirst0"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "hasTakeWaiters"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offerLast1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "isEmpty"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "remove0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "351-528:test03": {
                    "start": 351,
                    "end": 528,
                    "body": [
                        "  public void test03()  throws Throwable  {\n",
                        "      Integer integer0 = new Integer((-118));\n",
                        "      assertEquals((-118), (int)integer0);\n",
                        "      assertNotNull(integer0);\n",
                        "      \n",
                        "      List<Integer> list0 = List.of(integer0);\n",
                        "      assertTrue(list0.contains(integer0));\n",
                        "      assertEquals(1, list0.size());\n",
                        "      assertFalse(list0.isEmpty());\n",
                        "      assertNotNull(list0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>((-118), (-245), true, list0);\n",
                        "      assertTrue(list0.contains((-118)));\n",
                        "      assertFalse(list0.contains((-245)));\n",
                        "      assertFalse(linkedBlockingDeque0.contains((-118)));\n",
                        "      assertEquals(1, list0.size());\n",
                        "      assertFalse(list0.isEmpty());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      Integer integer1 = linkedBlockingDeque0.pollLast0();\n",
                        "      assertTrue(list0.contains((-118)));\n",
                        "      assertFalse(list0.contains((-245)));\n",
                        "      assertFalse(linkedBlockingDeque0.contains((-118)));\n",
                        "      assertEquals(1, list0.size());\n",
                        "      assertFalse(list0.isEmpty());\n",
                        "      assertNull(integer1);\n",
                        "      \n",
                        "      int int0 = (-1);\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>((-1), (-118), true, list0);\n",
                        "      assertTrue(list0.contains((-118)));\n",
                        "      assertFalse(list0.contains(int0));\n",
                        "      assertFalse(linkedBlockingDeque1.contains((-118)));\n",
                        "      assertEquals(1, list0.size());\n",
                        "      assertFalse(list0.isEmpty());\n",
                        "      assertNotNull(linkedBlockingDeque1);\n",
                        "      assertFalse(integer0.equals((Object)int0));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Integer integer2 = new Integer(1);\n",
                        "      assertEquals(1, (int)integer2);\n",
                        "      assertNotNull(integer2);\n",
                        "      assertFalse(integer2.equals((Object)int0));\n",
                        "      assertFalse(integer2.equals((Object)integer0));\n",
                        "      \n",
                        "      boolean boolean0 = linkedBlockingDeque1.offer(integer0);\n",
                        "      assertTrue(list0.contains((-118)));\n",
                        "      assertFalse(list0.contains(int0));\n",
                        "      assertFalse(linkedBlockingDeque1.contains((-118)));\n",
                        "      assertFalse(boolean0);\n",
                        "      assertEquals(1, list0.size());\n",
                        "      assertFalse(list0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertFalse(integer0.equals((Object)int0));\n",
                        "      assertFalse(integer0.equals((Object)integer2));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>(0, Integer.MAX_VALUE, false, linkedBlockingDeque0);\n",
                        "      assertTrue(list0.contains((-118)));\n",
                        "      assertFalse(list0.contains(Integer.MAX_VALUE));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));\n",
                        "      assertFalse(linkedBlockingDeque2.contains(Integer.MAX_VALUE));\n",
                        "      assertEquals(1, list0.size());\n",
                        "      assertFalse(list0.isEmpty());\n",
                        "      assertNotNull(linkedBlockingDeque2);\n",
                        "      assertFalse(integer0.equals((Object)int0));\n",
                        "      assertFalse(integer0.equals((Object)integer2));\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));\n",
                        "      \n",
                        "      Object object0 = linkedBlockingDeque2.pollFirst();\n",
                        "      assertTrue(list0.contains((-118)));\n",
                        "      assertFalse(list0.contains(Integer.MAX_VALUE));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));\n",
                        "      assertFalse(linkedBlockingDeque2.contains(Integer.MAX_VALUE));\n",
                        "      assertEquals(1, list0.size());\n",
                        "      assertFalse(list0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque0);\n",
                        "      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque1);\n",
                        "      assertNull(object0);\n",
                        "      assertFalse(integer0.equals((Object)int0));\n",
                        "      assertFalse(integer0.equals((Object)integer2));\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));\n",
                        "      \n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      assertFalse(linkedHashSet0.contains(Integer.MAX_VALUE));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedHashSet0);\n",
                        "      \n",
                        "      boolean boolean1 = linkedHashSet0.remove(integer2);\n",
                        "      assertFalse(linkedHashSet0.contains(Integer.MAX_VALUE));\n",
                        "      assertFalse(boolean1);\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertFalse(integer2.equals((Object)int0));\n",
                        "      assertFalse(integer2.equals((Object)integer0));\n",
                        "      assertTrue(boolean1 == boolean0);\n",
                        "      \n",
                        "      LinkedBlockingDeque linkedBlockingDeque3 = LinkedBlockingDeque.LinkedBlockingDeque1(false);\n",
                        "      assertNotNull(linkedBlockingDeque3);\n",
                        "      \n",
                        "      int int1 = linkedBlockingDeque1.remainingCapacity();\n",
                        "      assertTrue(list0.contains((-118)));\n",
                        "      assertFalse(list0.contains(Integer.MAX_VALUE));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(Integer.MAX_VALUE));\n",
                        "      assertEquals((-118), int1);\n",
                        "      assertEquals(1, list0.size());\n",
                        "      assertFalse(list0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque2);\n",
                        "      assertFalse(integer0.equals((Object)int0));\n",
                        "      assertFalse(integer0.equals((Object)integer2));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(int1 == int0);\n",
                        "      \n",
                        "      Integer integer3 = new Integer(1);\n",
                        "      assertEquals(1, (int)integer3);\n",
                        "      assertNotNull(integer3);\n",
                        "      assertFalse(integer3.equals((Object)integer0));\n",
                        "      assertFalse(integer3.equals((Object)int1));\n",
                        "      assertTrue(integer3.equals((Object)integer2));\n",
                        "      assertFalse(integer3.equals((Object)int0));\n",
                        "      \n",
                        "      Integer integer4 = new Integer((-245));\n",
                        "      assertEquals((-245), (int)integer4);\n",
                        "      assertNotNull(integer4);\n",
                        "      assertFalse(integer4.equals((Object)integer0));\n",
                        "      assertFalse(integer4.equals((Object)int1));\n",
                        "      assertFalse(integer4.equals((Object)integer2));\n",
                        "      assertFalse(integer4.equals((Object)int0));\n",
                        "      assertFalse(integer4.equals((Object)integer3));\n",
                        "      \n",
                        "      linkedBlockingDeque2.putLast(integer4);\n",
                        "      assertTrue(list0.contains((-118)));\n",
                        "      assertFalse(list0.contains(Integer.MAX_VALUE));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));\n",
                        "      assertTrue(linkedBlockingDeque2.contains(integer4));\n",
                        "      assertFalse(linkedBlockingDeque2.contains(Integer.MAX_VALUE));\n",
                        "      assertEquals(1, list0.size());\n",
                        "      assertFalse(list0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque2);\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque0);\n",
                        "      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque1);\n",
                        "      assertTrue(integer0.equals((Object)int1));\n",
                        "      assertFalse(integer0.equals((Object)integer3));\n",
                        "      assertFalse(integer0.equals((Object)int0));\n",
                        "      assertFalse(integer0.equals((Object)integer4));\n",
                        "      assertFalse(integer0.equals((Object)integer2));\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque2));\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque0));\n",
                        "      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(integer4.equals((Object)integer0));\n",
                        "      assertFalse(integer4.equals((Object)int1));\n",
                        "      assertFalse(integer4.equals((Object)integer2));\n",
                        "      assertFalse(integer4.equals((Object)int0));\n",
                        "      assertFalse(integer4.equals((Object)integer3));\n",
                        "      \n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque1.removeLast();\n",
                        "        fail(\"Expecting exception: NoSuchElementException\");\n",
                        "      \n",
                        "      } catch(NoSuchElementException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.pool2.impl.LinkedBlockingDeque\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test03()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "of"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "pollLast0"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offer"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "pollFirst"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "remove"
                        ],
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.impl.LinkedBlockingDeque",
                            "LinkedBlockingDeque",
                            "294-296:LinkedBlockingDeque1"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "remainingCapacity"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "contains"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "isEmpty"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "equals"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotSame"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "contains"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "size"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "isEmpty"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "putLast"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "removeLast"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "282-348:test02": {
                    "start": 282,
                    "end": 348,
                    "body": [
                        "  public void test02()  throws Throwable  {\n",
                        "      int int0 = 0;\n",
                        "      boolean boolean0 = true;\n",
                        "      int int1 = 2;\n",
                        "      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n",
                        "      assertFalse(linkedList0.contains(int0));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertNotNull(linkedList0);\n",
                        "      \n",
                        "      List<Integer> list0 = List.copyOf((Collection<? extends Integer>) linkedList0);\n",
                        "      assertFalse(linkedList0.contains(int0));\n",
                        "      assertFalse(list0.contains(int0));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertEquals(0, list0.size());\n",
                        "      assertTrue(list0.isEmpty());\n",
                        "      assertNotNull(list0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(1, 2, true, list0);\n",
                        "      assertFalse(linkedList0.contains(1));\n",
                        "      assertFalse(list0.contains(1));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertEquals(0, list0.size());\n",
                        "      assertTrue(list0.isEmpty());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>((-6730), 0, false, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedList0.contains(0));\n",
                        "      assertFalse(list0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(0));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertEquals(0, list0.size());\n",
                        "      assertTrue(list0.isEmpty());\n",
                        "      assertNotNull(linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      TimeUnit timeUnit0 = TimeUnit.HOURS;\n",
                        "      Integer integer0 = linkedBlockingDeque1.pollLast2(0, timeUnit0);\n",
                        "      assertFalse(linkedList0.contains(0));\n",
                        "      assertFalse(list0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(0));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(0));\n",
                        "      assertEquals(0, linkedList0.size());\n",
                        "      assertEquals(0, list0.size());\n",
                        "      assertTrue(list0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertNull(integer0);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Object object0 = new Object();\n",
                        "      assertNotNull(object0);\n",
                        "      \n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        linkedBlockingDeque0.removeFirst();\n",
                        "        fail(\"Expecting exception: NoSuchElementException\");\n",
                        "      \n",
                        "      } catch(NoSuchElementException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.pool2.impl.LinkedBlockingDeque\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test02()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "copyOf"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "pollLast2"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "Object"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "contains"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "contains"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "isEmpty"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotSame"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "removeFirst"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "156-279:test01": {
                    "start": 156,
                    "end": 279,
                    "body": [
                        "  public void test01()  throws Throwable  {\n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(1, 7, false, (Collection<? extends Integer>) null);\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      Integer integer0 = new Integer(2155);\n",
                        "      assertEquals(2155, (int)integer0);\n",
                        "      assertNotNull(integer0);\n",
                        "      \n",
                        "      TimeUnit timeUnit0 = TimeUnit.DAYS;\n",
                        "      boolean boolean0 = linkedBlockingDeque0.offerLast2(integer0, 7, timeUnit0);\n",
                        "      assertFalse(linkedBlockingDeque0.contains(1));\n",
                        "      assertTrue(linkedBlockingDeque0.contains(2155));\n",
                        "      assertTrue(boolean0);\n",
                        "      \n",
                        "      int int0 = linkedBlockingDeque0.size();\n",
                        "      assertFalse(linkedBlockingDeque0.contains(int0));\n",
                        "      assertTrue(linkedBlockingDeque0.contains(2155));\n",
                        "      assertEquals(1, int0);\n",
                        "      \n",
                        "      Spliterator<Integer> spliterator0 = linkedBlockingDeque0.spliterator();\n",
                        "      assertFalse(linkedBlockingDeque0.contains(int0));\n",
                        "      assertTrue(linkedBlockingDeque0.contains(2155));\n",
                        "      assertNotNull(spliterator0);\n",
                        "      \n",
                        "      Duration duration0 = Duration.ofSeconds(1665L, 1885L);\n",
                        "      assertNotNull(duration0);\n",
                        "      \n",
                        "      Duration duration1 = duration0.plusMillis(2288L);\n",
                        "      assertNotSame(duration0, duration1);\n",
                        "      assertNotSame(duration1, duration0);\n",
                        "      assertNotNull(duration1);\n",
                        "      assertFalse(duration1.equals((Object)duration0));\n",
                        "      \n",
                        "      Duration duration2 = duration0.abs();\n",
                        "      assertSame(duration0, duration2);\n",
                        "      assertNotSame(duration0, duration1);\n",
                        "      assertSame(duration2, duration0);\n",
                        "      assertNotSame(duration2, duration1);\n",
                        "      assertNotNull(duration2);\n",
                        "      assertFalse(duration0.equals((Object)duration1));\n",
                        "      assertFalse(duration2.equals((Object)duration1));\n",
                        "      \n",
                        "      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;\n",
                        "      Integer integer1 = new Integer(0);\n",
                        "      assertEquals(0, (int)integer1);\n",
                        "      assertNotNull(integer1);\n",
                        "      assertFalse(integer1.equals((Object)int0));\n",
                        "      assertFalse(integer1.equals((Object)integer0));\n",
                        "      \n",
                        "      boolean boolean1 = linkedBlockingDeque0.offer(integer1);\n",
                        "      assertFalse(linkedBlockingDeque0.contains(int0));\n",
                        "      assertTrue(linkedBlockingDeque0.contains(0));\n",
                        "      assertTrue(boolean1);\n",
                        "      assertFalse(integer1.equals((Object)int0));\n",
                        "      assertFalse(integer1.equals((Object)integer0));\n",
                        "      assertTrue(boolean1 == boolean0);\n",
                        "      \n",
                        "      Integer integer2 = new Integer(0);\n",
                        "      assertEquals(0, (int)integer2);\n",
                        "      assertNotNull(integer2);\n",
                        "      assertFalse(integer2.equals((Object)int0));\n",
                        "      assertFalse(integer2.equals((Object)integer0));\n",
                        "      assertTrue(integer2.equals((Object)integer1));\n",
                        "      \n",
                        "      linkedBlockingDeque0.putFirst(integer2);\n",
                        "      assertFalse(linkedBlockingDeque0.contains(int0));\n",
                        "      assertTrue(linkedBlockingDeque0.contains(integer2));\n",
                        "      assertFalse(integer2.equals((Object)int0));\n",
                        "      assertFalse(integer2.equals((Object)integer0));\n",
                        "      assertTrue(integer2.equals((Object)integer1));\n",
                        "      \n",
                        "      boolean boolean2 = linkedBlockingDeque0.offerFirst2(integer0, 0L, timeUnit1);\n",
                        "      assertFalse(linkedBlockingDeque0.contains(int0));\n",
                        "      assertTrue(linkedBlockingDeque0.contains(integer2));\n",
                        "      assertTrue(boolean2);\n",
                        "      assertNotSame(timeUnit1, timeUnit0);\n",
                        "      assertFalse(integer0.equals((Object)int0));\n",
                        "      assertFalse(integer0.equals((Object)integer2));\n",
                        "      assertFalse(integer0.equals((Object)integer1));\n",
                        "      assertFalse(timeUnit1.equals((Object)timeUnit0));\n",
                        "      assertTrue(boolean2 == boolean0);\n",
                        "      assertTrue(boolean2 == boolean1);\n",
                        "      \n",
                        "      linkedBlockingDeque0.interuptTakeWaiters();\n",
                        "      assertFalse(linkedBlockingDeque0.contains(int0));\n",
                        "      assertTrue(linkedBlockingDeque0.contains(integer2));\n",
                        "      \n",
                        "      linkedBlockingDeque0.putLast(integer1);\n",
                        "      assertFalse(linkedBlockingDeque0.contains(int0));\n",
                        "      assertTrue(linkedBlockingDeque0.contains(integer2));\n",
                        "      assertTrue(integer1.equals((Object)integer2));\n",
                        "      assertFalse(integer1.equals((Object)int0));\n",
                        "      assertFalse(integer1.equals((Object)integer0));\n",
                        "      \n",
                        "      Integer integer3 = linkedBlockingDeque0.removeLast();\n",
                        "      assertFalse(linkedBlockingDeque0.contains(int0));\n",
                        "      assertTrue(linkedBlockingDeque0.contains(integer2));\n",
                        "      assertEquals(0, (int)integer3);\n",
                        "      assertNotNull(integer3);\n",
                        "      assertFalse(integer3.equals((Object)int0));\n",
                        "      assertFalse(integer3.equals((Object)integer0));\n",
                        "      assertTrue(integer3.equals((Object)integer2));\n",
                        "      \n",
                        "      Integer[] integerArray0 = new Integer[4];\n",
                        "      integerArray0[0] = integer0;\n",
                        "      integerArray0[1] = integer0;\n",
                        "      integerArray0[2] = null;\n",
                        "      integerArray0[3] = integer3;\n",
                        "      String string0 = linkedBlockingDeque0.toString();\n",
                        "      assertFalse(linkedBlockingDeque0.contains(int0));\n",
                        "      assertTrue(linkedBlockingDeque0.contains(integer2));\n",
                        "      assertEquals(\"[2155, 0, 2155, 0]\", string0);\n",
                        "      assertNotNull(string0);\n",
                        "      \n",
                        "      Integer integer4 = linkedBlockingDeque0.takeLast();\n",
                        "      assertFalse(linkedBlockingDeque0.contains(7));\n",
                        "      assertTrue(linkedBlockingDeque0.contains(0));\n",
                        "      assertEquals(0, (int)integer4);\n",
                        "      assertNotNull(integer4);\n",
                        "      assertTrue(integer4.equals((Object)integer2));\n",
                        "      assertFalse(integer4.equals((Object)int0));\n",
                        "      assertFalse(integer4.equals((Object)integer0));\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test01()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offerLast2"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "size"
                        ],
                        [
                            "library",
                            "java.base/java/util/Collection",
                            "spliterator"
                        ],
                        [
                            "library",
                            "java.base/java/time/Duration",
                            "ofSeconds"
                        ],
                        [
                            "library",
                            "java.base/java/time/Duration",
                            "plusMillis"
                        ],
                        [
                            "library",
                            "java.base/java/time/Duration",
                            "abs"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offer"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offerFirst2"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "removeLast"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "toString"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "takeLast"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotSame"
                        ],
                        [
                            "library",
                            "java.base/java/time/Duration",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertSame"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "equals"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "putFirst"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Enum",
                            "equals"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "interuptTakeWaiters"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "putLast"
                        ]
                    ]
                },
                "47-153:test00": {
                    "start": 47,
                    "end": 153,
                    "body": [
                        "  public void test00()  throws Throwable  {\n",
                        "      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedHashSet0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(917, 917, false, linkedHashSet0);\n",
                        "      assertFalse(linkedHashSet0.contains(917));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(917));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedBlockingDeque0);\n",
                        "      \n",
                        "      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(917, 917, false, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedHashSet0.contains(917));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(917));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(917));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotNull(linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Integer integer0 = new Integer((-403));\n",
                        "      assertEquals((-403), (int)integer0);\n",
                        "      assertNotNull(integer0);\n",
                        "      \n",
                        "      boolean boolean0 = linkedBlockingDeque1.add(integer0);\n",
                        "      assertFalse(linkedHashSet0.contains(917));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(917));\n",
                        "      assertFalse(linkedBlockingDeque1.contains(917));\n",
                        "      assertTrue(linkedBlockingDeque1.contains(integer0));\n",
                        "      assertTrue(boolean0);\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));\n",
                        "      \n",
                        "      Object[] objectArray0 = linkedBlockingDeque0.toArray0();\n",
                        "      assertFalse(linkedHashSet0.contains(917));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(917));\n",
                        "      assertEquals(0, objectArray0.length);\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotNull(objectArray0);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      \n",
                        "      Integer integer1 = new Integer((-403));\n",
                        "      assertEquals((-403), (int)integer1);\n",
                        "      assertNotNull(integer1);\n",
                        "      assertTrue(integer1.equals((Object)integer0));\n",
                        "      \n",
                        "      LinkedHashSet linkedHashSet1 = (LinkedHashSet)linkedHashSet0.clone();\n",
                        "      assertFalse(linkedHashSet0.contains(integer1));\n",
                        "      assertEquals(0, linkedHashSet0.size());\n",
                        "      assertTrue(linkedHashSet0.isEmpty());\n",
                        "      assertTrue(linkedHashSet1.isEmpty());\n",
                        "      assertEquals(0, linkedHashSet1.size());\n",
                        "      assertNotNull(linkedHashSet1);\n",
                        "      \n",
                        "      Integer integer2 = new Integer((-2083));\n",
                        "      assertEquals((-2083), (int)integer2);\n",
                        "      assertNotNull(integer2);\n",
                        "      assertFalse(integer2.equals((Object)integer1));\n",
                        "      assertFalse(integer2.equals((Object)integer0));\n",
                        "      \n",
                        "      boolean boolean1 = linkedHashSet0.add(integer2);\n",
                        "      assertTrue(linkedHashSet0.contains((-2083)));\n",
                        "      assertFalse(linkedHashSet0.contains(integer1));\n",
                        "      assertTrue(boolean1);\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertFalse(integer2.equals((Object)integer1));\n",
                        "      assertFalse(integer2.equals((Object)integer0));\n",
                        "      assertTrue(boolean1 == boolean0);\n",
                        "      \n",
                        "      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;\n",
                        "      boolean boolean2 = linkedBlockingDeque0.offer2(integer1, (-403), timeUnit0);\n",
                        "      assertTrue(linkedHashSet0.contains((-2083)));\n",
                        "      assertFalse(linkedHashSet0.contains(integer1));\n",
                        "      assertTrue(linkedBlockingDeque0.contains(integer1));\n",
                        "      assertFalse(linkedBlockingDeque0.contains((-2083)));\n",
                        "      assertTrue(boolean2);\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertTrue(integer1.equals((Object)integer0));\n",
                        "      assertFalse(integer1.equals((Object)integer2));\n",
                        "      assertTrue(boolean2 == boolean0);\n",
                        "      assertTrue(boolean2 == boolean1);\n",
                        "      \n",
                        "      Integer integer3 = linkedBlockingDeque0.takeFirst();\n",
                        "      assertTrue(linkedHashSet0.contains((-2083)));\n",
                        "      assertFalse(linkedHashSet0.contains(integer3));\n",
                        "      assertFalse(linkedBlockingDeque0.contains(integer3));\n",
                        "      assertEquals((-403), (int)integer3);\n",
                        "      assertFalse(linkedHashSet0.isEmpty());\n",
                        "      assertEquals(1, linkedHashSet0.size());\n",
                        "      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);\n",
                        "      assertNotNull(integer3);\n",
                        "      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));\n",
                        "      assertTrue(integer3.equals((Object)integer0));\n",
                        "      assertFalse(integer3.equals((Object)integer2));\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test00()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "LinkedBlockingDeque<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "add"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "toArray0"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "clone"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "add"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "offer2"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "takeFirst"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "size"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "isEmpty"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "contains"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/LinkedBlockingDeque",
                            "contains"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotSame"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "equals"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}