{
    "path": "java_projects/cleaned_final_projects_evosuite/commons-pool/src/test/java/org/apache/commons/pool2/impl/DefaultEvictionPolicy_ESTest.java",
    "imports": {
        "28-28:import Duration": {
            "start": 28,
            "end": 28,
            "body": [
                "import java.time.Duration;\n"
            ]
        },
        "29-29:import ChronoLocalDate": {
            "start": 29,
            "end": 29,
            "body": [
                "import java.time.chrono.ChronoLocalDate;\n"
            ]
        },
        "30-30:import ChronoUnit": {
            "start": 30,
            "end": 30,
            "body": [
                "import java.time.temporal.ChronoUnit;\n"
            ]
        },
        "31-31:import PooledObject": {
            "start": 31,
            "end": 31,
            "body": [
                "import org.apache.commons.pool2.PooledObject;\n"
            ]
        },
        "35-35:import EvoRunnerParameters": {
            "start": 35,
            "end": 35,
            "body": [
                "import org.evosuite.runtime.EvoRunnerParameters;\n"
            ]
        },
        "38-38:import RunWith": {
            "start": 38,
            "end": 38,
            "body": [
                "import org.junit.runner.RunWith;\n"
            ]
        },
        "34-34:import EvoRunner": {
            "start": 34,
            "end": 34,
            "body": [
                "import org.evosuite.runtime.EvoRunner;\n"
            ]
        },
        "24-24:import Test": {
            "start": 24,
            "end": 24,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "32-32:import DefaultEvictionPolicy": {
            "start": 32,
            "end": 32,
            "body": [
                "import org.apache.commons.pool2.impl.DefaultEvictionPolicy;\n"
            ]
        },
        "33-33:import EvictionConfig": {
            "start": 33,
            "end": 33,
            "body": [
                "import org.apache.commons.pool2.impl.EvictionConfig;\n"
            ]
        },
        "36-36:import System": {
            "start": 36,
            "end": 36,
            "body": [
                "import org.evosuite.runtime.System;\n"
            ]
        },
        "37-37:import ViolatedAssumptionAnswer": {
            "start": 37,
            "end": 37,
            "body": [
                "import org.evosuite.runtime.ViolatedAssumptionAnswer;\n"
            ]
        },
        "27-27:import static EvoAssertions.*": {
            "start": 27,
            "end": 27,
            "body": [
                "import static org.evosuite.runtime.EvoAssertions.*;\n"
            ]
        },
        "26-26:import static Mockito.*": {
            "start": 26,
            "end": 26,
            "body": [
                "import static org.evosuite.shaded.org.mockito.Mockito.*;\n"
            ]
        },
        "25-25:import static Assert.*": {
            "start": 25,
            "end": 25,
            "body": [
                "import static org.junit.Assert.*;\n"
            ]
        }
    },
    "classes": {
        "DefaultEvictionPolicy_ESTest": {
            "start": 41,
            "end": 41,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "DefaultEvictionPolicy_ESTest_scaffolding"
            ],
            "methods": {
                "81-92:test1": {
                    "start": 81,
                    "end": 92,
                    "body": [
                        "  public void test1()  throws Throwable  {\n",
                        "      DefaultEvictionPolicy<Integer> defaultEvictionPolicy0 = new DefaultEvictionPolicy<Integer>();\n",
                        "      ChronoUnit chronoUnit0 = ChronoUnit.NANOS;\n",
                        "      Duration duration0 = chronoUnit0.getDuration();\n",
                        "      EvictionConfig evictionConfig0 = new EvictionConfig(duration0, duration0, (-19));\n",
                        "      ChronoUnit chronoUnit1 = ChronoUnit.MILLIS;\n",
                        "      Duration duration1 = chronoUnit1.getDuration();\n",
                        "      PooledObject<Integer> pooledObject0 = (PooledObject<Integer>) mock(PooledObject.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn(duration1).when(pooledObject0).getIdleDuration();\n",
                        "      boolean boolean0 = defaultEvictionPolicy0.evict(evictionConfig0, pooledObject0, 1);\n",
                        "      assertTrue(boolean0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test1()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/pool2/impl/DefaultEvictionPolicy",
                            "DefaultEvictionPolicy<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/time/temporal/ChronoUnit",
                            "getDuration"
                        ],
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.impl.EvictionConfig",
                            "EvictionConfig",
                            "48-59:EvictionConfig"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/DefaultEvictionPolicy",
                            "evict"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/PooledObject",
                            "getIdleDuration"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ]
                    ]
                },
                "44-78:test0": {
                    "start": 44,
                    "end": 78,
                    "body": [
                        "  public void test0()  throws Throwable  {\n",
                        "      DefaultEvictionPolicy<Integer> defaultEvictionPolicy0 = new DefaultEvictionPolicy<Integer>();\n",
                        "      ChronoUnit chronoUnit0 = ChronoUnit.NANOS;\n",
                        "      Duration duration0 = chronoUnit0.getDuration();\n",
                        "      EvictionConfig evictionConfig0 = new EvictionConfig(duration0, duration0, 7);\n",
                        "      PooledObject<Integer> pooledObject0 = (PooledObject<Integer>) mock(PooledObject.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn(duration0, duration0).when(pooledObject0).getIdleDuration();\n",
                        "      defaultEvictionPolicy0.evict(evictionConfig0, pooledObject0, 1);\n",
                        "      DefaultEvictionPolicy<Object> defaultEvictionPolicy1 = new DefaultEvictionPolicy<Object>();\n",
                        "      DefaultEvictionPolicy<Integer> defaultEvictionPolicy2 = new DefaultEvictionPolicy<Integer>();\n",
                        "      ChronoUnit chronoUnit1 = ChronoUnit.MILLIS;\n",
                        "      Duration duration1 = chronoUnit1.getDuration();\n",
                        "      PooledObject<Integer> pooledObject1 = (PooledObject<Integer>) mock(PooledObject.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn(duration1, duration0).when(pooledObject1).getIdleDuration();\n",
                        "      DefaultEvictionPolicy<ChronoLocalDate> defaultEvictionPolicy3 = new DefaultEvictionPolicy<ChronoLocalDate>();\n",
                        "      PooledObject<ChronoLocalDate> pooledObject2 = (PooledObject<ChronoLocalDate>) mock(PooledObject.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn(duration1, duration1).when(pooledObject2).getIdleDuration();\n",
                        "      defaultEvictionPolicy3.evict(evictionConfig0, pooledObject2, 7);\n",
                        "      DefaultEvictionPolicy<Integer> defaultEvictionPolicy4 = new DefaultEvictionPolicy<Integer>();\n",
                        "      defaultEvictionPolicy2.evict(evictionConfig0, pooledObject1, 1);\n",
                        "      System.setCurrentTimeMillis(7);\n",
                        "      PooledObject<Integer> pooledObject3 = (PooledObject<Integer>) mock(PooledObject.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Duration) null).when(pooledObject3).getIdleDuration();\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultEvictionPolicy0.evict(evictionConfig0, pooledObject3, 7);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"java.time.Duration\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/pool2/impl/DefaultEvictionPolicy",
                            "DefaultEvictionPolicy<Integer>"
                        ],
                        [
                            "library",
                            "java.base/java/time/temporal/ChronoUnit",
                            "getDuration"
                        ],
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.impl.EvictionConfig",
                            "EvictionConfig",
                            "48-59:EvictionConfig"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/DefaultEvictionPolicy",
                            "DefaultEvictionPolicy<Object>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/DefaultEvictionPolicy",
                            "DefaultEvictionPolicy<ChronoLocalDate>"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/PooledObject",
                            "getIdleDuration"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "org/apache/commons/pool2/impl/DefaultEvictionPolicy",
                            "evict"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/System",
                            "setCurrentTimeMillis"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}