{
    "path": "java_projects/cleaned_final_projects_evosuite/commons-pool/src/test/java/org/apache/commons/pool2/impl/InterruptibleReentrantLock_ESTest.java",
    "imports": {
        "29-29:import Condition": {
            "start": 29,
            "end": 29,
            "body": [
                "import java.util.concurrent.locks.Condition;\n"
            ]
        },
        "28-28:import AbstractQueuedLongSynchronizer": {
            "start": 28,
            "end": 28,
            "body": [
                "import java.util.concurrent.locks.AbstractQueuedLongSynchronizer;\n"
            ]
        },
        "32-32:import EvoRunnerParameters": {
            "start": 32,
            "end": 32,
            "body": [
                "import org.evosuite.runtime.EvoRunnerParameters;\n"
            ]
        },
        "34-34:import RunWith": {
            "start": 34,
            "end": 34,
            "body": [
                "import org.junit.runner.RunWith;\n"
            ]
        },
        "31-31:import EvoRunner": {
            "start": 31,
            "end": 31,
            "body": [
                "import org.evosuite.runtime.EvoRunner;\n"
            ]
        },
        "24-24:import Test": {
            "start": 24,
            "end": 24,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "30-30:import InterruptibleReentrantLock": {
            "start": 30,
            "end": 30,
            "body": [
                "import org.apache.commons.pool2.impl.InterruptibleReentrantLock;\n"
            ]
        },
        "33-33:import ViolatedAssumptionAnswer": {
            "start": 33,
            "end": 33,
            "body": [
                "import org.evosuite.runtime.ViolatedAssumptionAnswer;\n"
            ]
        },
        "27-27:import static EvoAssertions.*": {
            "start": 27,
            "end": 27,
            "body": [
                "import static org.evosuite.runtime.EvoAssertions.*;\n"
            ]
        },
        "26-26:import static Mockito.*": {
            "start": 26,
            "end": 26,
            "body": [
                "import static org.evosuite.shaded.org.mockito.Mockito.*;\n"
            ]
        },
        "25-25:import static Assert.*": {
            "start": 25,
            "end": 25,
            "body": [
                "import static org.junit.Assert.*;\n"
            ]
        }
    },
    "classes": {
        "InterruptibleReentrantLock_ESTest": {
            "start": 37,
            "end": 37,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "InterruptibleReentrantLock_ESTest_scaffolding"
            ],
            "methods": {
                "82-96:test3": {
                    "start": 82,
                    "end": 96,
                    "body": [
                        "  public void test3()  throws Throwable  {\n",
                        "      InterruptibleReentrantLock interruptibleReentrantLock0 = new InterruptibleReentrantLock(true);\n",
                        "      Condition condition0 = interruptibleReentrantLock0.newCondition();\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        interruptibleReentrantLock0.interruptWaiters(condition0);\n",
                        "        fail(\"Expecting exception: IllegalMonitorStateException\");\n",
                        "      \n",
                        "      } catch(IllegalMonitorStateException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test3()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.impl.InterruptibleReentrantLock",
                            "InterruptibleReentrantLock",
                            "40-42:InterruptibleReentrantLock"
                        ],
                        [
                            "library",
                            "java.base/java/util/concurrent/locks/ReentrantLock",
                            "newCondition"
                        ],
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.impl.InterruptibleReentrantLock",
                            "InterruptibleReentrantLock",
                            "49-51:interruptWaiters"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "64-79:test2": {
                    "start": 64,
                    "end": 79,
                    "body": [
                        "  public void test2()  throws Throwable  {\n",
                        "      InterruptibleReentrantLock interruptibleReentrantLock0 = new InterruptibleReentrantLock(true);\n",
                        "      AbstractQueuedLongSynchronizer abstractQueuedLongSynchronizer0 = mock(AbstractQueuedLongSynchronizer.class, new ViolatedAssumptionAnswer());\n",
                        "      AbstractQueuedLongSynchronizer.ConditionObject abstractQueuedLongSynchronizer_ConditionObject0 = abstractQueuedLongSynchronizer0.new ConditionObject();\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        interruptibleReentrantLock0.interruptWaiters(abstractQueuedLongSynchronizer_ConditionObject0);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // not owner\n",
                        "         //\n",
                        "         verifyException(\"java.util.concurrent.locks.ReentrantLock\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test2()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.impl.InterruptibleReentrantLock",
                            "InterruptibleReentrantLock",
                            "40-42:InterruptibleReentrantLock"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "java.base/java/util/concurrent/locks/AbstractQueuedLongSynchronizer$ConditionObject",
                            "ConditionObject"
                        ],
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.impl.InterruptibleReentrantLock",
                            "InterruptibleReentrantLock",
                            "49-51:interruptWaiters"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "48-61:test1": {
                    "start": 48,
                    "end": 61,
                    "body": [
                        "  public void test1()  throws Throwable  {\n",
                        "      InterruptibleReentrantLock interruptibleReentrantLock0 = new InterruptibleReentrantLock(true);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        interruptibleReentrantLock0.interruptWaiters((Condition) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"java.util.concurrent.locks.ReentrantLock\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test1()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.impl.InterruptibleReentrantLock",
                            "InterruptibleReentrantLock",
                            "40-42:InterruptibleReentrantLock"
                        ],
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.impl.InterruptibleReentrantLock",
                            "InterruptibleReentrantLock",
                            "49-51:interruptWaiters"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "40-45:test0": {
                    "start": 40,
                    "end": 45,
                    "body": [
                        "  public void test0()  throws Throwable  {\n",
                        "      InterruptibleReentrantLock interruptibleReentrantLock0 = new InterruptibleReentrantLock(true);\n",
                        "      interruptibleReentrantLock0.tryLock();\n",
                        "      Condition condition0 = interruptibleReentrantLock0.newCondition();\n",
                        "      interruptibleReentrantLock0.interruptWaiters(condition0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test0()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.impl.InterruptibleReentrantLock",
                            "InterruptibleReentrantLock",
                            "40-42:InterruptibleReentrantLock"
                        ],
                        [
                            "library",
                            "java.base/java/util/concurrent/locks/ReentrantLock",
                            "newCondition"
                        ],
                        [
                            "library",
                            "java.base/java/util/concurrent/locks/ReentrantLock",
                            "tryLock"
                        ],
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.impl.InterruptibleReentrantLock",
                            "InterruptibleReentrantLock",
                            "49-51:interruptWaiters"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}