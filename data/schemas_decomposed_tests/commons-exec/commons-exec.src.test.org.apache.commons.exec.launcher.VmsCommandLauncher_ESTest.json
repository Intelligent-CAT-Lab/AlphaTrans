{
    "path": "java_projects/cleaned_final_projects_evosuite/commons-exec/src/test/java/org/apache/commons/exec/launcher/VmsCommandLauncher_ESTest.java",
    "imports": {
        "11-11:import File": {
            "start": 11,
            "end": 11,
            "body": [
                "import java.io.File;\n"
            ]
        },
        "15-15:import Future": {
            "start": 15,
            "end": 15,
            "body": [
                "import java.util.concurrent.Future;\n"
            ]
        },
        "16-16:import TimeUnit": {
            "start": 16,
            "end": 16,
            "body": [
                "import java.util.concurrent.TimeUnit;\n"
            ]
        },
        "13-13:import ExecutorService": {
            "start": 13,
            "end": 13,
            "body": [
                "import java.util.concurrent.ExecutorService;\n"
            ]
        },
        "12-12:import HashMap": {
            "start": 12,
            "end": 12,
            "body": [
                "import java.util.HashMap;\n"
            ]
        },
        "14-14:import Executors": {
            "start": 14,
            "end": 14,
            "body": [
                "import java.util.concurrent.Executors;\n"
            ]
        },
        "17-17:import CommandLine": {
            "start": 17,
            "end": 17,
            "body": [
                "import org.apache.commons.exec.CommandLine;\n"
            ]
        },
        "8-8:import Test": {
            "start": 8,
            "end": 8,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "20-20:import EvoRunnerParameters": {
            "start": 20,
            "end": 20,
            "body": [
                "import org.evosuite.runtime.EvoRunnerParameters;\n"
            ]
        },
        "21-21:import RunWith": {
            "start": 21,
            "end": 21,
            "body": [
                "import org.junit.runner.RunWith;\n"
            ]
        },
        "19-19:import EvoRunner": {
            "start": 19,
            "end": 19,
            "body": [
                "import org.evosuite.runtime.EvoRunner;\n"
            ]
        },
        "18-18:import VmsCommandLauncher": {
            "start": 18,
            "end": 18,
            "body": [
                "import org.apache.commons.exec.launcher.VmsCommandLauncher;\n"
            ]
        },
        "10-10:import static EvoAssertions.*": {
            "start": 10,
            "end": 10,
            "body": [
                "import static org.evosuite.runtime.EvoAssertions.*;\n"
            ]
        },
        "9-9:import static Assert.*": {
            "start": 9,
            "end": 9,
            "body": [
                "import static org.junit.Assert.*;\n"
            ]
        }
    },
    "classes": {
        "VmsCommandLauncher_ESTest": {
            "start": 24,
            "end": 24,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [
                "new Runnable(...) { ... }",
                "new Runnable(...) { ... }"
            ],
            "implements": [],
            "extends": [
                "VmsCommandLauncher_ESTest_scaffolding"
            ],
            "methods": {
                "74-97:test4": {
                    "start": 74,
                    "end": 97,
                    "body": [
                        "  public void test4()  throws Throwable  {\n",
                        "    Future<?> future = executor.submit(new Runnable(){ \n",
                        "            @Override public void run() { \n",
                        "        try {\n",
                        "          VmsCommandLauncher vmsCommandLauncher0 = new VmsCommandLauncher();\n",
                        "          HashMap<String, String> hashMap0 = new HashMap<String, String>();\n",
                        "          // Undeclared exception!\n",
                        "          try { \n",
                        "            vmsCommandLauncher0.exec0((CommandLine) null, hashMap0);\n",
                        "            fail(\"Expecting exception: SecurityException\");\n",
                        "          \n",
                        "          } catch(SecurityException e) {\n",
                        "             //\n",
                        "             // Unable to create temporary file or directory\n",
                        "             //\n",
                        "             verifyException(\"java.nio.file.TempFileHelper\", e);\n",
                        "          }\n",
                        "        } catch(Throwable t) {\n",
                        "            // Need to catch declared exceptions\n",
                        "        }\n",
                        "      } \n",
                        "    });\n",
                        "    future.get(4000, TimeUnit.MILLISECONDS);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test4()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/concurrent/ExecutorService",
                            "submit"
                        ],
                        [
                            "library",
                            "java.base/java/util/concurrent/Future",
                            "get"
                        ]
                    ]
                },
                "48-71:test3": {
                    "start": 48,
                    "end": 71,
                    "body": [
                        "  public void test3()  throws Throwable  {\n",
                        "    Future<?> future = executor.submit(new Runnable(){ \n",
                        "            @Override public void run() { \n",
                        "        try {\n",
                        "          VmsCommandLauncher vmsCommandLauncher0 = new VmsCommandLauncher();\n",
                        "          HashMap<String, String> hashMap0 = new HashMap<String, String>();\n",
                        "          // Undeclared exception!\n",
                        "          try { \n",
                        "            vmsCommandLauncher0.exec1((CommandLine) null, hashMap0, (File) null);\n",
                        "            fail(\"Expecting exception: SecurityException\");\n",
                        "          \n",
                        "          } catch(SecurityException e) {\n",
                        "             //\n",
                        "             // Unable to create temporary file or directory\n",
                        "             //\n",
                        "             verifyException(\"java.nio.file.TempFileHelper\", e);\n",
                        "          }\n",
                        "        } catch(Throwable t) {\n",
                        "            // Need to catch declared exceptions\n",
                        "        }\n",
                        "      } \n",
                        "    });\n",
                        "    future.get(4000, TimeUnit.MILLISECONDS);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test3()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/concurrent/ExecutorService",
                            "submit"
                        ],
                        [
                            "library",
                            "java.base/java/util/concurrent/Future",
                            "get"
                        ]
                    ]
                },
                "41-45:test2": {
                    "start": 41,
                    "end": 45,
                    "body": [
                        "  public void test2()  throws Throwable  {\n",
                        "      VmsCommandLauncher vmsCommandLauncher0 = new VmsCommandLauncher();\n",
                        "      boolean boolean0 = vmsCommandLauncher0.isFailure(45);\n",
                        "      assertFalse(boolean0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test2()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-exec.src.main.org.apache.commons.exec.launcher.VmsCommandLauncher",
                            "VmsCommandLauncher",
                            "VmsCommandLauncher"
                        ],
                        [
                            "commons-exec.src.main.org.apache.commons.exec.launcher.VmsCommandLauncher",
                            "VmsCommandLauncher",
                            "121-124:isFailure"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ]
                    ]
                },
                "34-38:test1": {
                    "start": 34,
                    "end": 38,
                    "body": [
                        "  public void test1()  throws Throwable  {\n",
                        "      VmsCommandLauncher vmsCommandLauncher0 = new VmsCommandLauncher();\n",
                        "      boolean boolean0 = vmsCommandLauncher0.isFailure(34);\n",
                        "      assertTrue(boolean0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test1()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-exec.src.main.org.apache.commons.exec.launcher.VmsCommandLauncher",
                            "VmsCommandLauncher",
                            "VmsCommandLauncher"
                        ],
                        [
                            "commons-exec.src.main.org.apache.commons.exec.launcher.VmsCommandLauncher",
                            "VmsCommandLauncher",
                            "121-124:isFailure"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ]
                    ]
                },
                "27-31:test0": {
                    "start": 27,
                    "end": 31,
                    "body": [
                        "  public void test0()  throws Throwable  {\n",
                        "      VmsCommandLauncher vmsCommandLauncher0 = new VmsCommandLauncher();\n",
                        "      boolean boolean0 = vmsCommandLauncher0.isFailure((-1911));\n",
                        "      assertFalse(boolean0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test0()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-exec.src.main.org.apache.commons.exec.launcher.VmsCommandLauncher",
                            "VmsCommandLauncher",
                            "VmsCommandLauncher"
                        ],
                        [
                            "commons-exec.src.main.org.apache.commons.exec.launcher.VmsCommandLauncher",
                            "VmsCommandLauncher",
                            "121-124:isFailure"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ]
                    ]
                }
            },
            "fields": {}
        },
        "new Runnable(...) { ... }": {
            "start": 49,
            "end": 49,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "VmsCommandLauncher_ESTest",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "50-68:run": {
                    "start": 50,
                    "end": 68,
                    "body": [
                        "            @Override public void run() { \n",
                        "        try {\n",
                        "          VmsCommandLauncher vmsCommandLauncher0 = new VmsCommandLauncher();\n",
                        "          HashMap<String, String> hashMap0 = new HashMap<String, String>();\n",
                        "          // Undeclared exception!\n",
                        "          try { \n",
                        "            vmsCommandLauncher0.exec1((CommandLine) null, hashMap0, (File) null);\n",
                        "            fail(\"Expecting exception: SecurityException\");\n",
                        "          \n",
                        "          } catch(SecurityException e) {\n",
                        "             //\n",
                        "             // Unable to create temporary file or directory\n",
                        "             //\n",
                        "             verifyException(\"java.nio.file.TempFileHelper\", e);\n",
                        "          }\n",
                        "        } catch(Throwable t) {\n",
                        "            // Need to catch declared exceptions\n",
                        "        }\n",
                        "      } \n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "run()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-exec.src.main.org.apache.commons.exec.launcher.VmsCommandLauncher",
                            "VmsCommandLauncher",
                            "VmsCommandLauncher"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<String,String>"
                        ],
                        [
                            "commons-exec.src.main.org.apache.commons.exec.launcher.VmsCommandLauncher",
                            "VmsCommandLauncher",
                            "114-117:exec1"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "76-94:run": {
                    "start": 76,
                    "end": 94,
                    "body": [
                        "            @Override public void run() { \n",
                        "        try {\n",
                        "          VmsCommandLauncher vmsCommandLauncher0 = new VmsCommandLauncher();\n",
                        "          HashMap<String, String> hashMap0 = new HashMap<String, String>();\n",
                        "          // Undeclared exception!\n",
                        "          try { \n",
                        "            vmsCommandLauncher0.exec0((CommandLine) null, hashMap0);\n",
                        "            fail(\"Expecting exception: SecurityException\");\n",
                        "          \n",
                        "          } catch(SecurityException e) {\n",
                        "             //\n",
                        "             // Unable to create temporary file or directory\n",
                        "             //\n",
                        "             verifyException(\"java.nio.file.TempFileHelper\", e);\n",
                        "          }\n",
                        "        } catch(Throwable t) {\n",
                        "            // Need to catch declared exceptions\n",
                        "        }\n",
                        "      } \n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "run()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-exec.src.main.org.apache.commons.exec.launcher.VmsCommandLauncher",
                            "VmsCommandLauncher",
                            "VmsCommandLauncher"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<String,String>"
                        ],
                        [
                            "commons-exec.src.main.org.apache.commons.exec.launcher.VmsCommandLauncher",
                            "VmsCommandLauncher",
                            "105-108:exec0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "49-49:": {
                    "start": 49,
                    "end": 49,
                    "body": [
                        "    Future<?> future = executor.submit(new Runnable(){ \n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": []
                },
                "75-75:": {
                    "start": 75,
                    "end": 75,
                    "body": [
                        "    Future<?> future = executor.submit(new Runnable(){ \n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": []
                }
            },
            "fields": {}
        }
    }
}