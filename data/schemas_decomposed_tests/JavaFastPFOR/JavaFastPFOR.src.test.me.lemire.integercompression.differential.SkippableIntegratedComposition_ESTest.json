{
    "path": "java_projects/cleaned_final_projects_evosuite/JavaFastPFOR/src/test/java/me/lemire/integercompression/differential/SkippableIntegratedComposition_ESTest.java",
    "imports": {
        "17-17:import EvoRunnerParameters": {
            "start": 17,
            "end": 17,
            "body": [
                "import org.evosuite.runtime.EvoRunnerParameters;\n"
            ]
        },
        "18-18:import RunWith": {
            "start": 18,
            "end": 18,
            "body": [
                "import org.junit.runner.RunWith;\n"
            ]
        },
        "16-16:import EvoRunner": {
            "start": 16,
            "end": 16,
            "body": [
                "import org.evosuite.runtime.EvoRunner;\n"
            ]
        },
        "8-8:import Test": {
            "start": 8,
            "end": 8,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "11-11:import IntWrapper": {
            "start": 11,
            "end": 11,
            "body": [
                "import me.lemire.integercompression.IntWrapper;\n"
            ]
        },
        "12-12:import IntegratedBinaryPacking": {
            "start": 12,
            "end": 12,
            "body": [
                "import me.lemire.integercompression.differential.IntegratedBinaryPacking;\n"
            ]
        },
        "15-15:import SkippableIntegratedIntegerCODEC": {
            "start": 15,
            "end": 15,
            "body": [
                "import me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC;\n"
            ]
        },
        "13-13:import IntegratedVariableByte": {
            "start": 13,
            "end": 13,
            "body": [
                "import me.lemire.integercompression.differential.IntegratedVariableByte;\n"
            ]
        },
        "14-14:import SkippableIntegratedComposition": {
            "start": 14,
            "end": 14,
            "body": [
                "import me.lemire.integercompression.differential.SkippableIntegratedComposition;\n"
            ]
        },
        "10-10:import static EvoAssertions.*": {
            "start": 10,
            "end": 10,
            "body": [
                "import static org.evosuite.runtime.EvoAssertions.*;\n"
            ]
        },
        "9-9:import static Assert.*": {
            "start": 9,
            "end": 9,
            "body": [
                "import static org.junit.Assert.*;\n"
            ]
        }
    },
    "classes": {
        "SkippableIntegratedComposition_ESTest": {
            "start": 21,
            "end": 21,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "SkippableIntegratedComposition_ESTest_scaffolding"
            ],
            "methods": {
                "248-256:test15": {
                    "start": 248,
                    "end": 256,
                    "body": [
                        "  public void test15()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(1);\n",
                        "      int[] intArray0 = new int[6];\n",
                        "      SkippableIntegratedComposition skippableIntegratedComposition0 = new SkippableIntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      skippableIntegratedComposition0.headlessCompress((int[]) null, intWrapper0, 0, intArray0, intWrapper0, intWrapper0);\n",
                        "      assertEquals(1L, intWrapper0.longValue());\n",
                        "      assertEquals(1.0, intWrapper0.doubleValue(), 0.01);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test15()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "47-61:headlessCompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "79-81:longValue"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "50-52:doubleValue"
                        ]
                    ]
                },
                "238-245:test14": {
                    "start": 238,
                    "end": 245,
                    "body": [
                        "  public void test14()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(1);\n",
                        "      SkippableIntegratedComposition skippableIntegratedComposition0 = new SkippableIntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      skippableIntegratedComposition0.headlessUncompress((int[]) null, intWrapper0, 0, (int[]) null, intWrapper0, 0, intWrapper0);\n",
                        "      assertEquals((short)1, intWrapper0.shortValue());\n",
                        "      assertEquals(1.0, intWrapper0.doubleValue(), 0.01);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test14()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "64-77:headlessUncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Number",
                            "shortValue"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "50-52:doubleValue"
                        ]
                    ]
                },
                "219-235:test13": {
                    "start": 219,
                    "end": 235,
                    "body": [
                        "  public void test13()  throws Throwable  {\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(1);\n",
                        "      IntegratedVariableByte integratedVariableByte0 = new IntegratedVariableByte();\n",
                        "      SkippableIntegratedComposition skippableIntegratedComposition0 = new SkippableIntegratedComposition(integratedVariableByte0, integratedVariableByte0);\n",
                        "      int[] intArray0 = new int[5];\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        skippableIntegratedComposition0.headlessCompress(intArray0, intWrapper0, 1, intArray0, intWrapper0, intWrapper0);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // capacity < 0: (-8 < 0)\n",
                        "         //\n",
                        "         verifyException(\"java.nio.Buffer\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test13()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "47-61:headlessCompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "201-216:test12": {
                    "start": 201,
                    "end": 216,
                    "body": [
                        "  public void test12()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      SkippableIntegratedComposition skippableIntegratedComposition0 = new SkippableIntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(9);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        skippableIntegratedComposition0.headlessCompress((int[]) null, intWrapper0, 9, (int[]) null, intWrapper0, intWrapper0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.differential.SkippableIntegratedComposition\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test12()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "47-61:headlessCompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "182-198:test11": {
                    "start": 182,
                    "end": 198,
                    "body": [
                        "  public void test11()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(1930);\n",
                        "      SkippableIntegratedComposition skippableIntegratedComposition0 = new SkippableIntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      int[] intArray0 = new int[0];\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        skippableIntegratedComposition0.headlessUncompress(intArray0, intWrapper0, 1930, intArray0, intWrapper0, 1930, intWrapper0);\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index 1930 out of bounds for length 0\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.differential.IntegratedBinaryPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test11()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "64-77:headlessUncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "161-179:test10": {
                    "start": 161,
                    "end": 179,
                    "body": [
                        "  public void test10()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      SkippableIntegratedComposition skippableIntegratedComposition0 = new SkippableIntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      int[] intArray0 = new int[2];\n",
                        "      intArray0[1] = (-3653);\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(0);\n",
                        "      IntWrapper intWrapper1 = new IntWrapper((-434));\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        skippableIntegratedComposition0.headlessUncompress(intArray0, intWrapper0, (-3653), intArray0, intWrapper1, 0, intWrapper0);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // Unsupported bit width.\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.differential.IntegratedBitPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test10()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "64-77:headlessUncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "143-158:test09": {
                    "start": 143,
                    "end": 158,
                    "body": [
                        "  public void test09()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      SkippableIntegratedComposition skippableIntegratedComposition0 = new SkippableIntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(1118);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        skippableIntegratedComposition0.headlessUncompress((int[]) null, intWrapper0, 1118, (int[]) null, intWrapper0, 1118, intWrapper0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.differential.IntegratedBinaryPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test09()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "64-77:headlessUncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "127-140:test08": {
                    "start": 127,
                    "end": 140,
                    "body": [
                        "  public void test08()  throws Throwable  {\n",
                        "      SkippableIntegratedComposition skippableIntegratedComposition0 = new SkippableIntegratedComposition((SkippableIntegratedIntegerCODEC) null, (SkippableIntegratedIntegerCODEC) null);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        skippableIntegratedComposition0.toString();\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.evosuite.runtime.System\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test08()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "42-44:toString"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "118-124:test07": {
                    "start": 118,
                    "end": 124,
                    "body": [
                        "  public void test07()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      SkippableIntegratedComposition skippableIntegratedComposition0 = new SkippableIntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      SkippableIntegratedComposition skippableIntegratedComposition1 = new SkippableIntegratedComposition(skippableIntegratedComposition0, integratedBinaryPacking0);\n",
                        "      String string0 = skippableIntegratedComposition1.toString();\n",
                        "      assertNotNull(string0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test07()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "42-44:toString"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ]
                    ]
                },
                "98-115:test06": {
                    "start": 98,
                    "end": 115,
                    "body": [
                        "  public void test06()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(1);\n",
                        "      int[] intArray0 = new int[12];\n",
                        "      IntWrapper intWrapper1 = new IntWrapper(1);\n",
                        "      SkippableIntegratedComposition skippableIntegratedComposition0 = new SkippableIntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        skippableIntegratedComposition0.headlessCompress(intArray0, intWrapper0, 790, intArray0, intWrapper1, intWrapper0);\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index 768 out of bounds for length 12\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.differential.IntegratedBinaryPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test06()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "47-61:headlessCompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "86-95:test05": {
                    "start": 86,
                    "end": 95,
                    "body": [
                        "  public void test05()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      int[] intArray0 = new int[4];\n",
                        "      SkippableIntegratedComposition skippableIntegratedComposition0 = new SkippableIntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(0);\n",
                        "      SkippableIntegratedComposition skippableIntegratedComposition1 = new SkippableIntegratedComposition(skippableIntegratedComposition0, integratedBinaryPacking0);\n",
                        "      skippableIntegratedComposition1.headlessCompress(intArray0, intWrapper0, (-18), intArray0, intWrapper0, intWrapper0);\n",
                        "      assertEquals((short)1, intWrapper0.shortValue());\n",
                        "      assertEquals(1, intWrapper0.intValue());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test05()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "47-61:headlessCompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Number",
                            "shortValue"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ]
                    ]
                },
                "74-83:test04": {
                    "start": 74,
                    "end": 83,
                    "body": [
                        "  public void test04()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(1);\n",
                        "      int[] intArray0 = new int[12];\n",
                        "      IntWrapper intWrapper1 = new IntWrapper(1);\n",
                        "      SkippableIntegratedComposition skippableIntegratedComposition0 = new SkippableIntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      skippableIntegratedComposition0.headlessCompress(intArray0, intWrapper1, (-1), intArray0, intWrapper1, intWrapper0);\n",
                        "      assertEquals(2L, intWrapper1.longValue());\n",
                        "      assertEquals(2.0F, intWrapper1.floatValue(), 0.01F);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test04()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "47-61:headlessCompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "79-81:longValue"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "55-57:floatValue"
                        ]
                    ]
                },
                "61-71:test03": {
                    "start": 61,
                    "end": 71,
                    "body": [
                        "  public void test03()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(1);\n",
                        "      intWrapper0.increment();\n",
                        "      int[] intArray0 = new int[12];\n",
                        "      IntWrapper intWrapper1 = new IntWrapper(1);\n",
                        "      SkippableIntegratedComposition skippableIntegratedComposition0 = new SkippableIntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      skippableIntegratedComposition0.headlessCompress((int[]) null, intWrapper1, 1, intArray0, intWrapper0, intWrapper0);\n",
                        "      assertEquals((byte)3, intWrapper0.byteValue());\n",
                        "      assertEquals(3L, intWrapper0.longValue());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test03()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "69-71:increment"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "47-61:headlessCompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Number",
                            "byteValue"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "79-81:longValue"
                        ]
                    ]
                },
                "49-58:test02": {
                    "start": 49,
                    "end": 58,
                    "body": [
                        "  public void test02()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      SkippableIntegratedComposition skippableIntegratedComposition0 = new SkippableIntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      int[] intArray0 = new int[5];\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(5);\n",
                        "      IntWrapper intWrapper1 = new IntWrapper((-1069));\n",
                        "      skippableIntegratedComposition0.headlessUncompress(intArray0, intWrapper0, 96, intArray0, intWrapper0, 0, intWrapper1);\n",
                        "      assertEquals((byte)6, intWrapper0.byteValue());\n",
                        "      assertEquals(6.0, intWrapper0.doubleValue(), 0.01);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test02()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "64-77:headlessUncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Number",
                            "byteValue"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "50-52:doubleValue"
                        ]
                    ]
                },
                "36-46:test01": {
                    "start": 36,
                    "end": 46,
                    "body": [
                        "  public void test01()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(1);\n",
                        "      int[] intArray0 = new int[3];\n",
                        "      SkippableIntegratedComposition skippableIntegratedComposition0 = new SkippableIntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      IntegratedVariableByte integratedVariableByte0 = new IntegratedVariableByte();\n",
                        "      SkippableIntegratedComposition skippableIntegratedComposition1 = new SkippableIntegratedComposition(skippableIntegratedComposition0, integratedVariableByte0);\n",
                        "      skippableIntegratedComposition1.headlessUncompress(intArray0, intWrapper0, 1, intArray0, intWrapper0, (-944), intWrapper0);\n",
                        "      assertEquals(\"2\", intWrapper0.toString());\n",
                        "      assertEquals(2L, intWrapper0.longValue());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test01()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "64-77:headlessUncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "94-96:toString"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "79-81:longValue"
                        ]
                    ]
                },
                "24-33:test00": {
                    "start": 24,
                    "end": 33,
                    "body": [
                        "  public void test00()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(1);\n",
                        "      int[] intArray0 = new int[3];\n",
                        "      SkippableIntegratedComposition skippableIntegratedComposition0 = new SkippableIntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      int[] intArray1 = new int[6];\n",
                        "      skippableIntegratedComposition0.headlessUncompress(intArray1, intWrapper0, 170, intArray0, intWrapper0, 1, intWrapper0);\n",
                        "      assertEquals((short)2, intWrapper0.shortValue());\n",
                        "      assertEquals(2.0, intWrapper0.doubleValue(), 0.01);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test00()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "64-77:headlessUncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Number",
                            "shortValue"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "50-52:doubleValue"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}