{
    "path": "java_projects/cleaned_final_projects_evosuite/JavaFastPFOR/src/test/java/me/lemire/integercompression/IntCompressor_ESTest.java",
    "imports": {
        "19-19:import EvoRunnerParameters": {
            "start": 19,
            "end": 19,
            "body": [
                "import org.evosuite.runtime.EvoRunnerParameters;\n"
            ]
        },
        "20-20:import RunWith": {
            "start": 20,
            "end": 20,
            "body": [
                "import org.junit.runner.RunWith;\n"
            ]
        },
        "18-18:import EvoRunner": {
            "start": 18,
            "end": 18,
            "body": [
                "import org.evosuite.runtime.EvoRunner;\n"
            ]
        },
        "8-8:import Test": {
            "start": 8,
            "end": 8,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "16-16:import Simple16": {
            "start": 16,
            "end": 16,
            "body": [
                "import me.lemire.integercompression.Simple16;\n"
            ]
        },
        "11-11:import BinaryPacking": {
            "start": 11,
            "end": 11,
            "body": [
                "import me.lemire.integercompression.BinaryPacking;\n"
            ]
        },
        "17-17:import SkippableIntegerCODEC": {
            "start": 17,
            "end": 17,
            "body": [
                "import me.lemire.integercompression.SkippableIntegerCODEC;\n"
            ]
        },
        "12-12:import FastPFOR": {
            "start": 12,
            "end": 12,
            "body": [
                "import me.lemire.integercompression.FastPFOR;\n"
            ]
        },
        "13-13:import FastPFOR128": {
            "start": 13,
            "end": 13,
            "body": [
                "import me.lemire.integercompression.FastPFOR128;\n"
            ]
        },
        "14-14:import GroupSimple9": {
            "start": 14,
            "end": 14,
            "body": [
                "import me.lemire.integercompression.GroupSimple9;\n"
            ]
        },
        "15-15:import IntCompressor": {
            "start": 15,
            "end": 15,
            "body": [
                "import me.lemire.integercompression.IntCompressor;\n"
            ]
        },
        "10-10:import static EvoAssertions.*": {
            "start": 10,
            "end": 10,
            "body": [
                "import static org.evosuite.runtime.EvoAssertions.*;\n"
            ]
        },
        "9-9:import static Assert.*": {
            "start": 9,
            "end": 9,
            "body": [
                "import static org.junit.Assert.*;\n"
            ]
        }
    },
    "classes": {
        "IntCompressor_ESTest": {
            "start": 23,
            "end": 23,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "IntCompressor_ESTest_scaffolding"
            ],
            "methods": {
                "191-197:test9": {
                    "start": 191,
                    "end": 197,
                    "body": [
                        "  public void test9()  throws Throwable  {\n",
                        "      FastPFOR128 fastPFOR128_0 = new FastPFOR128(40);\n",
                        "      IntCompressor intCompressor0 = new IntCompressor(40, fastPFOR128_0);\n",
                        "      int[] intArray0 = new int[1];\n",
                        "      int[] intArray1 = intCompressor0.uncompress(intArray0);\n",
                        "      assertEquals(0, intArray1.length);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test9()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                            "FastPFOR128",
                            "62-70:FastPFOR128"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                            "IntCompressor",
                            "26-36:IntCompressor"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                            "IntCompressor",
                            "71-79:uncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ]
                    ]
                },
                "174-188:test8": {
                    "start": 174,
                    "end": 188,
                    "body": [
                        "  public void test8()  throws Throwable  {\n",
                        "      FastPFOR fastPFOR0 = FastPFOR.FastPFOR1();\n",
                        "      IntCompressor intCompressor0 = new IntCompressor(256, fastPFOR0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        intCompressor0.compress((int[]) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.IntCompressor\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test8()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                            "FastPFOR",
                            "90-92:FastPFOR1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                            "IntCompressor",
                            "26-36:IntCompressor"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                            "IntCompressor",
                            "49-63:compress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "154-171:test7": {
                    "start": 154,
                    "end": 171,
                    "body": [
                        "  public void test7()  throws Throwable  {\n",
                        "      Simple16 simple16_0 = new Simple16();\n",
                        "      IntCompressor intCompressor0 = new IntCompressor(Integer.MAX_VALUE, simple16_0);\n",
                        "      int[] intArray0 = new int[6];\n",
                        "      intArray0[0] = Integer.MAX_VALUE;\n",
                        "      intCompressor0.codec = (SkippableIntegerCODEC) simple16_0;\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        intCompressor0.compress(intArray0);\n",
                        "        fail(\"Expecting exception: RuntimeException\");\n",
                        "      \n",
                        "      } catch(RuntimeException e) {\n",
                        "         //\n",
                        "         // Too big a number\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.Simple16\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test7()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Simple16",
                            "Simple16",
                            "Simple16"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                            "IntCompressor",
                            "26-36:IntCompressor"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                            "IntCompressor",
                            "49-63:compress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "142-151:test6": {
                    "start": 142,
                    "end": 151,
                    "body": [
                        "  public void test6()  throws Throwable  {\n",
                        "      FastPFOR128 fastPFOR128_0 = new FastPFOR128(40);\n",
                        "      IntCompressor intCompressor0 = new IntCompressor(40, fastPFOR128_0);\n",
                        "      int[] intArray0 = new int[1];\n",
                        "      intCompressor0.codec = (SkippableIntegerCODEC) fastPFOR128_0;\n",
                        "      intArray0[0] = 65536;\n",
                        "      int[] intArray1 = intCompressor0.uncompress(intArray0);\n",
                        "      // Undeclared exception!\n",
                        "      intCompressor0.compress(intArray1);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test6()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                            "FastPFOR128",
                            "62-70:FastPFOR128"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                            "IntCompressor",
                            "26-36:IntCompressor"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                            "IntCompressor",
                            "71-79:uncompress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                            "IntCompressor",
                            "49-63:compress"
                        ]
                    ]
                },
                "124-139:test5": {
                    "start": 124,
                    "end": 139,
                    "body": [
                        "  public void test5()  throws Throwable  {\n",
                        "      FastPFOR fastPFOR0 = FastPFOR.FastPFOR1();\n",
                        "      IntCompressor intCompressor0 = new IntCompressor(256, fastPFOR0);\n",
                        "      int[] intArray0 = new int[0];\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        intCompressor0.uncompress(intArray0);\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index 0 out of bounds for length 0\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.IntCompressor\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test5()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                            "FastPFOR",
                            "90-92:FastPFOR1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                            "IntCompressor",
                            "26-36:IntCompressor"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                            "IntCompressor",
                            "71-79:uncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "104-121:test4": {
                    "start": 104,
                    "end": 121,
                    "body": [
                        "  public void test4()  throws Throwable  {\n",
                        "      FastPFOR fastPFOR0 = new FastPFOR(80);\n",
                        "      IntCompressor intCompressor0 = new IntCompressor(6, fastPFOR0);\n",
                        "      int[] intArray0 = new int[8];\n",
                        "      intArray0[0] = 256;\n",
                        "      intArray0[1] = 80;\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        intCompressor0.uncompress(intArray0);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // Unsupported bit width.\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.BitPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test4()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                            "FastPFOR",
                            "81-89:FastPFOR"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                            "IntCompressor",
                            "26-36:IntCompressor"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                            "IntCompressor",
                            "71-79:uncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "83-101:test3": {
                    "start": 83,
                    "end": 101,
                    "body": [
                        "  public void test3()  throws Throwable  {\n",
                        "      FastPFOR128 fastPFOR128_0 = FastPFOR128.FastPFOR1281();\n",
                        "      IntCompressor intCompressor0 = new IntCompressor((-1), fastPFOR128_0);\n",
                        "      int[] intArray0 = new int[4];\n",
                        "      intArray0[0] = 65536;\n",
                        "      intArray0[1] = (-1);\n",
                        "      intCompressor0.codec = (SkippableIntegerCODEC) fastPFOR128_0;\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        intCompressor0.uncompress(intArray0);\n",
                        "        fail(\"Expecting exception: IndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(IndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"java.nio.Buffer\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test3()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                            "FastPFOR128",
                            "71-73:FastPFOR1281"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                            "IntCompressor",
                            "26-36:IntCompressor"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                            "IntCompressor",
                            "71-79:uncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "64-80:test2": {
                    "start": 64,
                    "end": 80,
                    "body": [
                        "  public void test2()  throws Throwable  {\n",
                        "      BinaryPacking binaryPacking0 = new BinaryPacking();\n",
                        "      IntCompressor intCompressor0 = new IntCompressor((-3912), binaryPacking0);\n",
                        "      int[] intArray0 = new int[1];\n",
                        "      intArray0[0] = (-3912);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        intCompressor0.uncompress(intArray0);\n",
                        "        fail(\"Expecting exception: NegativeArraySizeException\");\n",
                        "      \n",
                        "      } catch(NegativeArraySizeException e) {\n",
                        "         //\n",
                        "         // -3912\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.IntCompressor\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test2()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.BinaryPacking",
                            "BinaryPacking",
                            "BinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                            "IntCompressor",
                            "26-36:IntCompressor"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                            "IntCompressor",
                            "71-79:uncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "47-61:test1": {
                    "start": 47,
                    "end": 61,
                    "body": [
                        "  public void test1()  throws Throwable  {\n",
                        "      FastPFOR128 fastPFOR128_0 = new FastPFOR128(0);\n",
                        "      IntCompressor intCompressor0 = new IntCompressor(0, fastPFOR128_0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        intCompressor0.uncompress((int[]) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.IntCompressor\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test1()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                            "FastPFOR128",
                            "62-70:FastPFOR128"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                            "IntCompressor",
                            "26-36:IntCompressor"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                            "IntCompressor",
                            "71-79:uncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "26-44:test0": {
                    "start": 26,
                    "end": 44,
                    "body": [
                        "  public void test0()  throws Throwable  {\n",
                        "      GroupSimple9 groupSimple9_0 = new GroupSimple9();\n",
                        "      IntCompressor intCompressor0 = new IntCompressor((-273), groupSimple9_0);\n",
                        "      int[] intArray0 = new int[2];\n",
                        "      intArray0[0] = (-273);\n",
                        "      intCompressor0.codec = (SkippableIntegerCODEC) groupSimple9_0;\n",
                        "      int[] intArray1 = intCompressor0.compress(intArray0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        intCompressor0.uncompress(intArray1);\n",
                        "        fail(\"Expecting exception: RuntimeException\");\n",
                        "      \n",
                        "      } catch(RuntimeException e) {\n",
                        "         //\n",
                        "         // shouldn't happen\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.GroupSimple9\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test0()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                            "GroupSimple9",
                            "GroupSimple9"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                            "IntCompressor",
                            "26-36:IntCompressor"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                            "IntCompressor",
                            "49-63:compress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                            "IntCompressor",
                            "71-79:uncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}