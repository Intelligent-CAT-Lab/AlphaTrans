{
    "path": "java_projects/cleaned_final_projects_evosuite/JavaFastPFOR/src/test/java/me/lemire/integercompression/differential/IntegratedIntCompressor_ESTest.java",
    "imports": {
        "17-17:import EvoRunnerParameters": {
            "start": 17,
            "end": 17,
            "body": [
                "import org.evosuite.runtime.EvoRunnerParameters;\n"
            ]
        },
        "18-18:import RunWith": {
            "start": 18,
            "end": 18,
            "body": [
                "import org.junit.runner.RunWith;\n"
            ]
        },
        "16-16:import EvoRunner": {
            "start": 16,
            "end": 16,
            "body": [
                "import org.evosuite.runtime.EvoRunner;\n"
            ]
        },
        "8-8:import Test": {
            "start": 8,
            "end": 8,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "12-12:import IntegratedIntCompressor": {
            "start": 12,
            "end": 12,
            "body": [
                "import me.lemire.integercompression.differential.IntegratedIntCompressor;\n"
            ]
        },
        "11-11:import IntegratedBinaryPacking": {
            "start": 11,
            "end": 11,
            "body": [
                "import me.lemire.integercompression.differential.IntegratedBinaryPacking;\n"
            ]
        },
        "15-15:import SkippableIntegratedIntegerCODEC": {
            "start": 15,
            "end": 15,
            "body": [
                "import me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC;\n"
            ]
        },
        "13-13:import IntegratedVariableByte": {
            "start": 13,
            "end": 13,
            "body": [
                "import me.lemire.integercompression.differential.IntegratedVariableByte;\n"
            ]
        },
        "14-14:import SkippableIntegratedComposition": {
            "start": 14,
            "end": 14,
            "body": [
                "import me.lemire.integercompression.differential.SkippableIntegratedComposition;\n"
            ]
        },
        "10-10:import static EvoAssertions.*": {
            "start": 10,
            "end": 10,
            "body": [
                "import static org.evosuite.runtime.EvoAssertions.*;\n"
            ]
        },
        "9-9:import static Assert.*": {
            "start": 9,
            "end": 9,
            "body": [
                "import static org.junit.Assert.*;\n"
            ]
        }
    },
    "classes": {
        "IntegratedIntCompressor_ESTest": {
            "start": 21,
            "end": 21,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "IntegratedIntCompressor_ESTest_scaffolding"
            ],
            "methods": {
                "190-196:test10": {
                    "start": 190,
                    "end": 196,
                    "body": [
                        "  public void test10()  throws Throwable  {\n",
                        "      IntegratedVariableByte integratedVariableByte0 = new IntegratedVariableByte();\n",
                        "      IntegratedIntCompressor integratedIntCompressor0 = new IntegratedIntCompressor(400, integratedVariableByte0);\n",
                        "      int[] intArray0 = new int[1];\n",
                        "      int[] intArray1 = integratedIntCompressor0.uncompress(intArray0);\n",
                        "      assertEquals(0, intArray1.length);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test10()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "29-39:IntegratedIntCompressor"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "73-81:uncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ]
                    ]
                },
                "184-187:test09": {
                    "start": 184,
                    "end": 187,
                    "body": [
                        "  public void test09()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      IntegratedIntCompressor integratedIntCompressor0 = new IntegratedIntCompressor(0, integratedBinaryPacking0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test09()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "29-39:IntegratedIntCompressor"
                        ]
                    ]
                },
                "167-181:test08": {
                    "start": 167,
                    "end": 181,
                    "body": [
                        "  public void test08()  throws Throwable  {\n",
                        "      IntegratedVariableByte integratedVariableByte0 = new IntegratedVariableByte();\n",
                        "      IntegratedIntCompressor integratedIntCompressor0 = new IntegratedIntCompressor((-1062), integratedVariableByte0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        integratedIntCompressor0.compress((int[]) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.differential.IntegratedIntCompressor\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test08()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "29-39:IntegratedIntCompressor"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "52-65:compress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "144-164:test07": {
                    "start": 144,
                    "end": 164,
                    "body": [
                        "  public void test07()  throws Throwable  {\n",
                        "      IntegratedVariableByte integratedVariableByte0 = new IntegratedVariableByte();\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      SkippableIntegratedComposition skippableIntegratedComposition0 = new SkippableIntegratedComposition(integratedVariableByte0, integratedBinaryPacking0);\n",
                        "      IntegratedIntCompressor integratedIntCompressor0 = new IntegratedIntCompressor((-1), skippableIntegratedComposition0);\n",
                        "      int[] intArray0 = new int[2];\n",
                        "      integratedIntCompressor0.codec = (SkippableIntegratedIntegerCODEC) integratedBinaryPacking0;\n",
                        "      integratedIntCompressor0.codec = (SkippableIntegratedIntegerCODEC) skippableIntegratedComposition0;\n",
                        "      skippableIntegratedComposition0.F1 = (SkippableIntegratedIntegerCODEC) integratedBinaryPacking0;\n",
                        "      skippableIntegratedComposition0.F1 = integratedIntCompressor0.codec;\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        integratedIntCompressor0.compress(intArray0);\n",
                        "        fail(\"Expecting exception: StackOverflowError\");\n",
                        "      \n",
                        "      } catch(StackOverflowError e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test07()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "29-39:IntegratedIntCompressor"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "52-65:compress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ]
                    ]
                },
                "122-141:test06": {
                    "start": 122,
                    "end": 141,
                    "body": [
                        "  public void test06()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      IntegratedIntCompressor integratedIntCompressor0 = new IntegratedIntCompressor((-1325), integratedBinaryPacking0);\n",
                        "      integratedIntCompressor0.codec = (SkippableIntegratedIntegerCODEC) integratedBinaryPacking0;\n",
                        "      int[] intArray0 = new int[1];\n",
                        "      SkippableIntegratedComposition skippableIntegratedComposition0 = new SkippableIntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      integratedIntCompressor0.codec = (SkippableIntegratedIntegerCODEC) skippableIntegratedComposition0;\n",
                        "      skippableIntegratedComposition0.F2 = integratedIntCompressor0.codec;\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        integratedIntCompressor0.compress(intArray0);\n",
                        "        fail(\"Expecting exception: RuntimeException\");\n",
                        "      \n",
                        "      } catch(RuntimeException e) {\n",
                        "         //\n",
                        "         // Your input is too poorly compressible with the current codec : me.lemire.integercompression.differential.IntegratedBinaryPacking@0000000001 + me.lemire.integercompression.differential.SkippableIntegratedComposition@0000000006\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.differential.IntegratedIntCompressor\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test06()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "29-39:IntegratedIntCompressor"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "52-65:compress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "104-119:test05": {
                    "start": 104,
                    "end": 119,
                    "body": [
                        "  public void test05()  throws Throwable  {\n",
                        "      int[] intArray0 = new int[4];\n",
                        "      IntegratedVariableByte integratedVariableByte0 = new IntegratedVariableByte();\n",
                        "      IntegratedIntCompressor integratedIntCompressor0 = new IntegratedIntCompressor((-2919), integratedVariableByte0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        integratedIntCompressor0.uncompress(intArray0);\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index -1 out of bounds for length 0\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.differential.IntegratedVariableByte\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test05()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "29-39:IntegratedIntCompressor"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "73-81:uncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "84-101:test04": {
                    "start": 84,
                    "end": 101,
                    "body": [
                        "  public void test04()  throws Throwable  {\n",
                        "      IntegratedVariableByte integratedVariableByte0 = new IntegratedVariableByte();\n",
                        "      IntegratedIntCompressor integratedIntCompressor0 = new IntegratedIntCompressor(100, integratedVariableByte0);\n",
                        "      int[] intArray0 = new int[2];\n",
                        "      intArray0[0] = 100;\n",
                        "      intArray0[1] = 100;\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        integratedIntCompressor0.uncompress(intArray0);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // Unsupported bit width.\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.differential.IntegratedBitPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test04()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "29-39:IntegratedIntCompressor"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "73-81:uncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "65-81:test03": {
                    "start": 65,
                    "end": 81,
                    "body": [
                        "  public void test03()  throws Throwable  {\n",
                        "      IntegratedVariableByte integratedVariableByte0 = new IntegratedVariableByte();\n",
                        "      IntegratedIntCompressor integratedIntCompressor0 = new IntegratedIntCompressor((-518), integratedVariableByte0);\n",
                        "      int[] intArray0 = new int[1];\n",
                        "      intArray0[0] = (-518);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        integratedIntCompressor0.uncompress(intArray0);\n",
                        "        fail(\"Expecting exception: NegativeArraySizeException\");\n",
                        "      \n",
                        "      } catch(NegativeArraySizeException e) {\n",
                        "         //\n",
                        "         // -518\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.differential.IntegratedIntCompressor\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test03()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "29-39:IntegratedIntCompressor"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "73-81:uncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "48-62:test02": {
                    "start": 48,
                    "end": 62,
                    "body": [
                        "  public void test02()  throws Throwable  {\n",
                        "      IntegratedVariableByte integratedVariableByte0 = new IntegratedVariableByte();\n",
                        "      IntegratedIntCompressor integratedIntCompressor0 = new IntegratedIntCompressor((-1062), integratedVariableByte0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        integratedIntCompressor0.uncompress((int[]) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.differential.IntegratedIntCompressor\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test02()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "29-39:IntegratedIntCompressor"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "73-81:uncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "35-45:test01": {
                    "start": 35,
                    "end": 45,
                    "body": [
                        "  public void test01()  throws Throwable  {\n",
                        "      IntegratedVariableByte integratedVariableByte0 = new IntegratedVariableByte();\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      SkippableIntegratedComposition skippableIntegratedComposition0 = new SkippableIntegratedComposition(integratedVariableByte0, integratedBinaryPacking0);\n",
                        "      IntegratedIntCompressor integratedIntCompressor0 = new IntegratedIntCompressor((-1), skippableIntegratedComposition0);\n",
                        "      int[] intArray0 = new int[2];\n",
                        "      int[] intArray1 = integratedIntCompressor0.compress(intArray0);\n",
                        "      int[] intArray2 = integratedIntCompressor0.uncompress(intArray1);\n",
                        "      assertArrayEquals(new int[] {0, 0}, intArray2);\n",
                        "      assertArrayEquals(new int[] {2, 0, 32896}, intArray1);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test01()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "29-39:IntegratedIntCompressor"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "52-65:compress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "73-81:uncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals"
                        ]
                    ]
                },
                "24-32:test00": {
                    "start": 24,
                    "end": 32,
                    "body": [
                        "  public void test00()  throws Throwable  {\n",
                        "      IntegratedVariableByte integratedVariableByte0 = new IntegratedVariableByte();\n",
                        "      IntegratedIntCompressor integratedIntCompressor0 = new IntegratedIntCompressor(400, integratedVariableByte0);\n",
                        "      int[] intArray0 = new int[1];\n",
                        "      intArray0[0] = 400;\n",
                        "      int[] intArray1 = integratedIntCompressor0.uncompress(intArray0);\n",
                        "      int[] intArray2 = integratedIntCompressor0.compress(intArray1);\n",
                        "      assertEquals(8, intArray2.length);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test00()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "29-39:IntegratedIntCompressor"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "73-81:uncompress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "52-65:compress"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}