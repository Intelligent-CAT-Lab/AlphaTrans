{
    "path": "java_projects/cleaned_final_projects_evosuite/JavaFastPFOR/src/test/java/me/lemire/longcompression/differential/LongDelta_ESTest.java",
    "imports": {
        "13-13:import EvoRunnerParameters": {
            "start": 13,
            "end": 13,
            "body": [
                "import org.evosuite.runtime.EvoRunnerParameters;\n"
            ]
        },
        "14-14:import RunWith": {
            "start": 14,
            "end": 14,
            "body": [
                "import org.junit.runner.RunWith;\n"
            ]
        },
        "12-12:import EvoRunner": {
            "start": 12,
            "end": 12,
            "body": [
                "import org.evosuite.runtime.EvoRunner;\n"
            ]
        },
        "8-8:import Test": {
            "start": 8,
            "end": 8,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "11-11:import LongDelta": {
            "start": 11,
            "end": 11,
            "body": [
                "import me.lemire.longcompression.differential.LongDelta;\n"
            ]
        },
        "10-10:import static EvoAssertions.*": {
            "start": 10,
            "end": 10,
            "body": [
                "import static org.evosuite.runtime.EvoAssertions.*;\n"
            ]
        },
        "9-9:import static Assert.*": {
            "start": 9,
            "end": 9,
            "body": [
                "import static org.junit.Assert.*;\n"
            ]
        }
    },
    "classes": {
        "LongDelta_ESTest": {
            "start": 17,
            "end": 17,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "LongDelta_ESTest_scaffolding"
            ],
            "methods": {
                "315-317:test27": {
                    "start": 315,
                    "end": 317,
                    "body": [
                        "  public void test27()  throws Throwable  {\n",
                        "      LongDelta longDelta0 = new LongDelta();\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test27()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "LongDelta"
                        ]
                    ]
                },
                "308-312:test26": {
                    "start": 308,
                    "end": 312,
                    "body": [
                        "  public void test26()  throws Throwable  {\n",
                        "      long[] longArray0 = new long[17];\n",
                        "      long long0 = LongDelta.delta1(longArray0, 3, (-1), 1175);\n",
                        "      assertEquals(0L, long0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test26()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "43-50:delta1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ]
                    ]
                },
                "301-305:test25": {
                    "start": 301,
                    "end": 305,
                    "body": [
                        "  public void test25()  throws Throwable  {\n",
                        "      long[] longArray0 = new long[26];\n",
                        "      long long0 = LongDelta.delta1(longArray0, 4, 4, 4);\n",
                        "      assertEquals(0L, long0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test25()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "43-50:delta1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ]
                    ]
                },
                "285-298:test24": {
                    "start": 285,
                    "end": 298,
                    "body": [
                        "  public void test24()  throws Throwable  {\n",
                        "      long[] longArray0 = new long[0];\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        LongDelta.fastinverseDelta0(longArray0);\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index 1 out of bounds for length 0\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.longcompression.differential.LongDelta\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test24()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "97-113:fastinverseDelta0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "278-282:test23": {
                    "start": 278,
                    "end": 282,
                    "body": [
                        "  public void test23()  throws Throwable  {\n",
                        "      long[] longArray0 = new long[17];\n",
                        "      long long0 = LongDelta.fastinverseDelta1(longArray0, 5, 5, 5);\n",
                        "      assertEquals(5L, long0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test23()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "129-148:fastinverseDelta1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ]
                    ]
                },
                "262-275:test22": {
                    "start": 262,
                    "end": 275,
                    "body": [
                        "  public void test22()  throws Throwable  {\n",
                        "      long[] longArray0 = new long[17];\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        LongDelta.delta1(longArray0, (-1), (-1), (-1));\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index -3 out of bounds for length 17\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.longcompression.differential.LongDelta\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test22()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "43-50:delta1"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "247-259:test21": {
                    "start": 247,
                    "end": 259,
                    "body": [
                        "  public void test21()  throws Throwable  {\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        LongDelta.delta1((long[]) null, (-1), (-1), (-1));\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.longcompression.differential.LongDelta\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test21()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "43-50:delta1"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "231-244:test20": {
                    "start": 231,
                    "end": 244,
                    "body": [
                        "  public void test20()  throws Throwable  {\n",
                        "      long[] longArray0 = new long[17];\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        LongDelta.delta2(longArray0, (-984), (-984), (-984), longArray0);\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index -984 out of bounds for length 17\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.longcompression.differential.LongDelta\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test20()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "68-75:delta2"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "216-228:test19": {
                    "start": 216,
                    "end": 228,
                    "body": [
                        "  public void test19()  throws Throwable  {\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        LongDelta.delta2((long[]) null, (-28), (-28), (-28), (long[]) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.longcompression.differential.LongDelta\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test19()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "68-75:delta2"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "201-213:test18": {
                    "start": 201,
                    "end": 213,
                    "body": [
                        "  public void test18()  throws Throwable  {\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        LongDelta.fastinverseDelta0((long[]) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.longcompression.differential.LongDelta\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test18()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "97-113:fastinverseDelta0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "186-198:test17": {
                    "start": 186,
                    "end": 198,
                    "body": [
                        "  public void test17()  throws Throwable  {\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        LongDelta.fastinverseDelta1((long[]) null, (-1), (-1), (-1));\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.longcompression.differential.LongDelta\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test17()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "129-148:fastinverseDelta1"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "177-183:test16": {
                    "start": 177,
                    "end": 183,
                    "body": [
                        "  public void test16()  throws Throwable  {\n",
                        "      long[] longArray0 = new long[4];\n",
                        "      longArray0[3] = (long) 1;\n",
                        "      long long0 = LongDelta.delta1(longArray0, 1, 3, (-2490));\n",
                        "      assertArrayEquals(new long[] {0L, 2490L, 0L, 1L}, longArray0);\n",
                        "      assertEquals(1L, long0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test16()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "43-50:delta1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ]
                    ]
                },
                "168-174:test15": {
                    "start": 168,
                    "end": 174,
                    "body": [
                        "  public void test15()  throws Throwable  {\n",
                        "      long[] longArray0 = new long[4];\n",
                        "      longArray0[3] = (-392L);\n",
                        "      long long0 = LongDelta.delta2(longArray0, 2, 2, 2, longArray0);\n",
                        "      assertEquals((-392L), long0);\n",
                        "      assertArrayEquals(new long[] {(-2L), (-392L), 0L, (-392L)}, longArray0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test15()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "68-75:delta2"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals"
                        ]
                    ]
                },
                "159-165:test14": {
                    "start": 159,
                    "end": 165,
                    "body": [
                        "  public void test14()  throws Throwable  {\n",
                        "      long[] longArray0 = new long[4];\n",
                        "      longArray0[3] = 2635L;\n",
                        "      long long0 = LongDelta.delta2(longArray0, 2, 2, 2, longArray0);\n",
                        "      assertEquals(2635L, long0);\n",
                        "      assertArrayEquals(new long[] {(-2L), 2635L, 0L, 2635L}, longArray0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test14()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "68-75:delta2"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals"
                        ]
                    ]
                },
                "149-156:test13": {
                    "start": 149,
                    "end": 156,
                    "body": [
                        "  public void test13()  throws Throwable  {\n",
                        "      long[] longArray0 = new long[6];\n",
                        "      longArray0[0] = (-8L);\n",
                        "      LongDelta.fastinverseDelta0(longArray0);\n",
                        "      long long0 = LongDelta.fastinverseDelta1(longArray0, 1, 1, 3);\n",
                        "      assertArrayEquals(new long[] {(-8L), (-5L), (-8L), (-8L), (-8L), (-8L)}, longArray0);\n",
                        "      assertEquals((-5L), long0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test13()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "129-148:fastinverseDelta1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "97-113:fastinverseDelta0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ]
                    ]
                },
                "141-146:test12": {
                    "start": 141,
                    "end": 146,
                    "body": [
                        "  public void test12()  throws Throwable  {\n",
                        "      long[] longArray0 = new long[6];\n",
                        "      longArray0[1] = (-1L);\n",
                        "      long long0 = LongDelta.fastinverseDelta1(longArray0, 1, 1, 1);\n",
                        "      assertEquals(0L, long0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test12()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "129-148:fastinverseDelta1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ]
                    ]
                },
                "125-138:test11": {
                    "start": 125,
                    "end": 138,
                    "body": [
                        "  public void test11()  throws Throwable  {\n",
                        "      long[] longArray0 = new long[10];\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        LongDelta.fastinverseDelta1(longArray0, 1, 15, (-4));\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index 10 out of bounds for length 10\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.longcompression.differential.LongDelta\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test11()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "129-148:fastinverseDelta1"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "118-122:test10": {
                    "start": 118,
                    "end": 122,
                    "body": [
                        "  public void test10()  throws Throwable  {\n",
                        "      long[] longArray0 = new long[0];\n",
                        "      LongDelta.delta0(longArray0);\n",
                        "      assertArrayEquals(new long[] {}, longArray0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test10()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "24-28:delta0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals"
                        ]
                    ]
                },
                "110-115:test09": {
                    "start": 110,
                    "end": 115,
                    "body": [
                        "  public void test09()  throws Throwable  {\n",
                        "      long[] longArray0 = new long[4];\n",
                        "      longArray0[0] = (-1916L);\n",
                        "      LongDelta.delta0(longArray0);\n",
                        "      assertArrayEquals(new long[] {(-1916L), 1916L, 0L, 0L}, longArray0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test09()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "24-28:delta0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals"
                        ]
                    ]
                },
                "100-107:test08": {
                    "start": 100,
                    "end": 107,
                    "body": [
                        "  public void test08()  throws Throwable  {\n",
                        "      long[] longArray0 = new long[6];\n",
                        "      longArray0[0] = (-8L);\n",
                        "      LongDelta.fastinverseDelta0(longArray0);\n",
                        "      long long0 = LongDelta.delta1(longArray0, 1, 3, (-2490));\n",
                        "      assertArrayEquals(new long[] {(-8L), 2482L, 0L, 0L, (-8L), (-8L)}, longArray0);\n",
                        "      assertEquals((-8L), long0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test08()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "43-50:delta1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "97-113:fastinverseDelta0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ]
                    ]
                },
                "92-97:test07": {
                    "start": 92,
                    "end": 97,
                    "body": [
                        "  public void test07()  throws Throwable  {\n",
                        "      long[] longArray0 = new long[5];\n",
                        "      long long0 = LongDelta.delta2(longArray0, 1, 3, 10, longArray0);\n",
                        "      assertEquals(0L, long0);\n",
                        "      assertArrayEquals(new long[] {(-10L), 0L, 0L, 0L, 0L}, longArray0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test07()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "68-75:delta2"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals"
                        ]
                    ]
                },
                "84-89:test06": {
                    "start": 84,
                    "end": 89,
                    "body": [
                        "  public void test06()  throws Throwable  {\n",
                        "      long[] longArray0 = new long[4];\n",
                        "      long[] longArray1 = new long[9];\n",
                        "      LongDelta.delta2(longArray0, 2, 2, 2, longArray1);\n",
                        "      assertArrayEquals(new long[] {(-2L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test06()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "68-75:delta2"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals"
                        ]
                    ]
                },
                "75-81:test05": {
                    "start": 75,
                    "end": 81,
                    "body": [
                        "  public void test05()  throws Throwable  {\n",
                        "      long[] longArray0 = new long[4];\n",
                        "      longArray0[2] = (-72L);\n",
                        "      long long0 = LongDelta.delta2(longArray0, 2, 2, 2, longArray0);\n",
                        "      assertEquals(0L, long0);\n",
                        "      assertArrayEquals(new long[] {(-74L), 72L, (-72L), 0L}, longArray0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test05()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "68-75:delta2"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals"
                        ]
                    ]
                },
                "68-72:test04": {
                    "start": 68,
                    "end": 72,
                    "body": [
                        "  public void test04()  throws Throwable  {\n",
                        "      long[] longArray0 = new long[0];\n",
                        "      LongDelta.inverseDelta(longArray0);\n",
                        "      assertArrayEquals(new long[] {}, longArray0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test04()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "84-88:inverseDelta"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals"
                        ]
                    ]
                },
                "60-65:test03": {
                    "start": 60,
                    "end": 65,
                    "body": [
                        "  public void test03()  throws Throwable  {\n",
                        "      long[] longArray0 = new long[5];\n",
                        "      longArray0[0] = 503L;\n",
                        "      LongDelta.inverseDelta(longArray0);\n",
                        "      assertArrayEquals(new long[] {503L, 503L, 503L, 503L, 503L}, longArray0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test03()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "84-88:inverseDelta"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals"
                        ]
                    ]
                },
                "52-57:test02": {
                    "start": 52,
                    "end": 57,
                    "body": [
                        "  public void test02()  throws Throwable  {\n",
                        "      long[] longArray0 = new long[9];\n",
                        "      longArray0[0] = 1L;\n",
                        "      LongDelta.fastinverseDelta0(longArray0);\n",
                        "      assertArrayEquals(new long[] {1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L}, longArray0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test02()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "97-113:fastinverseDelta0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals"
                        ]
                    ]
                },
                "36-49:test01": {
                    "start": 36,
                    "end": 49,
                    "body": [
                        "  public void test01()  throws Throwable  {\n",
                        "      long[] longArray0 = new long[4];\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        LongDelta.fastinverseDelta1(longArray0, 0, 0, 0);\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index 4 out of bounds for length 4\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.longcompression.differential.LongDelta\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test01()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "129-148:fastinverseDelta1"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "20-33:test00": {
                    "start": 20,
                    "end": 33,
                    "body": [
                        "  public void test00()  throws Throwable  {\n",
                        "      long[] longArray0 = new long[4];\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        LongDelta.fastinverseDelta1(longArray0, 0, 5, 5);\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index 4 out of bounds for length 4\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.longcompression.differential.LongDelta\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test00()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "129-148:fastinverseDelta1"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}