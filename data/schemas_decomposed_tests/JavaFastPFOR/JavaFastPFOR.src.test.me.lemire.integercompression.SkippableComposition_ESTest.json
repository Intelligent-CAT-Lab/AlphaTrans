{
    "path": "java_projects/cleaned_final_projects_evosuite/JavaFastPFOR/src/test/java/me/lemire/integercompression/SkippableComposition_ESTest.java",
    "imports": {
        "23-23:import EvoRunnerParameters": {
            "start": 23,
            "end": 23,
            "body": [
                "import org.evosuite.runtime.EvoRunnerParameters;\n"
            ]
        },
        "24-24:import RunWith": {
            "start": 24,
            "end": 24,
            "body": [
                "import org.junit.runner.RunWith;\n"
            ]
        },
        "22-22:import EvoRunner": {
            "start": 22,
            "end": 22,
            "body": [
                "import org.evosuite.runtime.EvoRunner;\n"
            ]
        },
        "8-8:import Test": {
            "start": 8,
            "end": 8,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "18-18:import Simple16": {
            "start": 18,
            "end": 18,
            "body": [
                "import me.lemire.integercompression.Simple16;\n"
            ]
        },
        "11-11:import BinaryPacking": {
            "start": 11,
            "end": 11,
            "body": [
                "import me.lemire.integercompression.BinaryPacking;\n"
            ]
        },
        "20-20:import SkippableIntegerCODEC": {
            "start": 20,
            "end": 20,
            "body": [
                "import me.lemire.integercompression.SkippableIntegerCODEC;\n"
            ]
        },
        "14-14:import IntWrapper": {
            "start": 14,
            "end": 14,
            "body": [
                "import me.lemire.integercompression.IntWrapper;\n"
            ]
        },
        "12-12:import FastPFOR": {
            "start": 12,
            "end": 12,
            "body": [
                "import me.lemire.integercompression.FastPFOR;\n"
            ]
        },
        "13-13:import GroupSimple9": {
            "start": 13,
            "end": 13,
            "body": [
                "import me.lemire.integercompression.GroupSimple9;\n"
            ]
        },
        "15-15:import Kamikaze": {
            "start": 15,
            "end": 15,
            "body": [
                "import me.lemire.integercompression.Kamikaze;\n"
            ]
        },
        "16-16:import NewPFD": {
            "start": 16,
            "end": 16,
            "body": [
                "import me.lemire.integercompression.NewPFD;\n"
            ]
        },
        "17-17:import NewPFDS9": {
            "start": 17,
            "end": 17,
            "body": [
                "import me.lemire.integercompression.NewPFDS9;\n"
            ]
        },
        "19-19:import SkippableComposition": {
            "start": 19,
            "end": 19,
            "body": [
                "import me.lemire.integercompression.SkippableComposition;\n"
            ]
        },
        "21-21:import VariableByte": {
            "start": 21,
            "end": 21,
            "body": [
                "import me.lemire.integercompression.VariableByte;\n"
            ]
        },
        "10-10:import static EvoAssertions.*": {
            "start": 10,
            "end": 10,
            "body": [
                "import static org.evosuite.runtime.EvoAssertions.*;\n"
            ]
        },
        "9-9:import static Assert.*": {
            "start": 9,
            "end": 9,
            "body": [
                "import static org.junit.Assert.*;\n"
            ]
        }
    },
    "classes": {
        "SkippableComposition_ESTest": {
            "start": 27,
            "end": 27,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "SkippableComposition_ESTest_scaffolding"
            ],
            "methods": {
                "270-278:test14": {
                    "start": 270,
                    "end": 278,
                    "body": [
                        "  public void test14()  throws Throwable  {\n",
                        "      GroupSimple9 groupSimple9_0 = new GroupSimple9();\n",
                        "      SkippableComposition skippableComposition0 = new SkippableComposition(groupSimple9_0, groupSimple9_0);\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(0);\n",
                        "      int[] intArray0 = new int[8];\n",
                        "      skippableComposition0.headlessCompress(intArray0, intWrapper0, 1, intArray0, intWrapper0);\n",
                        "      assertEquals((byte)1, intWrapper0.byteValue());\n",
                        "      assertEquals(\"1\", intWrapper0.toString());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test14()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                            "GroupSimple9",
                            "GroupSimple9"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "38-49:headlessCompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Number",
                            "byteValue"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "94-96:toString"
                        ]
                    ]
                },
                "251-267:test13": {
                    "start": 251,
                    "end": 267,
                    "body": [
                        "  public void test13()  throws Throwable  {\n",
                        "      Kamikaze kamikaze0 = new Kamikaze();\n",
                        "      SkippableComposition skippableComposition0 = new SkippableComposition(kamikaze0, kamikaze0);\n",
                        "      IntWrapper intWrapper0 = new IntWrapper((-56));\n",
                        "      int[] intArray0 = new int[8];\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        skippableComposition0.headlessCompress(intArray0, intWrapper0, (-56), intArray0, intWrapper0);\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index -56 out of bounds for length 8\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.SkippableComposition\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test13()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Kamikaze",
                            "Kamikaze",
                            "Kamikaze"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "38-49:headlessCompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "240-248:test12": {
                    "start": 240,
                    "end": 248,
                    "body": [
                        "  public void test12()  throws Throwable  {\n",
                        "      NewPFDS9 newPFDS9_0 = new NewPFDS9();\n",
                        "      SkippableComposition skippableComposition0 = new SkippableComposition(newPFDS9_0, newPFDS9_0);\n",
                        "      IntWrapper intWrapper0 = new IntWrapper((-713));\n",
                        "      SkippableComposition skippableComposition1 = new SkippableComposition(skippableComposition0, newPFDS9_0);\n",
                        "      skippableComposition1.headlessUncompress((int[]) null, intWrapper0, (-713), (int[]) null, intWrapper0, (-713));\n",
                        "      assertEquals((byte)56, intWrapper0.byteValue());\n",
                        "      assertEquals(\"-712\", intWrapper0.toString());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test12()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                            "NewPFDS9",
                            "43-44:NewPFDS9"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "52-62:headlessUncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Number",
                            "byteValue"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "94-96:toString"
                        ]
                    ]
                },
                "221-237:test11": {
                    "start": 221,
                    "end": 237,
                    "body": [
                        "  public void test11()  throws Throwable  {\n",
                        "      IntWrapper intWrapper0 = new IntWrapper((-713));\n",
                        "      VariableByte variableByte0 = new VariableByte();\n",
                        "      Kamikaze kamikaze0 = new Kamikaze();\n",
                        "      SkippableComposition skippableComposition0 = new SkippableComposition(variableByte0, kamikaze0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        skippableComposition0.headlessCompress((int[]) null, intWrapper0, (-713), (int[]) null, intWrapper0);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // capacity < 0: (-5704 < 0)\n",
                        "         //\n",
                        "         verifyException(\"java.nio.Buffer\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test11()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Kamikaze",
                            "Kamikaze",
                            "Kamikaze"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "38-49:headlessCompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "204-218:test10": {
                    "start": 204,
                    "end": 218,
                    "body": [
                        "  public void test10()  throws Throwable  {\n",
                        "      SkippableComposition skippableComposition0 = new SkippableComposition((SkippableIntegerCODEC) null, (SkippableIntegerCODEC) null);\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(361);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        skippableComposition0.headlessCompress((int[]) null, intWrapper0, 361, (int[]) null, intWrapper0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.SkippableComposition\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test10()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "38-49:headlessCompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "183-201:test09": {
                    "start": 183,
                    "end": 201,
                    "body": [
                        "  public void test09()  throws Throwable  {\n",
                        "      Simple16 simple16_0 = new Simple16();\n",
                        "      IntWrapper intWrapper0 = IntWrapper.IntWrapper1();\n",
                        "      NewPFDS9 newPFDS9_0 = new NewPFDS9();\n",
                        "      int[] intArray0 = new int[9];\n",
                        "      intArray0[5] = 536870911;\n",
                        "      SkippableComposition skippableComposition0 = new SkippableComposition(simple16_0, newPFDS9_0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        skippableComposition0.headlessCompress(intArray0, intWrapper0, 405, intArray0, intWrapper0);\n",
                        "        fail(\"Expecting exception: RuntimeException\");\n",
                        "      \n",
                        "      } catch(RuntimeException e) {\n",
                        "         //\n",
                        "         // Too big a number\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.Simple16\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test09()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Simple16",
                            "Simple16",
                            "Simple16"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                            "NewPFDS9",
                            "43-44:NewPFDS9"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "38-49:headlessCompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "163-180:test08": {
                    "start": 163,
                    "end": 180,
                    "body": [
                        "  public void test08()  throws Throwable  {\n",
                        "      GroupSimple9 groupSimple9_0 = new GroupSimple9();\n",
                        "      SkippableComposition skippableComposition0 = new SkippableComposition(groupSimple9_0, groupSimple9_0);\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(0);\n",
                        "      IntWrapper intWrapper1 = new IntWrapper((-1782));\n",
                        "      int[] intArray0 = new int[8];\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        skippableComposition0.headlessUncompress(intArray0, intWrapper0, 1053, intArray0, intWrapper1, (-5120));\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index -6902 out of bounds for length 8\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.GroupSimple9\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test08()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                            "GroupSimple9",
                            "GroupSimple9"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "52-62:headlessUncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "139-160:test07": {
                    "start": 139,
                    "end": 160,
                    "body": [
                        "  public void test07()  throws Throwable  {\n",
                        "      Kamikaze kamikaze0 = new Kamikaze();\n",
                        "      SkippableComposition skippableComposition0 = new SkippableComposition(kamikaze0, kamikaze0);\n",
                        "      IntWrapper intWrapper0 = new IntWrapper((-56));\n",
                        "      int[] intArray0 = new int[8];\n",
                        "      intArray0[2] = (-56);\n",
                        "      IntWrapper intWrapper1 = IntWrapper.IntWrapper1();\n",
                        "      skippableComposition0.headlessCompress(intArray0, intWrapper0, (-56), intArray0, intWrapper1);\n",
                        "      BinaryPacking binaryPacking0 = new BinaryPacking();\n",
                        "      SkippableComposition skippableComposition1 = new SkippableComposition(kamikaze0, binaryPacking0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        skippableComposition1.headlessUncompress(intArray0, intWrapper1, 0, intArray0, intWrapper0, 0);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // Unsupported bit width.\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.BitPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test07()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Kamikaze",
                            "Kamikaze",
                            "Kamikaze"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.BinaryPacking",
                            "BinaryPacking",
                            "BinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "38-49:headlessCompress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "52-62:headlessUncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "120-136:test06": {
                    "start": 120,
                    "end": 136,
                    "body": [
                        "  public void test06()  throws Throwable  {\n",
                        "      Kamikaze kamikaze0 = new Kamikaze();\n",
                        "      SkippableComposition skippableComposition0 = new SkippableComposition(kamikaze0, kamikaze0);\n",
                        "      int[] intArray0 = new int[4];\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(2224);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        skippableComposition0.headlessUncompress(intArray0, intWrapper0, 1298, intArray0, intWrapper0, (-2147483647));\n",
                        "        fail(\"Expecting exception: NegativeArraySizeException\");\n",
                        "      \n",
                        "      } catch(NegativeArraySizeException e) {\n",
                        "         //\n",
                        "         // -4608\n",
                        "         //\n",
                        "         verifyException(\"com.kamikaze.pfordelta.PForDelta\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test06()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Kamikaze",
                            "Kamikaze",
                            "Kamikaze"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "52-62:headlessUncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "102-117:test05": {
                    "start": 102,
                    "end": 117,
                    "body": [
                        "  public void test05()  throws Throwable  {\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(834);\n",
                        "      FastPFOR fastPFOR0 = FastPFOR.FastPFOR1();\n",
                        "      SkippableComposition skippableComposition0 = new SkippableComposition(fastPFOR0, fastPFOR0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        skippableComposition0.headlessUncompress((int[]) null, intWrapper0, 834, (int[]) null, intWrapper0, 65536);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.FastPFOR\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test05()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                            "FastPFOR",
                            "90-92:FastPFOR1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "52-62:headlessUncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "81-99:test04": {
                    "start": 81,
                    "end": 99,
                    "body": [
                        "  public void test04()  throws Throwable  {\n",
                        "      NewPFDS9 newPFDS9_0 = new NewPFDS9();\n",
                        "      IntWrapper intWrapper0 = IntWrapper.IntWrapper1();\n",
                        "      SkippableComposition skippableComposition0 = new SkippableComposition(newPFDS9_0, newPFDS9_0);\n",
                        "      int[] intArray0 = new int[3];\n",
                        "      intArray0[0] = (-3676);\n",
                        "      intArray0[1] = (-3676);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        skippableComposition0.headlessUncompress(intArray0, intWrapper0, (-3676), intArray0, intWrapper0, 448);\n",
                        "        fail(\"Expecting exception: RuntimeException\");\n",
                        "      \n",
                        "      } catch(RuntimeException e) {\n",
                        "         //\n",
                        "         // shouldn't happen\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.S9\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test04()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                            "NewPFDS9",
                            "43-44:NewPFDS9"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "52-62:headlessUncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "65-78:test03": {
                    "start": 65,
                    "end": 78,
                    "body": [
                        "  public void test03()  throws Throwable  {\n",
                        "      SkippableComposition skippableComposition0 = new SkippableComposition((SkippableIntegerCODEC) null, (SkippableIntegerCODEC) null);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        skippableComposition0.toString();\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.evosuite.runtime.System\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test03()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "65-67:toString"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "52-62:test02": {
                    "start": 52,
                    "end": 62,
                    "body": [
                        "  public void test02()  throws Throwable  {\n",
                        "      GroupSimple9 groupSimple9_0 = new GroupSimple9();\n",
                        "      NewPFD newPFD0 = new NewPFD();\n",
                        "      SkippableComposition skippableComposition0 = new SkippableComposition(groupSimple9_0, newPFD0);\n",
                        "      int[] intArray0 = new int[0];\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(0);\n",
                        "      int[] intArray1 = new int[1];\n",
                        "      skippableComposition0.headlessCompress(intArray0, intWrapper0, (-78), intArray1, intWrapper0);\n",
                        "      assertEquals(1.0F, intWrapper0.floatValue(), 0.01F);\n",
                        "      assertArrayEquals(new int[] {0}, intArray1);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test02()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                            "GroupSimple9",
                            "GroupSimple9"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                            "NewPFD",
                            "45-46:NewPFD"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "38-49:headlessCompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "55-57:floatValue"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals"
                        ]
                    ]
                },
                "39-49:test01": {
                    "start": 39,
                    "end": 49,
                    "body": [
                        "  public void test01()  throws Throwable  {\n",
                        "      GroupSimple9 groupSimple9_0 = new GroupSimple9();\n",
                        "      NewPFD newPFD0 = new NewPFD();\n",
                        "      SkippableComposition skippableComposition0 = new SkippableComposition(groupSimple9_0, newPFD0);\n",
                        "      int[] intArray0 = new int[0];\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(0);\n",
                        "      int[] intArray1 = new int[1];\n",
                        "      skippableComposition0.headlessUncompress(intArray1, intWrapper0, (-78), intArray0, intWrapper0, 0);\n",
                        "      assertEquals(1L, intWrapper0.longValue());\n",
                        "      assertEquals(1, intWrapper0.intValue());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test01()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                            "GroupSimple9",
                            "GroupSimple9"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                            "NewPFD",
                            "45-46:NewPFD"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "52-62:headlessUncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "79-81:longValue"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ]
                    ]
                },
                "30-36:test00": {
                    "start": 30,
                    "end": 36,
                    "body": [
                        "  public void test00()  throws Throwable  {\n",
                        "      GroupSimple9 groupSimple9_0 = new GroupSimple9();\n",
                        "      NewPFD newPFD0 = new NewPFD();\n",
                        "      SkippableComposition skippableComposition0 = new SkippableComposition(groupSimple9_0, newPFD0);\n",
                        "      String string0 = skippableComposition0.toString();\n",
                        "      assertNotNull(string0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test00()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                            "GroupSimple9",
                            "GroupSimple9"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                            "NewPFD",
                            "45-46:NewPFD"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "65-67:toString"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}