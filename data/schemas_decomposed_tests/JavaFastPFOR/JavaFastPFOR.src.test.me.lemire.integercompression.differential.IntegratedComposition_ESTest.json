{
    "path": "java_projects/cleaned_final_projects_evosuite/JavaFastPFOR/src/test/java/me/lemire/integercompression/differential/IntegratedComposition_ESTest.java",
    "imports": {
        "18-18:import EvoRunnerParameters": {
            "start": 18,
            "end": 18,
            "body": [
                "import org.evosuite.runtime.EvoRunnerParameters;\n"
            ]
        },
        "19-19:import RunWith": {
            "start": 19,
            "end": 19,
            "body": [
                "import org.junit.runner.RunWith;\n"
            ]
        },
        "17-17:import EvoRunner": {
            "start": 17,
            "end": 17,
            "body": [
                "import org.evosuite.runtime.EvoRunner;\n"
            ]
        },
        "8-8:import Test": {
            "start": 8,
            "end": 8,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "11-11:import IntWrapper": {
            "start": 11,
            "end": 11,
            "body": [
                "import me.lemire.integercompression.IntWrapper;\n"
            ]
        },
        "14-14:import IntegratedIntegerCODEC": {
            "start": 14,
            "end": 14,
            "body": [
                "import me.lemire.integercompression.differential.IntegratedIntegerCODEC;\n"
            ]
        },
        "12-12:import IntegratedBinaryPacking": {
            "start": 12,
            "end": 12,
            "body": [
                "import me.lemire.integercompression.differential.IntegratedBinaryPacking;\n"
            ]
        },
        "13-13:import IntegratedComposition": {
            "start": 13,
            "end": 13,
            "body": [
                "import me.lemire.integercompression.differential.IntegratedComposition;\n"
            ]
        },
        "15-15:import IntegratedVariableByte": {
            "start": 15,
            "end": 15,
            "body": [
                "import me.lemire.integercompression.differential.IntegratedVariableByte;\n"
            ]
        },
        "16-16:import XorBinaryPacking": {
            "start": 16,
            "end": 16,
            "body": [
                "import me.lemire.integercompression.differential.XorBinaryPacking;\n"
            ]
        },
        "10-10:import static EvoAssertions.*": {
            "start": 10,
            "end": 10,
            "body": [
                "import static org.evosuite.runtime.EvoAssertions.*;\n"
            ]
        },
        "9-9:import static Assert.*": {
            "start": 9,
            "end": 9,
            "body": [
                "import static org.junit.Assert.*;\n"
            ]
        }
    },
    "classes": {
        "IntegratedComposition_ESTest": {
            "start": 22,
            "end": 22,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "IntegratedComposition_ESTest_scaffolding"
            ],
            "methods": {
                "290-299:test18": {
                    "start": 290,
                    "end": 299,
                    "body": [
                        "  public void test18()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      IntegratedComposition integratedComposition0 = new IntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(1);\n",
                        "      integratedComposition0.F2 = (IntegratedIntegerCODEC) integratedComposition0;\n",
                        "      int[] intArray0 = new int[4];\n",
                        "      integratedComposition0.compress0(intArray0, intWrapper0, 1, intArray0, intWrapper0);\n",
                        "      assertEquals((byte)2, intWrapper0.byteValue());\n",
                        "      assertEquals(2.0F, intWrapper0.floatValue(), 0.01F);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test18()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "41-55:compress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Number",
                            "byteValue"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "55-57:floatValue"
                        ]
                    ]
                },
                "278-287:test17": {
                    "start": 278,
                    "end": 287,
                    "body": [
                        "  public void test17()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      IntegratedComposition integratedComposition0 = new IntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      int[] intArray0 = new int[5];\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(2);\n",
                        "      IntegratedComposition integratedComposition1 = new IntegratedComposition(integratedComposition0, integratedComposition0);\n",
                        "      integratedComposition1.compress0(intArray0, intWrapper0, 2, intArray0, intWrapper0);\n",
                        "      assertEquals((short)4, intWrapper0.shortValue());\n",
                        "      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test17()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "41-55:compress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Number",
                            "shortValue"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals"
                        ]
                    ]
                },
                "267-275:test16": {
                    "start": 267,
                    "end": 275,
                    "body": [
                        "  public void test16()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      int[] intArray0 = new int[6];\n",
                        "      IntegratedComposition integratedComposition0 = new IntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(0);\n",
                        "      integratedComposition0.uncompress0(intArray0, intWrapper0, 0, intArray0, intWrapper0);\n",
                        "      assertEquals((byte)0, intWrapper0.byteValue());\n",
                        "      assertEquals(0L, intWrapper0.longValue());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test16()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "58-66:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Number",
                            "byteValue"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "79-81:longValue"
                        ]
                    ]
                },
                "256-264:test15": {
                    "start": 256,
                    "end": 264,
                    "body": [
                        "  public void test15()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      IntegratedComposition integratedComposition0 = new IntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      int[] intArray0 = new int[5];\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(0);\n",
                        "      integratedComposition0.compress0(intArray0, intWrapper0, 0, intArray0, intWrapper0);\n",
                        "      assertEquals((byte)0, intWrapper0.byteValue());\n",
                        "      assertEquals((short)0, intWrapper0.shortValue());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test15()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "41-55:compress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Number",
                            "byteValue"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Number",
                            "shortValue"
                        ]
                    ]
                },
                "237-253:test14": {
                    "start": 237,
                    "end": 253,
                    "body": [
                        "  public void test14()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      IntegratedComposition integratedComposition0 = new IntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      int[] intArray0 = new int[2];\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(127);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        integratedComposition0.compress0(intArray0, intWrapper0, 16, intArray0, intWrapper0);\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index 127 out of bounds for length 2\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.differential.IntegratedComposition\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test14()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "41-55:compress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "218-234:test13": {
                    "start": 218,
                    "end": 234,
                    "body": [
                        "  public void test13()  throws Throwable  {\n",
                        "      IntegratedVariableByte integratedVariableByte0 = new IntegratedVariableByte();\n",
                        "      IntegratedComposition integratedComposition0 = new IntegratedComposition(integratedVariableByte0, integratedVariableByte0);\n",
                        "      int[] intArray0 = new int[6];\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(1315);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        integratedComposition0.compress0(intArray0, intWrapper0, (-1), intArray0, intWrapper0);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // capacity < 0: (-8 < 0)\n",
                        "         //\n",
                        "         verifyException(\"java.nio.Buffer\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test13()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "41-55:compress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "199-215:test12": {
                    "start": 199,
                    "end": 215,
                    "body": [
                        "  public void test12()  throws Throwable  {\n",
                        "      IntegratedVariableByte integratedVariableByte0 = new IntegratedVariableByte();\n",
                        "      IntegratedComposition integratedComposition0 = new IntegratedComposition(integratedVariableByte0, integratedVariableByte0);\n",
                        "      int[] intArray0 = new int[3];\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(2191);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        integratedComposition0.compress0(intArray0, intWrapper0, Integer.MIN_VALUE, intArray0, intWrapper0);\n",
                        "        fail(\"Expecting exception: IndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(IndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"java.nio.Buffer\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test12()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "41-55:compress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "181-196:test11": {
                    "start": 181,
                    "end": 196,
                    "body": [
                        "  public void test11()  throws Throwable  {\n",
                        "      IntegratedVariableByte integratedVariableByte0 = new IntegratedVariableByte();\n",
                        "      IntegratedComposition integratedComposition0 = new IntegratedComposition(integratedVariableByte0, integratedVariableByte0);\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(956);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        integratedComposition0.compress0((int[]) null, intWrapper0, 956, (int[]) null, intWrapper0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.differential.IntegratedVariableByte\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test11()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "41-55:compress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "165-178:test10": {
                    "start": 165,
                    "end": 178,
                    "body": [
                        "  public void test10()  throws Throwable  {\n",
                        "      IntegratedComposition integratedComposition0 = new IntegratedComposition((IntegratedIntegerCODEC) null, (IntegratedIntegerCODEC) null);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        integratedComposition0.toString();\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.evosuite.runtime.System\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test10()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "69-71:toString"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "146-162:test09": {
                    "start": 146,
                    "end": 162,
                    "body": [
                        "  public void test09()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      IntegratedComposition integratedComposition0 = new IntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(0);\n",
                        "      int[] intArray0 = new int[1];\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        integratedComposition0.uncompress0(intArray0, intWrapper0, 5603, intArray0, intWrapper0);\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index 1 out of bounds for length 1\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.differential.IntegratedBinaryPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test09()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "58-66:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "125-143:test08": {
                    "start": 125,
                    "end": 143,
                    "body": [
                        "  public void test08()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      IntegratedComposition integratedComposition0 = new IntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      int[] intArray0 = new int[5];\n",
                        "      intArray0[0] = 2369;\n",
                        "      intArray0[1] = (-1);\n",
                        "      IntWrapper intWrapper0 = IntWrapper.IntWrapper1();\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        integratedComposition0.uncompress0(intArray0, intWrapper0, (-1), intArray0, intWrapper0);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // Unsupported bit width.\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.differential.IntegratedBitPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test08()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "58-66:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "116-122:test07": {
                    "start": 116,
                    "end": 122,
                    "body": [
                        "  public void test07()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      IntegratedComposition integratedComposition0 = new IntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      IntegratedComposition integratedComposition1 = new IntegratedComposition(integratedComposition0, integratedBinaryPacking0);\n",
                        "      String string0 = integratedComposition1.toString();\n",
                        "      assertNotNull(string0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test07()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "69-71:toString"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ]
                    ]
                },
                "104-113:test06": {
                    "start": 104,
                    "end": 113,
                    "body": [
                        "  public void test06()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      IntegratedComposition integratedComposition0 = new IntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      int[] intArray0 = new int[2];\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(0);\n",
                        "      int[] intArray1 = new int[1];\n",
                        "      integratedComposition0.compress0(intArray0, intWrapper0, (-1), intArray1, intWrapper0);\n",
                        "      assertEquals(\"1\", intWrapper0.toString());\n",
                        "      assertEquals(1, intWrapper0.get());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test06()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "41-55:compress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "94-96:toString"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ]
                    ]
                },
                "92-101:test05": {
                    "start": 92,
                    "end": 101,
                    "body": [
                        "  public void test05()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      IntegratedComposition integratedComposition0 = new IntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      int[] intArray0 = new int[2];\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(127);\n",
                        "      IntWrapper intWrapper1 = IntWrapper.IntWrapper1();\n",
                        "      integratedComposition0.compress0(intArray0, intWrapper0, 1, intArray0, intWrapper1);\n",
                        "      assertEquals(1L, intWrapper1.longValue());\n",
                        "      assertEquals(1, intWrapper1.intValue());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test05()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "41-55:compress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "79-81:longValue"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ]
                    ]
                },
                "80-89:test04": {
                    "start": 80,
                    "end": 89,
                    "body": [
                        "  public void test04()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      IntegratedComposition integratedComposition0 = new IntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      int[] intArray0 = new int[2];\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(0);\n",
                        "      IntWrapper intWrapper1 = new IntWrapper(0);\n",
                        "      integratedComposition0.uncompress0(intArray0, intWrapper0, 5603, intArray0, intWrapper1);\n",
                        "      assertEquals(\"2\", intWrapper0.toString());\n",
                        "      assertEquals(2.0, intWrapper0.doubleValue(), 0.01);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test04()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "58-66:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "94-96:toString"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "50-52:doubleValue"
                        ]
                    ]
                },
                "61-77:test03": {
                    "start": 61,
                    "end": 77,
                    "body": [
                        "  public void test03()  throws Throwable  {\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(2674);\n",
                        "      XorBinaryPacking xorBinaryPacking0 = new XorBinaryPacking();\n",
                        "      IntegratedComposition integratedComposition0 = new IntegratedComposition((IntegratedIntegerCODEC) null, xorBinaryPacking0);\n",
                        "      int[] intArray0 = new int[0];\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        integratedComposition0.uncompress0(intArray0, intWrapper0, (-813), intArray0, intWrapper0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.differential.IntegratedComposition\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test03()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "XorBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "58-66:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "49-58:test02": {
                    "start": 49,
                    "end": 58,
                    "body": [
                        "  public void test02()  throws Throwable  {\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      IntegratedComposition integratedComposition0 = new IntegratedComposition(integratedBinaryPacking0, integratedBinaryPacking0);\n",
                        "      int[] intArray0 = new int[2];\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(0);\n",
                        "      int[] intArray1 = new int[1];\n",
                        "      integratedComposition0.uncompress0(intArray0, intWrapper0, 2818, intArray1, intWrapper0);\n",
                        "      assertEquals(2, intWrapper0.get());\n",
                        "      assertEquals(2, intWrapper0.intValue());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test02()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "58-66:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ]
                    ]
                },
                "38-46:test01": {
                    "start": 38,
                    "end": 46,
                    "body": [
                        "  public void test01()  throws Throwable  {\n",
                        "      IntegratedVariableByte integratedVariableByte0 = new IntegratedVariableByte();\n",
                        "      IntegratedComposition integratedComposition0 = new IntegratedComposition(integratedVariableByte0, integratedVariableByte0);\n",
                        "      int[] intArray0 = new int[6];\n",
                        "      IntWrapper intWrapper0 = new IntWrapper((-1519));\n",
                        "      integratedComposition0.uncompress0(intArray0, intWrapper0, (-1351), intArray0, intWrapper0);\n",
                        "      assertEquals(\"-2870\", intWrapper0.toString());\n",
                        "      assertEquals((-2870), intWrapper0.get());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test01()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "58-66:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "94-96:toString"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ]
                    ]
                },
                "25-35:test00": {
                    "start": 25,
                    "end": 35,
                    "body": [
                        "  public void test00()  throws Throwable  {\n",
                        "      IntegratedVariableByte integratedVariableByte0 = new IntegratedVariableByte();\n",
                        "      IntegratedComposition integratedComposition0 = new IntegratedComposition(integratedVariableByte0, integratedVariableByte0);\n",
                        "      IntWrapper intWrapper0 = new IntWrapper((-1009));\n",
                        "      IntegratedBinaryPacking integratedBinaryPacking0 = new IntegratedBinaryPacking();\n",
                        "      int[] intArray0 = new int[1];\n",
                        "      IntegratedComposition integratedComposition1 = new IntegratedComposition(integratedComposition0, integratedBinaryPacking0);\n",
                        "      integratedComposition1.uncompress0((int[]) null, intWrapper0, (-1009), intArray0, intWrapper0);\n",
                        "      assertEquals((-2018), intWrapper0.get());\n",
                        "      assertEquals((-2018.0), intWrapper0.doubleValue(), 0.01);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test00()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "58-66:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "50-52:doubleValue"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}