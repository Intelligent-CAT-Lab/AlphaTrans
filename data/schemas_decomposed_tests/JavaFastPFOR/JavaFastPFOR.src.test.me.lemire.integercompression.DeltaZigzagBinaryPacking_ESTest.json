{
    "path": "java_projects/cleaned_final_projects_evosuite/JavaFastPFOR/src/test/java/me/lemire/integercompression/DeltaZigzagBinaryPacking_ESTest.java",
    "imports": {
        "14-14:import EvoRunnerParameters": {
            "start": 14,
            "end": 14,
            "body": [
                "import org.evosuite.runtime.EvoRunnerParameters;\n"
            ]
        },
        "15-15:import RunWith": {
            "start": 15,
            "end": 15,
            "body": [
                "import org.junit.runner.RunWith;\n"
            ]
        },
        "13-13:import EvoRunner": {
            "start": 13,
            "end": 13,
            "body": [
                "import org.evosuite.runtime.EvoRunner;\n"
            ]
        },
        "8-8:import Test": {
            "start": 8,
            "end": 8,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "12-12:import IntWrapper": {
            "start": 12,
            "end": 12,
            "body": [
                "import me.lemire.integercompression.IntWrapper;\n"
            ]
        },
        "11-11:import DeltaZigzagBinaryPacking": {
            "start": 11,
            "end": 11,
            "body": [
                "import me.lemire.integercompression.DeltaZigzagBinaryPacking;\n"
            ]
        },
        "10-10:import static EvoAssertions.*": {
            "start": 10,
            "end": 10,
            "body": [
                "import static org.evosuite.runtime.EvoAssertions.*;\n"
            ]
        },
        "9-9:import static Assert.*": {
            "start": 9,
            "end": 9,
            "body": [
                "import static org.junit.Assert.*;\n"
            ]
        }
    },
    "classes": {
        "DeltaZigzagBinaryPacking_ESTest": {
            "start": 18,
            "end": 18,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "DeltaZigzagBinaryPacking_ESTest_scaffolding"
            ],
            "methods": {
                "259-263:test14": {
                    "start": 259,
                    "end": 263,
                    "body": [
                        "  public void test14()  throws Throwable  {\n",
                        "      DeltaZigzagBinaryPacking deltaZigzagBinaryPacking0 = new DeltaZigzagBinaryPacking();\n",
                        "      String string0 = deltaZigzagBinaryPacking0.toString();\n",
                        "      assertEquals(\"DeltaZigzagBinaryPacking\", string0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test14()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "102-104:toString"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ]
                    ]
                },
                "249-256:test13": {
                    "start": 249,
                    "end": 256,
                    "body": [
                        "  public void test13()  throws Throwable  {\n",
                        "      DeltaZigzagBinaryPacking deltaZigzagBinaryPacking0 = new DeltaZigzagBinaryPacking();\n",
                        "      int[] intArray0 = new int[4];\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(1);\n",
                        "      deltaZigzagBinaryPacking0.compress0(intArray0, intWrapper0, 1, intArray0, intWrapper0);\n",
                        "      assertEquals((byte)1, intWrapper0.byteValue());\n",
                        "      assertEquals(1.0, intWrapper0.doubleValue(), 0.01);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test13()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "25-57:compress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Number",
                            "byteValue"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "50-52:doubleValue"
                        ]
                    ]
                },
                "232-246:test12": {
                    "start": 232,
                    "end": 246,
                    "body": [
                        "  public void test12()  throws Throwable  {\n",
                        "      DeltaZigzagBinaryPacking deltaZigzagBinaryPacking0 = new DeltaZigzagBinaryPacking();\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(814);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        deltaZigzagBinaryPacking0.compress0((int[]) null, intWrapper0, 814, (int[]) null, intWrapper0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.DeltaZigzagBinaryPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test12()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "25-57:compress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "215-229:test11": {
                    "start": 215,
                    "end": 229,
                    "body": [
                        "  public void test11()  throws Throwable  {\n",
                        "      DeltaZigzagBinaryPacking deltaZigzagBinaryPacking0 = new DeltaZigzagBinaryPacking();\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(1759);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        deltaZigzagBinaryPacking0.uncompress0((int[]) null, intWrapper0, 1759, (int[]) null, intWrapper0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.DeltaZigzagBinaryPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test11()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "60-86:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "204-212:test10": {
                    "start": 204,
                    "end": 212,
                    "body": [
                        "  public void test10()  throws Throwable  {\n",
                        "      DeltaZigzagBinaryPacking deltaZigzagBinaryPacking0 = new DeltaZigzagBinaryPacking();\n",
                        "      int[] intArray0 = new int[3];\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(0);\n",
                        "      int[] intArray1 = new int[6];\n",
                        "      deltaZigzagBinaryPacking0.compress0(intArray0, intWrapper0, (-2039), intArray1, intWrapper0);\n",
                        "      assertEquals(1.0, intWrapper0.doubleValue(), 0.01);\n",
                        "      assertArrayEquals(new int[] {(-1920), 0, 0, 0, 0, 0}, intArray1);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test10()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "25-57:compress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "50-52:doubleValue"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals"
                        ]
                    ]
                },
                "185-201:test09": {
                    "start": 185,
                    "end": 201,
                    "body": [
                        "  public void test09()  throws Throwable  {\n",
                        "      DeltaZigzagBinaryPacking deltaZigzagBinaryPacking0 = new DeltaZigzagBinaryPacking();\n",
                        "      int[] intArray0 = new int[4];\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(1);\n",
                        "      IntWrapper intWrapper1 = new IntWrapper((-793));\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        deltaZigzagBinaryPacking0.compress0(intArray0, intWrapper1, 1731, intArray0, intWrapper0);\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index -793 out of bounds for length 4\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.DeltaZigzagEncoding$Encoder\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test09()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "25-57:compress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "166-182:test08": {
                    "start": 166,
                    "end": 182,
                    "body": [
                        "  public void test08()  throws Throwable  {\n",
                        "      DeltaZigzagBinaryPacking deltaZigzagBinaryPacking0 = new DeltaZigzagBinaryPacking();\n",
                        "      int[] intArray0 = new int[3];\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(0);\n",
                        "      int[] intArray1 = new int[6];\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        deltaZigzagBinaryPacking0.compress0(intArray1, intWrapper0, 1861, intArray0, intWrapper0);\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index 6 out of bounds for length 6\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.DeltaZigzagEncoding$Encoder\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test08()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "25-57:compress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "155-163:test07": {
                    "start": 155,
                    "end": 163,
                    "body": [
                        "  public void test07()  throws Throwable  {\n",
                        "      DeltaZigzagBinaryPacking deltaZigzagBinaryPacking0 = new DeltaZigzagBinaryPacking();\n",
                        "      int[] intArray0 = new int[4];\n",
                        "      intArray0[0] = (-4231);\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(0);\n",
                        "      deltaZigzagBinaryPacking0.uncompress0(intArray0, intWrapper0, 622, intArray0, intWrapper0);\n",
                        "      assertEquals((byte)1, intWrapper0.byteValue());\n",
                        "      assertEquals((short)1, intWrapper0.shortValue());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test07()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "60-86:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Number",
                            "byteValue"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Number",
                            "shortValue"
                        ]
                    ]
                },
                "134-152:test06": {
                    "start": 134,
                    "end": 152,
                    "body": [
                        "  public void test06()  throws Throwable  {\n",
                        "      DeltaZigzagBinaryPacking deltaZigzagBinaryPacking0 = new DeltaZigzagBinaryPacking();\n",
                        "      int[] intArray0 = new int[4];\n",
                        "      intArray0[1] = 513;\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(0);\n",
                        "      IntWrapper intWrapper1 = new IntWrapper((-3316));\n",
                        "      deltaZigzagBinaryPacking0.uncompress0(intArray0, intWrapper0, (-145), intArray0, intWrapper0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        deltaZigzagBinaryPacking0.uncompress0(intArray0, intWrapper0, (-1385), intArray0, intWrapper1);\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index -3316 out of bounds for length 4\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.DeltaZigzagEncoding$Decoder\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test06()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "60-86:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "113-131:test05": {
                    "start": 113,
                    "end": 131,
                    "body": [
                        "  public void test05()  throws Throwable  {\n",
                        "      DeltaZigzagBinaryPacking deltaZigzagBinaryPacking0 = new DeltaZigzagBinaryPacking();\n",
                        "      int[] intArray0 = new int[4];\n",
                        "      intArray0[1] = 513;\n",
                        "      intArray0[2] = (-988);\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(0);\n",
                        "      deltaZigzagBinaryPacking0.uncompress0(intArray0, intWrapper0, (-145), intArray0, intWrapper0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        deltaZigzagBinaryPacking0.uncompress0(intArray0, intWrapper0, (-1385), intArray0, intWrapper0);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // Unsupported bit width.\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.BitPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test05()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "60-86:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "93-110:test04": {
                    "start": 93,
                    "end": 110,
                    "body": [
                        "  public void test04()  throws Throwable  {\n",
                        "      IntWrapper intWrapper0 = IntWrapper.IntWrapper1();\n",
                        "      DeltaZigzagBinaryPacking deltaZigzagBinaryPacking0 = new DeltaZigzagBinaryPacking();\n",
                        "      int[] intArray0 = new int[9];\n",
                        "      intArray0[0] = 3943;\n",
                        "      intArray0[1] = 67108863;\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        deltaZigzagBinaryPacking0.uncompress0(intArray0, intWrapper0, 548, intArray0, intWrapper0);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // Unsupported bit width.\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.BitPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test04()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "60-86:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "72-90:test03": {
                    "start": 72,
                    "end": 90,
                    "body": [
                        "  public void test03()  throws Throwable  {\n",
                        "      int[] intArray0 = new int[1];\n",
                        "      IntWrapper intWrapper0 = IntWrapper.IntWrapper1();\n",
                        "      DeltaZigzagBinaryPacking deltaZigzagBinaryPacking0 = new DeltaZigzagBinaryPacking();\n",
                        "      int[] intArray1 = new int[7];\n",
                        "      intArray1[0] = 243;\n",
                        "      intArray1[1] = 262143;\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        deltaZigzagBinaryPacking0.uncompress0(intArray1, intWrapper0, (-2176), intArray0, intWrapper0);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // Unsupported bit width.\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.BitPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test03()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "60-86:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "52-69:test02": {
                    "start": 52,
                    "end": 69,
                    "body": [
                        "  public void test02()  throws Throwable  {\n",
                        "      DeltaZigzagBinaryPacking deltaZigzagBinaryPacking0 = new DeltaZigzagBinaryPacking();\n",
                        "      IntWrapper intWrapper0 = IntWrapper.IntWrapper1();\n",
                        "      int[] intArray0 = new int[8];\n",
                        "      intArray0[0] = 3218;\n",
                        "      intArray0[1] = 871;\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        deltaZigzagBinaryPacking0.uncompress0(intArray0, intWrapper0, 871, intArray0, intWrapper0);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // Unsupported bit width.\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.BitPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test02()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "60-86:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "31-49:test01": {
                    "start": 31,
                    "end": 49,
                    "body": [
                        "  public void test01()  throws Throwable  {\n",
                        "      DeltaZigzagBinaryPacking deltaZigzagBinaryPacking0 = new DeltaZigzagBinaryPacking();\n",
                        "      int[] intArray0 = new int[6];\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(1);\n",
                        "      IntWrapper intWrapper1 = IntWrapper.IntWrapper1();\n",
                        "      int[] intArray1 = new int[6];\n",
                        "      intArray1[0] = 1;\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        deltaZigzagBinaryPacking0.uncompress0(intArray1, intWrapper1, 1, intArray0, intWrapper0);\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index 6 out of bounds for length 6\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.DeltaZigzagEncoding$Decoder\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test01()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "60-86:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "21-28:test00": {
                    "start": 21,
                    "end": 28,
                    "body": [
                        "  public void test00()  throws Throwable  {\n",
                        "      DeltaZigzagBinaryPacking deltaZigzagBinaryPacking0 = new DeltaZigzagBinaryPacking();\n",
                        "      IntWrapper intWrapper0 = IntWrapper.IntWrapper1();\n",
                        "      int[] intArray0 = new int[9];\n",
                        "      deltaZigzagBinaryPacking0.uncompress0(intArray0, intWrapper0, 0, intArray0, intWrapper0);\n",
                        "      assertEquals((short)0, intWrapper0.shortValue());\n",
                        "      assertEquals(0, intWrapper0.intValue());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test00()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "60-86:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Number",
                            "shortValue"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}