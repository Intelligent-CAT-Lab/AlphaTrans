{
    "path": "java_projects/cleaned_final_projects_evosuite/JavaFastPFOR/src/test/java/me/lemire/integercompression/differential/XorBinaryPacking_ESTest.java",
    "imports": {
        "14-14:import EvoRunnerParameters": {
            "start": 14,
            "end": 14,
            "body": [
                "import org.evosuite.runtime.EvoRunnerParameters;\n"
            ]
        },
        "15-15:import RunWith": {
            "start": 15,
            "end": 15,
            "body": [
                "import org.junit.runner.RunWith;\n"
            ]
        },
        "13-13:import EvoRunner": {
            "start": 13,
            "end": 13,
            "body": [
                "import org.evosuite.runtime.EvoRunner;\n"
            ]
        },
        "8-8:import Test": {
            "start": 8,
            "end": 8,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "11-11:import IntWrapper": {
            "start": 11,
            "end": 11,
            "body": [
                "import me.lemire.integercompression.IntWrapper;\n"
            ]
        },
        "12-12:import XorBinaryPacking": {
            "start": 12,
            "end": 12,
            "body": [
                "import me.lemire.integercompression.differential.XorBinaryPacking;\n"
            ]
        },
        "10-10:import static EvoAssertions.*": {
            "start": 10,
            "end": 10,
            "body": [
                "import static org.evosuite.runtime.EvoAssertions.*;\n"
            ]
        },
        "9-9:import static Assert.*": {
            "start": 9,
            "end": 9,
            "body": [
                "import static org.junit.Assert.*;\n"
            ]
        }
    },
    "classes": {
        "XorBinaryPacking_ESTest": {
            "start": 18,
            "end": 18,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "XorBinaryPacking_ESTest_scaffolding"
            ],
            "methods": {
                "250-254:test13": {
                    "start": 250,
                    "end": 254,
                    "body": [
                        "  public void test13()  throws Throwable  {\n",
                        "      XorBinaryPacking xorBinaryPacking0 = new XorBinaryPacking();\n",
                        "      String string0 = xorBinaryPacking0.toString();\n",
                        "      assertEquals(\"XorBinaryPacking\", string0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test13()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "XorBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "100-102:toString"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ]
                    ]
                },
                "240-247:test12": {
                    "start": 240,
                    "end": 247,
                    "body": [
                        "  public void test12()  throws Throwable  {\n",
                        "      XorBinaryPacking xorBinaryPacking0 = new XorBinaryPacking();\n",
                        "      IntWrapper intWrapper0 = IntWrapper.IntWrapper1();\n",
                        "      int[] intArray0 = new int[5];\n",
                        "      xorBinaryPacking0.compress0(intArray0, intWrapper0, 0, intArray0, intWrapper0);\n",
                        "      assertEquals((short)0, intWrapper0.shortValue());\n",
                        "      assertEquals(0L, intWrapper0.longValue());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test12()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "XorBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "23-61:compress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Number",
                            "shortValue"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "79-81:longValue"
                        ]
                    ]
                },
                "231-237:test11": {
                    "start": 231,
                    "end": 237,
                    "body": [
                        "  public void test11()  throws Throwable  {\n",
                        "      XorBinaryPacking xorBinaryPacking0 = new XorBinaryPacking();\n",
                        "      int[] intArray0 = new int[42];\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(3117);\n",
                        "      xorBinaryPacking0.uncompress0(intArray0, intWrapper0, 0, intArray0, intWrapper0);\n",
                        "      assertEquals(42, intArray0.length);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test11()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "XorBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "64-97:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ]
                    ]
                },
                "210-228:test10": {
                    "start": 210,
                    "end": 228,
                    "body": [
                        "  public void test10()  throws Throwable  {\n",
                        "      XorBinaryPacking xorBinaryPacking0 = new XorBinaryPacking();\n",
                        "      int[] intArray0 = new int[42];\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(0);\n",
                        "      xorBinaryPacking0.uncompress0(intArray0, intWrapper0, (-1680), intArray0, intWrapper0);\n",
                        "      xorBinaryPacking0.compress0(intArray0, intWrapper0, (-187), intArray0, intWrapper0);\n",
                        "      IntWrapper intWrapper1 = new IntWrapper(0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        xorBinaryPacking0.compress0(intArray0, intWrapper1, 1881, intArray0, intWrapper1);\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index 42 out of bounds for length 42\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.differential.XorBinaryPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test10()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "XorBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "64-97:uncompress0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "23-61:compress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "193-207:test09": {
                    "start": 193,
                    "end": 207,
                    "body": [
                        "  public void test09()  throws Throwable  {\n",
                        "      XorBinaryPacking xorBinaryPacking0 = new XorBinaryPacking();\n",
                        "      IntWrapper intWrapper0 = new IntWrapper((-654));\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        xorBinaryPacking0.compress0((int[]) null, intWrapper0, (-654), (int[]) null, intWrapper0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.differential.XorBinaryPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test09()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "XorBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "23-61:compress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "173-190:test08": {
                    "start": 173,
                    "end": 190,
                    "body": [
                        "  public void test08()  throws Throwable  {\n",
                        "      XorBinaryPacking xorBinaryPacking0 = new XorBinaryPacking();\n",
                        "      IntWrapper intWrapper0 = IntWrapper.IntWrapper1();\n",
                        "      int[] intArray0 = new int[2];\n",
                        "      intArray0[0] = 2863;\n",
                        "      intArray0[1] = (-3574);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        xorBinaryPacking0.uncompress0(intArray0, intWrapper0, (-3574), intArray0, intWrapper0);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // Unsupported bit width.\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.BitPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test08()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "XorBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "64-97:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "154-170:test07": {
                    "start": 154,
                    "end": 170,
                    "body": [
                        "  public void test07()  throws Throwable  {\n",
                        "      XorBinaryPacking xorBinaryPacking0 = new XorBinaryPacking();\n",
                        "      int[] intArray0 = new int[72];\n",
                        "      IntWrapper intWrapper0 = IntWrapper.IntWrapper1();\n",
                        "      int[] intArray1 = new int[11];\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        xorBinaryPacking0.compress0(intArray0, intWrapper0, 2688, intArray1, intWrapper0);\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index 72 out of bounds for length 72\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.differential.XorBinaryPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test07()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "XorBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "23-61:compress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "135-151:test06": {
                    "start": 135,
                    "end": 151,
                    "body": [
                        "  public void test06()  throws Throwable  {\n",
                        "      XorBinaryPacking xorBinaryPacking0 = new XorBinaryPacking();\n",
                        "      int[] intArray0 = new int[71];\n",
                        "      IntWrapper intWrapper0 = IntWrapper.IntWrapper1();\n",
                        "      IntWrapper intWrapper1 = IntWrapper.IntWrapper1();\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        xorBinaryPacking0.compress0(intArray0, intWrapper1, 128, intArray0, intWrapper0);\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index 71 out of bounds for length 71\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.differential.XorBinaryPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test06()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "XorBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "23-61:compress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "117-132:test05": {
                    "start": 117,
                    "end": 132,
                    "body": [
                        "  public void test05()  throws Throwable  {\n",
                        "      XorBinaryPacking xorBinaryPacking0 = new XorBinaryPacking();\n",
                        "      int[] intArray0 = new int[1];\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        xorBinaryPacking0.uncompress0(intArray0, (IntWrapper) null, (-1283), intArray0, intWrapper0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.differential.XorBinaryPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test05()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "XorBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "64-97:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "105-114:test04": {
                    "start": 105,
                    "end": 114,
                    "body": [
                        "  public void test04()  throws Throwable  {\n",
                        "      XorBinaryPacking xorBinaryPacking0 = new XorBinaryPacking();\n",
                        "      int[] intArray0 = new int[9];\n",
                        "      intArray0[1] = (-4088);\n",
                        "      IntWrapper intWrapper0 = IntWrapper.IntWrapper1();\n",
                        "      xorBinaryPacking0.compress0(intArray0, intWrapper0, (-1128), intArray0, intWrapper0);\n",
                        "      xorBinaryPacking0.uncompress0(intArray0, intWrapper0, 1779, intArray0, intWrapper0);\n",
                        "      assertEquals(\"2\", intWrapper0.toString());\n",
                        "      assertArrayEquals(new int[] {(-1024), (-4088), 0, 0, 0, 0, 0, 0, 0}, intArray0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test04()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "XorBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "23-61:compress0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "64-97:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "94-96:toString"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals"
                        ]
                    ]
                },
                "85-102:test03": {
                    "start": 85,
                    "end": 102,
                    "body": [
                        "  public void test03()  throws Throwable  {\n",
                        "      XorBinaryPacking xorBinaryPacking0 = new XorBinaryPacking();\n",
                        "      int[] intArray0 = new int[7];\n",
                        "      intArray0[0] = 302;\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(302);\n",
                        "      IntWrapper intWrapper1 = IntWrapper.IntWrapper1();\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        xorBinaryPacking0.uncompress0(intArray0, intWrapper1, (-2789), intArray0, intWrapper0);\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index 302 out of bounds for length 7\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.differential.XorBinaryPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test03()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "XorBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "64-97:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "64-82:test02": {
                    "start": 64,
                    "end": 82,
                    "body": [
                        "  public void test02()  throws Throwable  {\n",
                        "      XorBinaryPacking xorBinaryPacking0 = new XorBinaryPacking();\n",
                        "      int[] intArray0 = new int[90];\n",
                        "      IntWrapper intWrapper0 = IntWrapper.IntWrapper1();\n",
                        "      int[] intArray1 = new int[4];\n",
                        "      intArray1[0] = 12;\n",
                        "      intArray1[1] = 1048575;\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        xorBinaryPacking0.uncompress0(intArray1, intWrapper0, 1386, intArray0, intWrapper0);\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index 4 out of bounds for length 4\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.BitPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test02()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "XorBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "64-97:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "44-61:test01": {
                    "start": 44,
                    "end": 61,
                    "body": [
                        "  public void test01()  throws Throwable  {\n",
                        "      XorBinaryPacking xorBinaryPacking0 = new XorBinaryPacking();\n",
                        "      int[] intArray0 = new int[3];\n",
                        "      intArray0[1] = (-1268);\n",
                        "      intArray0[2] = 785;\n",
                        "      IntWrapper intWrapper0 = new IntWrapper(0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        xorBinaryPacking0.compress0(intArray0, intWrapper0, 3023, intArray0, intWrapper0);\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index 3 out of bounds for length 3\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.differential.XorBinaryPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test01()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "XorBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "23-61:compress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "21-41:test00": {
                    "start": 21,
                    "end": 41,
                    "body": [
                        "  public void test00()  throws Throwable  {\n",
                        "      XorBinaryPacking xorBinaryPacking0 = new XorBinaryPacking();\n",
                        "      int[] intArray0 = new int[70];\n",
                        "      IntWrapper intWrapper0 = IntWrapper.IntWrapper1();\n",
                        "      int[] intArray1 = new int[8];\n",
                        "      xorBinaryPacking0.uncompress0(intArray1, intWrapper0, (-412), intArray1, intWrapper0);\n",
                        "      intArray1[1] = 1436;\n",
                        "      intArray1[2] = 401;\n",
                        "      intArray1[3] = (-881);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        xorBinaryPacking0.uncompress0(intArray1, intWrapper0, (-881), intArray0, intWrapper0);\n",
                        "        fail(\"Expecting exception: ArrayIndexOutOfBoundsException\");\n",
                        "      \n",
                        "      } catch(ArrayIndexOutOfBoundsException e) {\n",
                        "         //\n",
                        "         // Index 70 out of bounds for length 70\n",
                        "         //\n",
                        "         verifyException(\"me.lemire.integercompression.differential.XorBinaryPacking\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test00()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "XorBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "64-97:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}