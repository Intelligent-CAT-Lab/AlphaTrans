{
    "path": "java_projects/cleaned_final_projects_evosuite/commons-csv/src/test/java/org/apache/commons/csv/CSVParser_ESTest.java",
    "imports": {
        "31-31:import IOException": {
            "start": 31,
            "end": 31,
            "body": [
                "import java.io.IOException;\n"
            ]
        },
        "32-32:import InputStream": {
            "start": 32,
            "end": 32,
            "body": [
                "import java.io.InputStream;\n"
            ]
        },
        "36-36:import Reader": {
            "start": 36,
            "end": 36,
            "body": [
                "import java.io.Reader;\n"
            ]
        },
        "39-39:import Charset": {
            "start": 39,
            "end": 39,
            "body": [
                "import java.nio.charset.Charset;\n"
            ]
        },
        "30-30:import File": {
            "start": 30,
            "end": 30,
            "body": [
                "import java.io.File;\n"
            ]
        },
        "41-41:import Path": {
            "start": 41,
            "end": 41,
            "body": [
                "import java.nio.file.Path;\n"
            ]
        },
        "38-38:import URL": {
            "start": 38,
            "end": 38,
            "body": [
                "import java.net.URL;\n"
            ]
        },
        "33-33:import PipedInputStream": {
            "start": 33,
            "end": 33,
            "body": [
                "import java.io.PipedInputStream;\n"
            ]
        },
        "34-34:import PipedOutputStream": {
            "start": 34,
            "end": 34,
            "body": [
                "import java.io.PipedOutputStream;\n"
            ]
        },
        "35-35:import PipedReader": {
            "start": 35,
            "end": 35,
            "body": [
                "import java.io.PipedReader;\n"
            ]
        },
        "37-37:import UncheckedIOException": {
            "start": 37,
            "end": 37,
            "body": [
                "import java.io.UncheckedIOException;\n"
            ]
        },
        "43-43:import Consumer": {
            "start": 43,
            "end": 43,
            "body": [
                "import java.util.function.Consumer;\n"
            ]
        },
        "40-40:import NoSuchFileException": {
            "start": 40,
            "end": 40,
            "body": [
                "import java.nio.file.NoSuchFileException;\n"
            ]
        },
        "42-42:import NoSuchElementException": {
            "start": 42,
            "end": 42,
            "body": [
                "import java.util.NoSuchElementException;\n"
            ]
        },
        "44-44:import CSVFormat": {
            "start": 44,
            "end": 44,
            "body": [
                "import org.apache.commons.csv.CSVFormat;\n"
            ]
        },
        "48-48:import QuoteMode": {
            "start": 48,
            "end": 48,
            "body": [
                "import org.apache.commons.csv.QuoteMode;\n"
            ]
        },
        "47-47:import DuplicateHeaderMode": {
            "start": 47,
            "end": 47,
            "body": [
                "import org.apache.commons.csv.DuplicateHeaderMode;\n"
            ]
        },
        "45-45:import CSVParser": {
            "start": 45,
            "end": 45,
            "body": [
                "import org.apache.commons.csv.CSVParser;\n"
            ]
        },
        "26-26:import Test": {
            "start": 26,
            "end": 26,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "46-46:import CSVRecord": {
            "start": 46,
            "end": 46,
            "body": [
                "import org.apache.commons.csv.CSVRecord;\n"
            ]
        },
        "50-50:import EvoRunnerParameters": {
            "start": 50,
            "end": 50,
            "body": [
                "import org.evosuite.runtime.EvoRunnerParameters;\n"
            ]
        },
        "54-54:import RunWith": {
            "start": 54,
            "end": 54,
            "body": [
                "import org.junit.runner.RunWith;\n"
            ]
        },
        "49-49:import EvoRunner": {
            "start": 49,
            "end": 49,
            "body": [
                "import org.evosuite.runtime.EvoRunner;\n"
            ]
        },
        "51-51:import ViolatedAssumptionAnswer": {
            "start": 51,
            "end": 51,
            "body": [
                "import org.evosuite.runtime.ViolatedAssumptionAnswer;\n"
            ]
        },
        "52-52:import MockFile": {
            "start": 52,
            "end": 52,
            "body": [
                "import org.evosuite.runtime.mock.java.io.MockFile;\n"
            ]
        },
        "53-53:import MockURL": {
            "start": 53,
            "end": 53,
            "body": [
                "import org.evosuite.runtime.mock.java.net.MockURL;\n"
            ]
        },
        "29-29:import static EvoAssertions.*": {
            "start": 29,
            "end": 29,
            "body": [
                "import static org.evosuite.runtime.EvoAssertions.*;\n"
            ]
        },
        "28-28:import static Mockito.*": {
            "start": 28,
            "end": 28,
            "body": [
                "import static org.evosuite.shaded.org.mockito.Mockito.*;\n"
            ]
        },
        "27-27:import static Assert.*": {
            "start": 27,
            "end": 27,
            "body": [
                "import static org.junit.Assert.*;\n"
            ]
        }
    },
    "classes": {
        "CSVParser_ESTest": {
            "start": 57,
            "end": 57,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "CSVParser_ESTest_scaffolding"
            ],
            "methods": {
                "592-597:test45": {
                    "start": 592,
                    "end": 597,
                    "body": [
                        "  public void test45()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\"vwt<sh@~`,g:5\", cSVFormat0);\n",
                        "      cSVParser0.getRecords();\n",
                        "      assertEquals(1L, cSVParser0.getRecordNumber());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test45()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "596-598:getRecords"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ]
                    ]
                },
                "574-589:test44": {
                    "start": 574,
                    "end": 589,
                    "body": [
                        "  public void test44()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.TDF;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\"E<OF\", cSVFormat0);\n",
                        "      CSVParser.CSVRecordIterator cSVParser_CSVRecordIterator0 = cSVParser0.new CSVRecordIterator();\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        cSVParser_CSVRecordIterator0.remove();\n",
                        "        fail(\"Expecting exception: UnsupportedOperationException\");\n",
                        "      \n",
                        "      } catch(UnsupportedOperationException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.csv.CSVParser$CSVRecordIterator\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test44()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVRecordIterator",
                            "CSVRecordIterator"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVRecordIterator",
                            "182-184:remove"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "566-571:test43": {
                    "start": 566,
                    "end": 571,
                    "body": [
                        "  public void test43()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\") invalid char between encapsulated token and delimiter\", cSVFormat0);\n",
                        "      cSVParser0.getHeaderMapRaw();\n",
                        "      assertEquals(0L, cSVParser0.getRecordNumber());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test43()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "556-558:getHeaderMapRaw"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ]
                    ]
                },
                "558-563:test42": {
                    "start": 558,
                    "end": 563,
                    "body": [
                        "  public void test42()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\"]N\", cSVFormat0);\n",
                        "      cSVParser0.getFirstEndOfLine();\n",
                        "      assertEquals(0L, cSVParser0.getRecordNumber());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test42()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "518-520:getFirstEndOfLine"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ]
                    ]
                },
                "550-555:test41": {
                    "start": 550,
                    "end": 555,
                    "body": [
                        "  public void test41()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\"]N\", cSVFormat0);\n",
                        "      cSVParser0.getCurrentLineNumber();\n",
                        "      assertEquals(0L, cSVParser0.getRecordNumber());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test41()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "508-510:getCurrentLineNumber"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ]
                    ]
                },
                "542-547:test40": {
                    "start": 542,
                    "end": 547,
                    "body": [
                        "  public void test40()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.newFormat('F');\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\"\", cSVFormat0);\n",
                        "      cSVParser0.getHeaderNames();\n",
                        "      assertEquals(0L, cSVParser0.getRecordNumber());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test40()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1217-1239:newFormat"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "571-573:getHeaderNames"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ]
                    ]
                },
                "532-539:test39": {
                    "start": 532,
                    "end": 539,
                    "body": [
                        "  public void test39()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n",
                        "      MockFile mockFile0 = new MockFile(\"\");\n",
                        "      Path path0 = mockFile0.toPath();\n",
                        "      Charset charset0 = Charset.defaultCharset();\n",
                        "      CSVParser cSVParser0 = CSVParser.parse2(path0, charset0, cSVFormat0);\n",
                        "      assertEquals(0L, cSVParser0.getRecordNumber());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test39()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "/org/evosuite/runtime/mock/java/io/MockFile",
                            "MockFile"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "toPath"
                        ],
                        [
                            "library",
                            "java.base/java/nio/charset/Charset",
                            "defaultCharset"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "256-261:parse2"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ]
                    ]
                },
                "515-529:test38": {
                    "start": 515,
                    "end": 529,
                    "body": [
                        "  public void test38()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n",
                        "      Charset charset0 = Charset.defaultCharset();\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        CSVParser.parse0((File) null, charset0, cSVFormat0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // file\n",
                        "         //\n",
                        "         verifyException(\"java.util.Objects\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test38()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/nio/charset/Charset",
                            "defaultCharset"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "213-217:parse0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "507-512:test37": {
                    "start": 507,
                    "end": 512,
                    "body": [
                        "  public void test37()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\"aJ\", cSVFormat0);\n",
                        "      cSVParser0.getHeaderComment();\n",
                        "      assertEquals(0L, cSVParser0.getRecordNumber());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test37()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "528-530:getHeaderComment"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ]
                    ]
                },
                "490-504:test36": {
                    "start": 490,
                    "end": 504,
                    "body": [
                        "  public void test36()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n",
                        "      Charset charset0 = Charset.defaultCharset();\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        CSVParser.parse5((URL) null, charset0, cSVFormat0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // url\n",
                        "         //\n",
                        "         verifyException(\"java.util.Objects\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test36()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/nio/charset/Charset",
                            "defaultCharset"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "313-320:parse5"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "481-487:test35": {
                    "start": 481,
                    "end": 487,
                    "body": [
                        "  public void test35()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n",
                        "      PipedReader pipedReader0 = new PipedReader();\n",
                        "      CSVParser cSVParser0 = CSVParser.CSVParser1(pipedReader0, cSVFormat0);\n",
                        "      cSVParser0.getTrailerComment();\n",
                        "      assertEquals(0L, cSVParser0.getRecordNumber());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test35()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/PipedReader",
                            "PipedReader"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "377-380:CSVParser1"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "607-609:getTrailerComment"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ]
                    ]
                },
                "473-478:test34": {
                    "start": 473,
                    "end": 478,
                    "body": [
                        "  public void test34()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\"]N\", cSVFormat0);\n",
                        "      long long0 = cSVParser0.getRecordNumber();\n",
                        "      assertEquals(0L, long0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test34()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ]
                    ]
                },
                "464-470:test33": {
                    "start": 464,
                    "end": 470,
                    "body": [
                        "  public void test33()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\"]N\", cSVFormat0);\n",
                        "      cSVParser0.close();\n",
                        "      cSVParser0.getRecords();\n",
                        "      assertEquals(0L, cSVParser0.getRecordNumber());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test33()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "413-417:close"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "596-598:getRecords"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ]
                    ]
                },
                "453-461:test32": {
                    "start": 453,
                    "end": 461,
                    "body": [
                        "  public void test32()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\"L\u007f}F\", cSVFormat0);\n",
                        "      CSVParser.CSVRecordIterator cSVParser_CSVRecordIterator0 = cSVParser0.new CSVRecordIterator();\n",
                        "      cSVParser_CSVRecordIterator0.hasNext();\n",
                        "      boolean boolean0 = cSVParser_CSVRecordIterator0.hasNext();\n",
                        "      assertEquals(1L, cSVParser0.getRecordNumber());\n",
                        "      assertTrue(boolean0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test32()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVRecordIterator",
                            "CSVRecordIterator"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVRecordIterator",
                            "152-161:hasNext"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ]
                    ]
                },
                "434-450:test31": {
                    "start": 434,
                    "end": 450,
                    "body": [
                        "  public void test31()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\")\\\"MF;N=\", cSVFormat0);\n",
                        "      cSVParser0.close();\n",
                        "      CSVParser.CSVRecordIterator cSVParser_CSVRecordIterator0 = cSVParser0.new CSVRecordIterator();\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        cSVParser_CSVRecordIterator0.next();\n",
                        "        fail(\"Expecting exception: NoSuchElementException\");\n",
                        "      \n",
                        "      } catch(NoSuchElementException e) {\n",
                        "         //\n",
                        "         // CSVParser has been closed\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.csv.CSVParser$CSVRecordIterator\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test31()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVRecordIterator",
                            "CSVRecordIterator"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "413-417:close"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVRecordIterator",
                            "164-179:next"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "424-431:test30": {
                    "start": 424,
                    "end": 431,
                    "body": [
                        "  public void test30()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\"#C2rpb%\", cSVFormat0);\n",
                        "      CSVParser.CSVRecordIterator cSVParser_CSVRecordIterator0 = cSVParser0.new CSVRecordIterator();\n",
                        "      CSVRecord cSVRecord0 = cSVParser_CSVRecordIterator0.next();\n",
                        "      assertEquals(1L, cSVParser0.getRecordNumber());\n",
                        "      assertEquals(0L, cSVRecord0.getCharacterPosition());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test30()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVRecordIterator",
                            "CSVRecordIterator"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVRecordIterator",
                            "164-179:next"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVRecord",
                            "CSVRecord",
                            "138-140:getCharacterPosition"
                        ]
                    ]
                },
                "405-421:test29": {
                    "start": 405,
                    "end": 421,
                    "body": [
                        "  public void test29()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\"#C2rpb%\", cSVFormat0);\n",
                        "      cSVParser0.getRecords();\n",
                        "      CSVParser.CSVRecordIterator cSVParser_CSVRecordIterator0 = cSVParser0.new CSVRecordIterator();\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        cSVParser_CSVRecordIterator0.next();\n",
                        "        fail(\"Expecting exception: NoSuchElementException\");\n",
                        "      \n",
                        "      } catch(NoSuchElementException e) {\n",
                        "         //\n",
                        "         // No more CSV records available\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.csv.CSVParser$CSVRecordIterator\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test29()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVRecordIterator",
                            "CSVRecordIterator"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "596-598:getRecords"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVRecordIterator",
                            "164-179:next"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "397-402:test28": {
                    "start": 397,
                    "end": 402,
                    "body": [
                        "  public void test28()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.TDF;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\" \", cSVFormat0);\n",
                        "      cSVParser0.getRecords();\n",
                        "      assertEquals(1L, cSVParser0.getRecordNumber());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test28()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "596-598:getRecords"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ]
                    ]
                },
                "389-394:test27": {
                    "start": 389,
                    "end": 394,
                    "body": [
                        "  public void test27()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\"L\u007f}F\", cSVFormat0);\n",
                        "      cSVParser0.getHeaderMap();\n",
                        "      assertEquals(0L, cSVParser0.getRecordNumber());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test27()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "542-549:getHeaderMap"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ]
                    ]
                },
                "375-386:test26": {
                    "start": 375,
                    "end": 386,
                    "body": [
                        "  public void test26()  throws Throwable  {\n",
                        "      Character character0 = Character.valueOf('(');\n",
                        "      CSVFormat.Builder cSVFormat_Builder0 = CSVFormat.Builder.create0();\n",
                        "      CSVFormat.Builder cSVFormat_Builder1 = cSVFormat_Builder0.setNullString(\"]N\");\n",
                        "      QuoteMode quoteMode0 = QuoteMode.NONE;\n",
                        "      DuplicateHeaderMode duplicateHeaderMode0 = DuplicateHeaderMode.ALLOW_EMPTY;\n",
                        "      String[] stringArray0 = new String[6];\n",
                        "      CSVFormat cSVFormat0 = new CSVFormat((-711), true, true, \"]N\", \"A header name is missing in \", character0, true, true, cSVFormat_Builder1, character0, true, character0, quoteMode0, true, duplicateHeaderMode0, stringArray0, true, true, stringArray0, \"A header name is missing in \");\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\"]N\", cSVFormat0);\n",
                        "      cSVParser0.getRecords();\n",
                        "      assertEquals(1L, cSVParser0.getRecordNumber());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test26()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Character",
                            "valueOf"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "171-173:create0"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "574-578:setNullString"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1317-1383:CSVFormat"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "596-598:getRecords"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ]
                    ]
                },
                "366-372:test25": {
                    "start": 366,
                    "end": 372,
                    "body": [
                        "  public void test25()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\")\\\"MF;N=\", cSVFormat0);\n",
                        "      boolean boolean0 = cSVParser0.hasHeaderComment();\n",
                        "      assertEquals(0L, cSVParser0.getRecordNumber());\n",
                        "      assertFalse(boolean0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test25()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "637-639:hasHeaderComment"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ]
                    ]
                },
                "357-363:test24": {
                    "start": 357,
                    "end": 363,
                    "body": [
                        "  public void test24()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\"L\u007f}F\", cSVFormat0);\n",
                        "      boolean boolean0 = cSVParser0.hasTrailerComment();\n",
                        "      assertFalse(boolean0);\n",
                        "      assertEquals(0L, cSVParser0.getRecordNumber());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test24()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "649-651:hasTrailerComment"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ]
                    ]
                },
                "348-354:test23": {
                    "start": 348,
                    "end": 354,
                    "body": [
                        "  public void test23()  throws Throwable  {\n",
                        "      Reader reader0 = Reader.nullReader();\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n",
                        "      CSVParser cSVParser0 = new CSVParser(reader0, cSVFormat0, 0L, 0L);\n",
                        "      long long0 = cSVParser0.getRecordNumber();\n",
                        "      assertEquals((-1L), long0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test23()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/Reader",
                            "nullReader"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "360-375:CSVParser"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ]
                    ]
                },
                "340-345:test22": {
                    "start": 340,
                    "end": 345,
                    "body": [
                        "  public void test22()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.TDF;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\"E<OF\", cSVFormat0);\n",
                        "      cSVParser0.stream();\n",
                        "      assertEquals(0L, cSVParser0.getRecordNumber());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test22()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "763-766:stream"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ]
                    ]
                },
                "330-337:test21": {
                    "start": 330,
                    "end": 337,
                    "body": [
                        "  public void test21()  throws Throwable  {\n",
                        "      Reader reader0 = Reader.nullReader();\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n",
                        "      CSVParser cSVParser0 = new CSVParser(reader0, cSVFormat0, 4086L, 4086L);\n",
                        "      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n",
                        "      cSVParser0.forEach(consumer0);\n",
                        "      assertEquals(4085L, cSVParser0.getRecordNumber());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test21()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/Reader",
                            "nullReader"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "360-375:CSVParser"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Iterable",
                            "forEach"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ]
                    ]
                },
                "322-327:test20": {
                    "start": 322,
                    "end": 327,
                    "body": [
                        "  public void test20()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\"N\", cSVFormat0);\n",
                        "      cSVParser0.isClosed();\n",
                        "      assertEquals(0L, cSVParser0.getRecordNumber());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test20()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "658-660:isClosed"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ]
                    ]
                },
                "312-319:test19": {
                    "start": 312,
                    "end": 319,
                    "body": [
                        "  public void test19()  throws Throwable  {\n",
                        "      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();\n",
                        "      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);\n",
                        "      Charset charset0 = Charset.defaultCharset();\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse1(pipedInputStream0, charset0, cSVFormat0);\n",
                        "      assertEquals(0L, cSVParser0.getRecordNumber());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test19()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/PipedOutputStream",
                            "PipedOutputStream"
                        ],
                        [
                            "library",
                            "java.base/java/io/PipedInputStream",
                            "PipedInputStream"
                        ],
                        [
                            "library",
                            "java.base/java/nio/charset/Charset",
                            "defaultCharset"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "235-241:parse1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ]
                    ]
                },
                "304-309:test18": {
                    "start": 304,
                    "end": 309,
                    "body": [
                        "  public void test18()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n",
                        "      Reader reader0 = Reader.nullReader();\n",
                        "      CSVParser cSVParser0 = CSVParser.parse3(reader0, cSVFormat0);\n",
                        "      assertEquals(0L, cSVParser0.getRecordNumber());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test18()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/Reader",
                            "nullReader"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "277-279:parse3"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ]
                    ]
                },
                "288-301:test17": {
                    "start": 288,
                    "end": 301,
                    "body": [
                        "  public void test17()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.ORACLE;\n",
                        "      CSVParser cSVParser0 = null;\n",
                        "      try {\n",
                        "        cSVParser0 = new CSVParser((Reader) null, cSVFormat0, 0L, (-554L));\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // reader\n",
                        "         //\n",
                        "         verifyException(\"java.util.Objects\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test17()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "360-375:CSVParser"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "272-285:test16": {
                    "start": 272,
                    "end": 285,
                    "body": [
                        "  public void test16()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        CSVParser.CSVParser1((Reader) null, cSVFormat0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // reader\n",
                        "         //\n",
                        "         verifyException(\"java.util.Objects\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test16()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "377-380:CSVParser1"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "254-269:test15": {
                    "start": 254,
                    "end": 269,
                    "body": [
                        "  public void test15()  throws Throwable  {\n",
                        "      PipedReader pipedReader0 = new PipedReader();\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n",
                        "      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        cSVParser0.getRecords();\n",
                        "        fail(\"Expecting exception: UncheckedIOException\");\n",
                        "      \n",
                        "      } catch(UncheckedIOException e) {\n",
                        "         //\n",
                        "         // IOException reading next record: java.io.IOException: Pipe not connected\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.csv.CSVParser$CSVRecordIterator\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test15()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/PipedReader",
                            "PipedReader"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1798-1800:parse"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "596-598:getRecords"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "237-251:test14": {
                    "start": 237,
                    "end": 251,
                    "body": [
                        "  public void test14()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n",
                        "      PipedReader pipedReader0 = new PipedReader();\n",
                        "      CSVParser cSVParser0 = CSVParser.CSVParser1(pipedReader0, cSVFormat0);\n",
                        "      try { \n",
                        "        cSVParser0.nextRecord();\n",
                        "        fail(\"Expecting exception: IOException\");\n",
                        "      \n",
                        "      } catch(IOException e) {\n",
                        "         //\n",
                        "         // Pipe not connected\n",
                        "         //\n",
                        "         verifyException(\"java.io.PipedReader\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test14()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/PipedReader",
                            "PipedReader"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "377-380:CSVParser1"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "700-752:nextRecord"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "224-234:test13": {
                    "start": 224,
                    "end": 234,
                    "body": [
                        "  public void test13()  throws Throwable  {\n",
                        "      MockFile mockFile0 = new MockFile(\"\\fe_\");\n",
                        "      Charset charset0 = Charset.defaultCharset();\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.TDF;\n",
                        "      try { \n",
                        "        CSVParser.parse0(mockFile0, charset0, cSVFormat0);\n",
                        "        fail(\"Expecting exception: NoSuchFileException\");\n",
                        "      \n",
                        "      } catch(NoSuchFileException e) {\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test13()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "/org/evosuite/runtime/mock/java/io/MockFile",
                            "MockFile"
                        ],
                        [
                            "library",
                            "java.base/java/nio/charset/Charset",
                            "defaultCharset"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "213-217:parse0"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ]
                    ]
                },
                "207-221:test12": {
                    "start": 207,
                    "end": 221,
                    "body": [
                        "  public void test12()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n",
                        "      Charset charset0 = Charset.defaultCharset();\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        CSVParser.parse1((InputStream) null, charset0, cSVFormat0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // inputStream\n",
                        "         //\n",
                        "         verifyException(\"java.util.Objects\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test12()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/nio/charset/Charset",
                            "defaultCharset"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "235-241:parse1"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "190-204:test11": {
                    "start": 190,
                    "end": 204,
                    "body": [
                        "  public void test11()  throws Throwable  {\n",
                        "      Charset charset0 = Charset.defaultCharset();\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        CSVParser.parse2((Path) null, charset0, cSVFormat0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // path\n",
                        "         //\n",
                        "         verifyException(\"java.util.Objects\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test11()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/nio/charset/Charset",
                            "defaultCharset"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "256-261:parse2"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "176-187:test10": {
                    "start": 176,
                    "end": 187,
                    "body": [
                        "  public void test10()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n",
                        "      MockFile mockFile0 = new MockFile(\"&{?cjN08V<.\");\n",
                        "      Path path0 = mockFile0.toPath();\n",
                        "      Charset charset0 = Charset.defaultCharset();\n",
                        "      try { \n",
                        "        CSVParser.parse2(path0, charset0, cSVFormat0);\n",
                        "        fail(\"Expecting exception: NoSuchFileException\");\n",
                        "      \n",
                        "      } catch(NoSuchFileException e) {\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test10()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "/org/evosuite/runtime/mock/java/io/MockFile",
                            "MockFile"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "toPath"
                        ],
                        [
                            "library",
                            "java.base/java/nio/charset/Charset",
                            "defaultCharset"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "256-261:parse2"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ]
                    ]
                },
                "160-173:test09": {
                    "start": 160,
                    "end": 173,
                    "body": [
                        "  public void test09()  throws Throwable  {\n",
                        "      PipedReader pipedReader0 = new PipedReader();\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        CSVParser.parse3(pipedReader0, (CSVFormat) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // format\n",
                        "         //\n",
                        "         verifyException(\"java.util.Objects\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test09()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/PipedReader",
                            "PipedReader"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "277-279:parse3"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "144-157:test08": {
                    "start": 144,
                    "end": 157,
                    "body": [
                        "  public void test08()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.TDF;\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        CSVParser.parse4((String) null, cSVFormat0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // string\n",
                        "         //\n",
                        "         verifyException(\"java.util.Objects\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test08()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "127-141:test07": {
                    "start": 127,
                    "end": 141,
                    "body": [
                        "  public void test07()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.TDF;\n",
                        "      URL uRL0 = MockURL.getHttpExample();\n",
                        "      Charset charset0 = Charset.defaultCharset();\n",
                        "      try { \n",
                        "        CSVParser.parse5(uRL0, charset0, cSVFormat0);\n",
                        "        fail(\"Expecting exception: IOException\");\n",
                        "      \n",
                        "      } catch(IOException e) {\n",
                        "         //\n",
                        "         // Could not find: www.someFakeButWellFormedURL.org\n",
                        "         //\n",
                        "         verifyException(\"org.evosuite.runtime.mock.java.net.EvoHttpURLConnection\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test07()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "/org/evosuite/runtime/mock/java/net/MockURL",
                            "getHttpExample"
                        ],
                        [
                            "library",
                            "java.base/java/nio/charset/Charset",
                            "defaultCharset"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "313-320:parse5"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "116-124:test06": {
                    "start": 116,
                    "end": 124,
                    "body": [
                        "  public void test06()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\"]N\", cSVFormat0);\n",
                        "      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n",
                        "      cSVParser0.forEach(consumer0);\n",
                        "      long long0 = cSVParser0.getCurrentLineNumber();\n",
                        "      assertEquals(1L, cSVParser0.getRecordNumber());\n",
                        "      assertEquals(1L, long0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test06()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "508-510:getCurrentLineNumber"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Iterable",
                            "forEach"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ]
                    ]
                },
                "106-113:test05": {
                    "start": 106,
                    "end": 113,
                    "body": [
                        "  public void test05()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\"]N\", cSVFormat0);\n",
                        "      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n",
                        "      cSVParser0.forEach(consumer0);\n",
                        "      long long0 = cSVParser0.getRecordNumber();\n",
                        "      assertEquals(1L, long0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test05()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Iterable",
                            "forEach"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ]
                    ]
                },
                "96-103:test04": {
                    "start": 96,
                    "end": 103,
                    "body": [
                        "  public void test04()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\"N\", cSVFormat0);\n",
                        "      cSVParser0.close();\n",
                        "      boolean boolean0 = cSVParser0.isClosed();\n",
                        "      assertTrue(boolean0);\n",
                        "      assertEquals(0L, cSVParser0.getRecordNumber());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test04()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "658-660:isClosed"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "413-417:close"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ]
                    ]
                },
                "87-93:test03": {
                    "start": 87,
                    "end": 93,
                    "body": [
                        "  public void test03()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n",
                        "      PipedReader pipedReader0 = new PipedReader();\n",
                        "      CSVParser cSVParser0 = CSVParser.CSVParser1(pipedReader0, cSVFormat0);\n",
                        "      cSVParser0.iterator();\n",
                        "      assertEquals(0L, cSVParser0.getRecordNumber());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test03()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/PipedReader",
                            "PipedReader"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "377-380:CSVParser1"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "689-691:iterator"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ]
                    ]
                },
                "79-84:test02": {
                    "start": 79,
                    "end": 84,
                    "body": [
                        "  public void test02()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\"N\", cSVFormat0);\n",
                        "      cSVParser0.nextRecord();\n",
                        "      assertEquals(1L, cSVParser0.getRecordNumber());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test02()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "700-752:nextRecord"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ]
                    ]
                },
                "69-76:test01": {
                    "start": 69,
                    "end": 76,
                    "body": [
                        "  public void test01()  throws Throwable  {\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse4(\"L\u007f}F\", cSVFormat0);\n",
                        "      CSVParser.CSVRecordIterator cSVParser_CSVRecordIterator0 = cSVParser0.new CSVRecordIterator();\n",
                        "      cSVParser_CSVRecordIterator0.hasNext();\n",
                        "      cSVParser0.nextRecord();\n",
                        "      assertEquals(1L, cSVParser0.getRecordNumber());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test01()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "291-296:parse4"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVRecordIterator",
                            "CSVRecordIterator"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVRecordIterator",
                            "152-161:hasNext"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "700-752:nextRecord"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ]
                    ]
                },
                "60-66:test00": {
                    "start": 60,
                    "end": 66,
                    "body": [
                        "  public void test00()  throws Throwable  {\n",
                        "      MockFile mockFile0 = new MockFile(\"\");\n",
                        "      Charset charset0 = Charset.defaultCharset();\n",
                        "      CSVFormat cSVFormat0 = CSVFormat.TDF;\n",
                        "      CSVParser cSVParser0 = CSVParser.parse0(mockFile0, charset0, cSVFormat0);\n",
                        "      assertEquals(0L, cSVParser0.getRecordNumber());\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test00()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "/org/evosuite/runtime/mock/java/io/MockFile",
                            "MockFile"
                        ],
                        [
                            "library",
                            "java.base/java/nio/charset/Charset",
                            "defaultCharset"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "213-217:parse0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "583-585:getRecordNumber"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}