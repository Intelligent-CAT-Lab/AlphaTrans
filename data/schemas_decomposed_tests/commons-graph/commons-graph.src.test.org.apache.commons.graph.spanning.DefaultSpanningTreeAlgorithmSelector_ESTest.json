{
    "path": "java_projects/cleaned_final_projects_evosuite/commons-graph/src/test/java/org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector_ESTest.java",
    "imports": {
        "14-14:import List": {
            "start": 14,
            "end": 14,
            "body": [
                "import java.util.List;\n"
            ]
        },
        "12-12:import BigInteger": {
            "start": 12,
            "end": 12,
            "body": [
                "import java.math.BigInteger;\n"
            ]
        },
        "13-13:import LinkedList": {
            "start": 13,
            "end": 13,
            "body": [
                "import java.util.LinkedList;\n"
            ]
        },
        "15-15:import Graph": {
            "start": 15,
            "end": 15,
            "body": [
                "import org.apache.commons.graph.Graph;\n"
            ]
        },
        "22-22:import UndirectedMutableGraph": {
            "start": 22,
            "end": 22,
            "body": [
                "import org.apache.commons.graph.model.UndirectedMutableGraph;\n"
            ]
        },
        "18-18:import DirectedMutableGraph": {
            "start": 18,
            "end": 18,
            "body": [
                "import org.apache.commons.graph.model.DirectedMutableGraph;\n"
            ]
        },
        "31-31:import EvoRunnerParameters": {
            "start": 31,
            "end": 31,
            "body": [
                "import org.evosuite.runtime.EvoRunnerParameters;\n"
            ]
        },
        "33-33:import RunWith": {
            "start": 33,
            "end": 33,
            "body": [
                "import org.junit.runner.RunWith;\n"
            ]
        },
        "30-30:import EvoRunner": {
            "start": 30,
            "end": 30,
            "body": [
                "import org.evosuite.runtime.EvoRunner;\n"
            ]
        },
        "8-8:import Test": {
            "start": 8,
            "end": 8,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "16-16:import Mapper": {
            "start": 16,
            "end": 16,
            "body": [
                "import org.apache.commons.graph.Mapper;\n"
            ]
        },
        "17-17:import SpanningTree": {
            "start": 17,
            "end": 17,
            "body": [
                "import org.apache.commons.graph.SpanningTree;\n"
            ]
        },
        "27-27:import OrderedMonoid": {
            "start": 27,
            "end": 27,
            "body": [
                "import org.apache.commons.graph.weight.OrderedMonoid;\n"
            ]
        },
        "26-26:import Monoid": {
            "start": 26,
            "end": 26,
            "body": [
                "import org.apache.commons.graph.weight.Monoid;\n"
            ]
        },
        "19-19:import InMemoryPath": {
            "start": 19,
            "end": 19,
            "body": [
                "import org.apache.commons.graph.model.InMemoryPath;\n"
            ]
        },
        "20-20:import InMemoryWeightedPath": {
            "start": 20,
            "end": 20,
            "body": [
                "import org.apache.commons.graph.model.InMemoryWeightedPath;\n"
            ]
        },
        "21-21:import RevertedGraph": {
            "start": 21,
            "end": 21,
            "body": [
                "import org.apache.commons.graph.model.RevertedGraph;\n"
            ]
        },
        "23-23:import DefaultSpanningTreeAlgorithmSelector": {
            "start": 23,
            "end": 23,
            "body": [
                "import org.apache.commons.graph.spanning.DefaultSpanningTreeAlgorithmSelector;\n"
            ]
        },
        "24-24:import ReverseDeleteGraph": {
            "start": 24,
            "end": 24,
            "body": [
                "import org.apache.commons.graph.spanning.ReverseDeleteGraph;\n"
            ]
        },
        "25-25:import SuperVertex": {
            "start": 25,
            "end": 25,
            "body": [
                "import org.apache.commons.graph.spanning.SuperVertex;\n"
            ]
        },
        "28-28:import BigIntegerWeightBaseOperations": {
            "start": 28,
            "end": 28,
            "body": [
                "import org.apache.commons.graph.weight.primitive.BigIntegerWeightBaseOperations;\n"
            ]
        },
        "29-29:import FloatWeightBaseOperations": {
            "start": 29,
            "end": 29,
            "body": [
                "import org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations;\n"
            ]
        },
        "32-32:import ViolatedAssumptionAnswer": {
            "start": 32,
            "end": 32,
            "body": [
                "import org.evosuite.runtime.ViolatedAssumptionAnswer;\n"
            ]
        },
        "11-11:import static EvoAssertions.*": {
            "start": 11,
            "end": 11,
            "body": [
                "import static org.evosuite.runtime.EvoAssertions.*;\n"
            ]
        },
        "10-10:import static Mockito.*": {
            "start": 10,
            "end": 10,
            "body": [
                "import static org.evosuite.shaded.org.mockito.Mockito.*;\n"
            ]
        },
        "9-9:import static Assert.*": {
            "start": 9,
            "end": 9,
            "body": [
                "import static org.junit.Assert.*;\n"
            ]
        }
    },
    "classes": {
        "DefaultSpanningTreeAlgorithmSelector_ESTest": {
            "start": 36,
            "end": 36,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "DefaultSpanningTreeAlgorithmSelector_ESTest_scaffolding"
            ],
            "methods": {
                "315-325:test14": {
                    "start": 315,
                    "end": 325,
                    "body": [
                        "  public void test14()  throws Throwable  {\n",
                        "      UndirectedMutableGraph<FloatWeightBaseOperations, FloatWeightBaseOperations> undirectedMutableGraph0 = new UndirectedMutableGraph<FloatWeightBaseOperations, FloatWeightBaseOperations>();\n",
                        "      FloatWeightBaseOperations floatWeightBaseOperations0 = new FloatWeightBaseOperations();\n",
                        "      Mapper<FloatWeightBaseOperations, FloatWeightBaseOperations> mapper0 = (Mapper<FloatWeightBaseOperations, FloatWeightBaseOperations>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      undirectedMutableGraph0.addVertex(floatWeightBaseOperations0);\n",
                        "      DefaultSpanningTreeAlgorithmSelector<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations> defaultSpanningTreeAlgorithmSelector0 = new DefaultSpanningTreeAlgorithmSelector<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations>(undirectedMutableGraph0, mapper0, floatWeightBaseOperations0);\n",
                        "      OrderedMonoid<FloatWeightBaseOperations> orderedMonoid0 = (OrderedMonoid<FloatWeightBaseOperations>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null).when(orderedMonoid0).identity();\n",
                        "      SpanningTree<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations> spanningTree0 = defaultSpanningTreeAlgorithmSelector0.applyingBoruvkaAlgorithm(orderedMonoid0);\n",
                        "      assertNotNull(spanningTree0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test14()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<FloatWeightBaseOperations,FloatWeightBaseOperations>"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations",
                            "FloatWeightBaseOperations",
                            "FloatWeightBaseOperations"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "DefaultSpanningTreeAlgorithmSelector<FloatWeightBaseOperations,FloatWeightBaseOperations,FloatWeightBaseOperations>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "applyingBoruvkaAlgorithm"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ]
                    ]
                },
                "291-312:test13": {
                    "start": 291,
                    "end": 312,
                    "body": [
                        "  public void test13()  throws Throwable  {\n",
                        "      UndirectedMutableGraph<FloatWeightBaseOperations, FloatWeightBaseOperations> undirectedMutableGraph0 = new UndirectedMutableGraph<FloatWeightBaseOperations, FloatWeightBaseOperations>();\n",
                        "      FloatWeightBaseOperations floatWeightBaseOperations0 = new FloatWeightBaseOperations();\n",
                        "      Mapper<FloatWeightBaseOperations, FloatWeightBaseOperations> mapper0 = (Mapper<FloatWeightBaseOperations, FloatWeightBaseOperations>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      FloatWeightBaseOperations floatWeightBaseOperations1 = new FloatWeightBaseOperations();\n",
                        "      undirectedMutableGraph0.addVertex(floatWeightBaseOperations1);\n",
                        "      undirectedMutableGraph0.addVertex(floatWeightBaseOperations0);\n",
                        "      DefaultSpanningTreeAlgorithmSelector<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations> defaultSpanningTreeAlgorithmSelector0 = new DefaultSpanningTreeAlgorithmSelector<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations>(undirectedMutableGraph0, mapper0, floatWeightBaseOperations0);\n",
                        "      OrderedMonoid<FloatWeightBaseOperations> orderedMonoid0 = (OrderedMonoid<FloatWeightBaseOperations>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null).when(orderedMonoid0).identity();\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultSpanningTreeAlgorithmSelector0.applyingBoruvkaAlgorithm(orderedMonoid0);\n",
                        "        fail(\"Expecting exception: IllegalStateException\");\n",
                        "      \n",
                        "      } catch(IllegalStateException e) {\n",
                        "         //\n",
                        "         // unconnected graph\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.utils.Assertions\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test13()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<FloatWeightBaseOperations,FloatWeightBaseOperations>"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations",
                            "FloatWeightBaseOperations",
                            "FloatWeightBaseOperations"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "DefaultSpanningTreeAlgorithmSelector<FloatWeightBaseOperations,FloatWeightBaseOperations,FloatWeightBaseOperations>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "applyingBoruvkaAlgorithm"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "274-288:test12": {
                    "start": 274,
                    "end": 288,
                    "body": [
                        "  public void test12()  throws Throwable  {\n",
                        "      DirectedMutableGraph<BigInteger, BigInteger> directedMutableGraph0 = new DirectedMutableGraph<BigInteger, BigInteger>();\n",
                        "      BigInteger bigInteger0 = BigInteger.ONE;\n",
                        "      List<BigInteger> list0 = List.of(bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0);\n",
                        "      LinkedList<BigInteger> linkedList0 = new LinkedList<BigInteger>();\n",
                        "      ReverseDeleteGraph<BigInteger, BigInteger> reverseDeleteGraph0 = new ReverseDeleteGraph<BigInteger, BigInteger>(directedMutableGraph0, list0, linkedList0);\n",
                        "      Mapper<BigInteger, FloatWeightBaseOperations> mapper0 = (Mapper<BigInteger, FloatWeightBaseOperations>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(mapper0).map(any(java.math.BigInteger.class));\n",
                        "      DefaultSpanningTreeAlgorithmSelector<BigInteger, FloatWeightBaseOperations, BigInteger> defaultSpanningTreeAlgorithmSelector0 = new DefaultSpanningTreeAlgorithmSelector<BigInteger, FloatWeightBaseOperations, BigInteger>(reverseDeleteGraph0, mapper0, bigInteger0);\n",
                        "      OrderedMonoid<FloatWeightBaseOperations> orderedMonoid0 = (OrderedMonoid<FloatWeightBaseOperations>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn(0, 0, 0, 0, 0).when(orderedMonoid0).compare(any(org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations.class) , any(org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations.class));\n",
                        "      doReturn((Object) null).when(orderedMonoid0).identity();\n",
                        "      SpanningTree<BigInteger, BigInteger, FloatWeightBaseOperations> spanningTree0 = defaultSpanningTreeAlgorithmSelector0.applyingKruskalAlgorithm(orderedMonoid0);\n",
                        "      assertNotNull(spanningTree0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test12()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BigInteger,BigInteger>"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "of"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<BigInteger>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/ReverseDeleteGraph",
                            "ReverseDeleteGraph<BigInteger,BigInteger>"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "DefaultSpanningTreeAlgorithmSelector<BigInteger,FloatWeightBaseOperations,BigInteger>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "applyingKruskalAlgorithm"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Mapper",
                            "map"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/ArgumentMatchers",
                            "any"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "java.base/java/util/Comparator",
                            "compare"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ]
                    ]
                },
                "246-271:test11": {
                    "start": 246,
                    "end": 271,
                    "body": [
                        "  public void test11()  throws Throwable  {\n",
                        "      DirectedMutableGraph<BigInteger, BigInteger> directedMutableGraph0 = new DirectedMutableGraph<BigInteger, BigInteger>();\n",
                        "      BigInteger bigInteger0 = BigInteger.ONE;\n",
                        "      List<BigInteger> list0 = List.of(bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0);\n",
                        "      LinkedList<BigInteger> linkedList0 = new LinkedList<BigInteger>();\n",
                        "      ReverseDeleteGraph<BigInteger, BigInteger> reverseDeleteGraph0 = new ReverseDeleteGraph<BigInteger, BigInteger>(directedMutableGraph0, list0, linkedList0);\n",
                        "      FloatWeightBaseOperations floatWeightBaseOperations0 = new FloatWeightBaseOperations();\n",
                        "      Mapper<BigInteger, FloatWeightBaseOperations> mapper0 = (Mapper<BigInteger, FloatWeightBaseOperations>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn(floatWeightBaseOperations0, floatWeightBaseOperations0, floatWeightBaseOperations0, floatWeightBaseOperations0, floatWeightBaseOperations0).when(mapper0).map(any(java.math.BigInteger.class));\n",
                        "      DefaultSpanningTreeAlgorithmSelector<BigInteger, FloatWeightBaseOperations, BigInteger> defaultSpanningTreeAlgorithmSelector0 = new DefaultSpanningTreeAlgorithmSelector<BigInteger, FloatWeightBaseOperations, BigInteger>(reverseDeleteGraph0, mapper0, bigInteger0);\n",
                        "      directedMutableGraph0.addVertex(bigInteger0);\n",
                        "      OrderedMonoid<FloatWeightBaseOperations> orderedMonoid0 = (OrderedMonoid<FloatWeightBaseOperations>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn(0, 4, 0, 4, 1).when(orderedMonoid0).compare(any(org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations.class) , any(org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations.class));\n",
                        "      doReturn(floatWeightBaseOperations0).when(orderedMonoid0).identity();\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultSpanningTreeAlgorithmSelector0.applyingKruskalAlgorithm(orderedMonoid0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.spanning.DefaultSpanningTreeAlgorithmSelector\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test11()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BigInteger,BigInteger>"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "of"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<BigInteger>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/ReverseDeleteGraph",
                            "ReverseDeleteGraph<BigInteger,BigInteger>"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations",
                            "FloatWeightBaseOperations",
                            "FloatWeightBaseOperations"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "DefaultSpanningTreeAlgorithmSelector<BigInteger,FloatWeightBaseOperations,BigInteger>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Mapper",
                            "map"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/ArgumentMatchers",
                            "any"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/Comparator",
                            "compare"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "applyingKruskalAlgorithm"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "233-243:test10": {
                    "start": 233,
                    "end": 243,
                    "body": [
                        "  public void test10()  throws Throwable  {\n",
                        "      DirectedMutableGraph<BigInteger, BigInteger> directedMutableGraph0 = new DirectedMutableGraph<BigInteger, BigInteger>();\n",
                        "      BigInteger bigInteger0 = BigInteger.ZERO;\n",
                        "      directedMutableGraph0.addVertex(bigInteger0);\n",
                        "      directedMutableGraph0.addEdge(bigInteger0, bigInteger0, bigInteger0);\n",
                        "      DefaultSpanningTreeAlgorithmSelector<BigInteger, FloatWeightBaseOperations, BigInteger> defaultSpanningTreeAlgorithmSelector0 = new DefaultSpanningTreeAlgorithmSelector<BigInteger, FloatWeightBaseOperations, BigInteger>(directedMutableGraph0, (Mapper<BigInteger, FloatWeightBaseOperations>) null, bigInteger0);\n",
                        "      OrderedMonoid<FloatWeightBaseOperations> orderedMonoid0 = (OrderedMonoid<FloatWeightBaseOperations>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null).when(orderedMonoid0).identity();\n",
                        "      SpanningTree<BigInteger, BigInteger, FloatWeightBaseOperations> spanningTree0 = defaultSpanningTreeAlgorithmSelector0.applyingKruskalAlgorithm(orderedMonoid0);\n",
                        "      assertNotNull(spanningTree0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test10()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BigInteger,BigInteger>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "DefaultSpanningTreeAlgorithmSelector<BigInteger,FloatWeightBaseOperations,BigInteger>"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "applyingKruskalAlgorithm"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ]
                    ]
                },
                "214-230:test09": {
                    "start": 214,
                    "end": 230,
                    "body": [
                        "  public void test09()  throws Throwable  {\n",
                        "      BigIntegerWeightBaseOperations bigIntegerWeightBaseOperations0 = new BigIntegerWeightBaseOperations();\n",
                        "      DirectedMutableGraph<OrderedMonoid<BigInteger>, FloatWeightBaseOperations> directedMutableGraph0 = new DirectedMutableGraph<OrderedMonoid<BigInteger>, FloatWeightBaseOperations>();\n",
                        "      RevertedGraph<OrderedMonoid<BigInteger>, FloatWeightBaseOperations> revertedGraph0 = new RevertedGraph<OrderedMonoid<BigInteger>, FloatWeightBaseOperations>(directedMutableGraph0);\n",
                        "      DefaultSpanningTreeAlgorithmSelector<OrderedMonoid<BigInteger>, BigInteger, FloatWeightBaseOperations> defaultSpanningTreeAlgorithmSelector0 = new DefaultSpanningTreeAlgorithmSelector<OrderedMonoid<BigInteger>, BigInteger, FloatWeightBaseOperations>(revertedGraph0, (Mapper<FloatWeightBaseOperations, BigInteger>) null, bigIntegerWeightBaseOperations0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultSpanningTreeAlgorithmSelector0.applyingPrimAlgorithm((OrderedMonoid<BigInteger>) bigIntegerWeightBaseOperations0);\n",
                        "        fail(\"Expecting exception: RuntimeException\");\n",
                        "      \n",
                        "      } catch(RuntimeException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.model.BaseGraph\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test09()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.BigIntegerWeightBaseOperations",
                            "BigIntegerWeightBaseOperations",
                            "BigIntegerWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<OrderedMonoid<BigInteger>,FloatWeightBaseOperations>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/RevertedGraph",
                            "RevertedGraph<OrderedMonoid<BigInteger>,FloatWeightBaseOperations>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "DefaultSpanningTreeAlgorithmSelector<OrderedMonoid<BigInteger>,BigInteger,FloatWeightBaseOperations>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "applyingPrimAlgorithm"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "201-211:test08": {
                    "start": 201,
                    "end": 211,
                    "body": [
                        "  public void test08()  throws Throwable  {\n",
                        "      UndirectedMutableGraph<FloatWeightBaseOperations, FloatWeightBaseOperations> undirectedMutableGraph0 = new UndirectedMutableGraph<FloatWeightBaseOperations, FloatWeightBaseOperations>();\n",
                        "      FloatWeightBaseOperations floatWeightBaseOperations0 = new FloatWeightBaseOperations();\n",
                        "      Mapper<FloatWeightBaseOperations, FloatWeightBaseOperations> mapper0 = (Mapper<FloatWeightBaseOperations, FloatWeightBaseOperations>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      undirectedMutableGraph0.addVertex(floatWeightBaseOperations0);\n",
                        "      DefaultSpanningTreeAlgorithmSelector<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations> defaultSpanningTreeAlgorithmSelector0 = new DefaultSpanningTreeAlgorithmSelector<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations>(undirectedMutableGraph0, mapper0, floatWeightBaseOperations0);\n",
                        "      OrderedMonoid<FloatWeightBaseOperations> orderedMonoid0 = (OrderedMonoid<FloatWeightBaseOperations>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null).when(orderedMonoid0).identity();\n",
                        "      SpanningTree<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations> spanningTree0 = defaultSpanningTreeAlgorithmSelector0.applyingPrimAlgorithm(orderedMonoid0);\n",
                        "      assertNotNull(spanningTree0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test08()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<FloatWeightBaseOperations,FloatWeightBaseOperations>"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations",
                            "FloatWeightBaseOperations",
                            "FloatWeightBaseOperations"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "DefaultSpanningTreeAlgorithmSelector<FloatWeightBaseOperations,FloatWeightBaseOperations,FloatWeightBaseOperations>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "applyingPrimAlgorithm"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ]
                    ]
                },
                "183-198:test07": {
                    "start": 183,
                    "end": 198,
                    "body": [
                        "  public void test07()  throws Throwable  {\n",
                        "      UndirectedMutableGraph<FloatWeightBaseOperations, FloatWeightBaseOperations> undirectedMutableGraph0 = new UndirectedMutableGraph<FloatWeightBaseOperations, FloatWeightBaseOperations>();\n",
                        "      FloatWeightBaseOperations floatWeightBaseOperations0 = new FloatWeightBaseOperations();\n",
                        "      DefaultSpanningTreeAlgorithmSelector<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations> defaultSpanningTreeAlgorithmSelector0 = new DefaultSpanningTreeAlgorithmSelector<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations>(undirectedMutableGraph0, (Mapper<FloatWeightBaseOperations, FloatWeightBaseOperations>) null, floatWeightBaseOperations0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultSpanningTreeAlgorithmSelector0.applyingBoruvkaAlgorithm((OrderedMonoid<FloatWeightBaseOperations>) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // The Boruvka algorithm cannot be calculated with null weight operations\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.utils.Assertions\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test07()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<FloatWeightBaseOperations,FloatWeightBaseOperations>"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations",
                            "FloatWeightBaseOperations",
                            "FloatWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "DefaultSpanningTreeAlgorithmSelector<FloatWeightBaseOperations,FloatWeightBaseOperations,FloatWeightBaseOperations>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "applyingBoruvkaAlgorithm"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "164-180:test06": {
                    "start": 164,
                    "end": 180,
                    "body": [
                        "  public void test06()  throws Throwable  {\n",
                        "      Mapper<Object, Object> mapper0 = (Mapper<Object, Object>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      DefaultSpanningTreeAlgorithmSelector<Object, Object, Object> defaultSpanningTreeAlgorithmSelector0 = new DefaultSpanningTreeAlgorithmSelector<Object, Object, Object>((Graph<Object, Object>) null, mapper0, (Object) null);\n",
                        "      OrderedMonoid<Object> orderedMonoid0 = (OrderedMonoid<Object>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null).when(orderedMonoid0).identity();\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultSpanningTreeAlgorithmSelector0.applyingBoruvkaAlgorithm(orderedMonoid0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.spanning.DefaultSpanningTreeAlgorithmSelector\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test06()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "DefaultSpanningTreeAlgorithmSelector<Object,Object,Object>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "applyingBoruvkaAlgorithm"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "146-161:test05": {
                    "start": 146,
                    "end": 161,
                    "body": [
                        "  public void test05()  throws Throwable  {\n",
                        "      DirectedMutableGraph<BigInteger, BigInteger> directedMutableGraph0 = new DirectedMutableGraph<BigInteger, BigInteger>();\n",
                        "      BigInteger bigInteger0 = BigInteger.ZERO;\n",
                        "      DefaultSpanningTreeAlgorithmSelector<BigInteger, FloatWeightBaseOperations, BigInteger> defaultSpanningTreeAlgorithmSelector0 = new DefaultSpanningTreeAlgorithmSelector<BigInteger, FloatWeightBaseOperations, BigInteger>(directedMutableGraph0, (Mapper<BigInteger, FloatWeightBaseOperations>) null, bigInteger0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultSpanningTreeAlgorithmSelector0.applyingKruskalAlgorithm((OrderedMonoid<FloatWeightBaseOperations>) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // The Kruskal algorithm cannot be calculated with null weight operations\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.utils.Assertions\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test05()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BigInteger,BigInteger>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "DefaultSpanningTreeAlgorithmSelector<BigInteger,FloatWeightBaseOperations,BigInteger>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "applyingKruskalAlgorithm"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "122-143:test04": {
                    "start": 122,
                    "end": 143,
                    "body": [
                        "  public void test04()  throws Throwable  {\n",
                        "      BigInteger bigInteger0 = BigInteger.ONE;\n",
                        "      LinkedList<BigInteger> linkedList0 = new LinkedList<BigInteger>();\n",
                        "      InMemoryPath<BigInteger, BigInteger> inMemoryPath0 = new InMemoryPath<BigInteger, BigInteger>(bigInteger0, bigInteger0);\n",
                        "      ReverseDeleteGraph<BigInteger, BigInteger> reverseDeleteGraph0 = new ReverseDeleteGraph<BigInteger, BigInteger>(inMemoryPath0, linkedList0, linkedList0);\n",
                        "      inMemoryPath0.addConnectionInTail(bigInteger0, bigInteger0, bigInteger0);\n",
                        "      Mapper<BigInteger, FloatWeightBaseOperations> mapper0 = (Mapper<BigInteger, FloatWeightBaseOperations>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      DefaultSpanningTreeAlgorithmSelector<BigInteger, FloatWeightBaseOperations, BigInteger> defaultSpanningTreeAlgorithmSelector0 = new DefaultSpanningTreeAlgorithmSelector<BigInteger, FloatWeightBaseOperations, BigInteger>(reverseDeleteGraph0, mapper0, bigInteger0);\n",
                        "      OrderedMonoid<FloatWeightBaseOperations> orderedMonoid0 = (OrderedMonoid<FloatWeightBaseOperations>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null).when(orderedMonoid0).identity();\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultSpanningTreeAlgorithmSelector0.applyingKruskalAlgorithm(orderedMonoid0);\n",
                        "        fail(\"Expecting exception: RuntimeException\");\n",
                        "      \n",
                        "      } catch(RuntimeException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.model.BaseGraph\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test04()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<BigInteger>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "InMemoryPath<BigInteger,BigInteger>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/ReverseDeleteGraph",
                            "ReverseDeleteGraph<BigInteger,BigInteger>"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "DefaultSpanningTreeAlgorithmSelector<BigInteger,FloatWeightBaseOperations,BigInteger>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "addConnectionInTail"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "applyingKruskalAlgorithm"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "99-119:test03": {
                    "start": 99,
                    "end": 119,
                    "body": [
                        "  public void test03()  throws Throwable  {\n",
                        "      BigIntegerWeightBaseOperations bigIntegerWeightBaseOperations0 = new BigIntegerWeightBaseOperations();\n",
                        "      Monoid<SuperVertex<BigInteger, FloatWeightBaseOperations, BigInteger>> monoid0 = (Monoid<SuperVertex<BigInteger, FloatWeightBaseOperations, BigInteger>>) mock(Monoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null).when(monoid0).identity();\n",
                        "      BigIntegerWeightBaseOperations bigIntegerWeightBaseOperations1 = new BigIntegerWeightBaseOperations();\n",
                        "      Mapper<FloatWeightBaseOperations, SuperVertex<BigInteger, FloatWeightBaseOperations, BigInteger>> mapper0 = (Mapper<FloatWeightBaseOperations, SuperVertex<BigInteger, FloatWeightBaseOperations, BigInteger>>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      InMemoryWeightedPath<OrderedMonoid<BigInteger>, FloatWeightBaseOperations, SuperVertex<BigInteger, FloatWeightBaseOperations, BigInteger>> inMemoryWeightedPath0 = new InMemoryWeightedPath<OrderedMonoid<BigInteger>, FloatWeightBaseOperations, SuperVertex<BigInteger, FloatWeightBaseOperations, BigInteger>>(bigIntegerWeightBaseOperations0, bigIntegerWeightBaseOperations1, monoid0, mapper0);\n",
                        "      Mapper<FloatWeightBaseOperations, BigInteger> mapper1 = (Mapper<FloatWeightBaseOperations, BigInteger>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      DefaultSpanningTreeAlgorithmSelector<OrderedMonoid<BigInteger>, BigInteger, FloatWeightBaseOperations> defaultSpanningTreeAlgorithmSelector0 = new DefaultSpanningTreeAlgorithmSelector<OrderedMonoid<BigInteger>, BigInteger, FloatWeightBaseOperations>(inMemoryWeightedPath0, mapper1, bigIntegerWeightBaseOperations0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultSpanningTreeAlgorithmSelector0.applyingPrimAlgorithm((OrderedMonoid<BigInteger>) bigIntegerWeightBaseOperations1);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // Impossible to get the degree of input vertex; org.apache.commons.graph.weight.primitive.BigIntegerWeightBaseOperations@1 not contained in this path\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.utils.Assertions\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test03()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.BigIntegerWeightBaseOperations",
                            "BigIntegerWeightBaseOperations",
                            "BigIntegerWeightBaseOperations"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "InMemoryWeightedPath<OrderedMonoid<BigInteger>,FloatWeightBaseOperations,SuperVertex<BigInteger,FloatWeightBaseOperations,BigInteger>>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "DefaultSpanningTreeAlgorithmSelector<OrderedMonoid<BigInteger>,BigInteger,FloatWeightBaseOperations>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "applyingPrimAlgorithm"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "81-96:test02": {
                    "start": 81,
                    "end": 96,
                    "body": [
                        "  public void test02()  throws Throwable  {\n",
                        "      DirectedMutableGraph<BigInteger, BigInteger> directedMutableGraph0 = new DirectedMutableGraph<BigInteger, BigInteger>();\n",
                        "      BigInteger bigInteger0 = BigInteger.ZERO;\n",
                        "      DefaultSpanningTreeAlgorithmSelector<BigInteger, FloatWeightBaseOperations, BigInteger> defaultSpanningTreeAlgorithmSelector0 = new DefaultSpanningTreeAlgorithmSelector<BigInteger, FloatWeightBaseOperations, BigInteger>(directedMutableGraph0, (Mapper<BigInteger, FloatWeightBaseOperations>) null, bigInteger0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultSpanningTreeAlgorithmSelector0.applyingPrimAlgorithm((OrderedMonoid<FloatWeightBaseOperations>) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // The Prim algorithm cannot be calculated with null weight operations\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.utils.Assertions\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test02()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BigInteger,BigInteger>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "DefaultSpanningTreeAlgorithmSelector<BigInteger,FloatWeightBaseOperations,BigInteger>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "applyingPrimAlgorithm"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "63-78:test01": {
                    "start": 63,
                    "end": 78,
                    "body": [
                        "  public void test01()  throws Throwable  {\n",
                        "      BigIntegerWeightBaseOperations bigIntegerWeightBaseOperations0 = new BigIntegerWeightBaseOperations();\n",
                        "      InMemoryPath<OrderedMonoid<BigInteger>, FloatWeightBaseOperations> inMemoryPath0 = new InMemoryPath<OrderedMonoid<BigInteger>, FloatWeightBaseOperations>(bigIntegerWeightBaseOperations0, bigIntegerWeightBaseOperations0);\n",
                        "      DefaultSpanningTreeAlgorithmSelector<OrderedMonoid<BigInteger>, BigInteger, FloatWeightBaseOperations> defaultSpanningTreeAlgorithmSelector0 = new DefaultSpanningTreeAlgorithmSelector<OrderedMonoid<BigInteger>, BigInteger, FloatWeightBaseOperations>(inMemoryPath0, (Mapper<FloatWeightBaseOperations, BigInteger>) null, bigIntegerWeightBaseOperations0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultSpanningTreeAlgorithmSelector0.applyingPrimAlgorithm((OrderedMonoid<BigInteger>) bigIntegerWeightBaseOperations0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.spanning.DefaultSpanningTreeAlgorithmSelector\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test01()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.BigIntegerWeightBaseOperations",
                            "BigIntegerWeightBaseOperations",
                            "BigIntegerWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "InMemoryPath<OrderedMonoid<BigInteger>,FloatWeightBaseOperations>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "DefaultSpanningTreeAlgorithmSelector<OrderedMonoid<BigInteger>,BigInteger,FloatWeightBaseOperations>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "applyingPrimAlgorithm"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "39-60:test00": {
                    "start": 39,
                    "end": 60,
                    "body": [
                        "  public void test00()  throws Throwable  {\n",
                        "      DirectedMutableGraph<BigInteger, BigInteger> directedMutableGraph0 = new DirectedMutableGraph<BigInteger, BigInteger>();\n",
                        "      byte[] byteArray0 = new byte[3];\n",
                        "      BigInteger bigInteger0 = new BigInteger(byteArray0);\n",
                        "      BigInteger bigInteger1 = new BigInteger(byteArray0);\n",
                        "      directedMutableGraph0.addVertex(bigInteger0);\n",
                        "      directedMutableGraph0.addEdge(bigInteger1, bigInteger1, bigInteger1);\n",
                        "      Mapper<BigInteger, FloatWeightBaseOperations> mapper0 = (Mapper<BigInteger, FloatWeightBaseOperations>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      DefaultSpanningTreeAlgorithmSelector<BigInteger, FloatWeightBaseOperations, BigInteger> defaultSpanningTreeAlgorithmSelector0 = new DefaultSpanningTreeAlgorithmSelector<BigInteger, FloatWeightBaseOperations, BigInteger>(directedMutableGraph0, mapper0, bigInteger0);\n",
                        "      OrderedMonoid<FloatWeightBaseOperations> orderedMonoid0 = (OrderedMonoid<FloatWeightBaseOperations>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultSpanningTreeAlgorithmSelector0.applyingPrimAlgorithm(orderedMonoid0);\n",
                        "        fail(\"Expecting exception: UnsupportedOperationException\");\n",
                        "      \n",
                        "      } catch(UnsupportedOperationException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.collections.FibonacciHeap\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test00()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BigInteger,BigInteger>"
                        ],
                        [
                            "library",
                            "java.base/java/math/BigInteger",
                            "BigInteger"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "DefaultSpanningTreeAlgorithmSelector<BigInteger,FloatWeightBaseOperations,BigInteger>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "applyingPrimAlgorithm"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}