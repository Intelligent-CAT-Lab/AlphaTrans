{
    "path": "java_projects/cleaned_final_projects_evosuite/commons-graph/src/test/java/org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector_ESTest.java",
    "imports": {
        "12-12:import BigInteger": {
            "start": 12,
            "end": 12,
            "body": [
                "import java.math.BigInteger;\n"
            ]
        },
        "13-13:import RoundingMode": {
            "start": 13,
            "end": 13,
            "body": [
                "import java.math.RoundingMode;\n"
            ]
        },
        "14-14:import Graph": {
            "start": 14,
            "end": 14,
            "body": [
                "import org.apache.commons.graph.Graph;\n"
            ]
        },
        "20-20:import UndirectedMutableGraph": {
            "start": 20,
            "end": 20,
            "body": [
                "import org.apache.commons.graph.model.UndirectedMutableGraph;\n"
            ]
        },
        "17-17:import DirectedMutableGraph": {
            "start": 17,
            "end": 17,
            "body": [
                "import org.apache.commons.graph.model.DirectedMutableGraph;\n"
            ]
        },
        "27-27:import EvoRunnerParameters": {
            "start": 27,
            "end": 27,
            "body": [
                "import org.evosuite.runtime.EvoRunnerParameters;\n"
            ]
        },
        "29-29:import RunWith": {
            "start": 29,
            "end": 29,
            "body": [
                "import org.junit.runner.RunWith;\n"
            ]
        },
        "26-26:import EvoRunner": {
            "start": 26,
            "end": 26,
            "body": [
                "import org.evosuite.runtime.EvoRunner;\n"
            ]
        },
        "8-8:import Test": {
            "start": 8,
            "end": 8,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "15-15:import Mapper": {
            "start": 15,
            "end": 15,
            "body": [
                "import org.apache.commons.graph.Mapper;\n"
            ]
        },
        "16-16:import WeightedPath": {
            "start": 16,
            "end": 16,
            "body": [
                "import org.apache.commons.graph.WeightedPath;\n"
            ]
        },
        "23-23:import OrderedMonoid": {
            "start": 23,
            "end": 23,
            "body": [
                "import org.apache.commons.graph.weight.OrderedMonoid;\n"
            ]
        },
        "18-18:import InMemoryPath": {
            "start": 18,
            "end": 18,
            "body": [
                "import org.apache.commons.graph.model.InMemoryPath;\n"
            ]
        },
        "19-19:import RevertedGraph": {
            "start": 19,
            "end": 19,
            "body": [
                "import org.apache.commons.graph.model.RevertedGraph;\n"
            ]
        },
        "22-22:import HeuristicBuilder": {
            "start": 22,
            "end": 22,
            "body": [
                "import org.apache.commons.graph.shortestpath.HeuristicBuilder;\n"
            ]
        },
        "21-21:import DefaultShortestPathAlgorithmSelector": {
            "start": 21,
            "end": 21,
            "body": [
                "import org.apache.commons.graph.shortestpath.DefaultShortestPathAlgorithmSelector;\n"
            ]
        },
        "24-24:import BigIntegerWeightBaseOperations": {
            "start": 24,
            "end": 24,
            "body": [
                "import org.apache.commons.graph.weight.primitive.BigIntegerWeightBaseOperations;\n"
            ]
        },
        "25-25:import LongWeightBaseOperations": {
            "start": 25,
            "end": 25,
            "body": [
                "import org.apache.commons.graph.weight.primitive.LongWeightBaseOperations;\n"
            ]
        },
        "28-28:import ViolatedAssumptionAnswer": {
            "start": 28,
            "end": 28,
            "body": [
                "import org.evosuite.runtime.ViolatedAssumptionAnswer;\n"
            ]
        },
        "11-11:import static EvoAssertions.*": {
            "start": 11,
            "end": 11,
            "body": [
                "import static org.evosuite.runtime.EvoAssertions.*;\n"
            ]
        },
        "10-10:import static Mockito.*": {
            "start": 10,
            "end": 10,
            "body": [
                "import static org.evosuite.shaded.org.mockito.Mockito.*;\n"
            ]
        },
        "9-9:import static Assert.*": {
            "start": 9,
            "end": 9,
            "body": [
                "import static org.junit.Assert.*;\n"
            ]
        }
    },
    "classes": {
        "DefaultShortestPathAlgorithmSelector_ESTest": {
            "start": 32,
            "end": 32,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "DefaultShortestPathAlgorithmSelector_ESTest_scaffolding"
            ],
            "methods": {
                "273-287:test12": {
                    "start": 273,
                    "end": 287,
                    "body": [
                        "  public void test12()  throws Throwable  {\n",
                        "      UndirectedMutableGraph<OrderedMonoid<RoundingMode>, RoundingMode> undirectedMutableGraph0 = new UndirectedMutableGraph<OrderedMonoid<RoundingMode>, RoundingMode>();\n",
                        "      Mapper<RoundingMode, RoundingMode> mapper0 = (Mapper<RoundingMode, RoundingMode>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      OrderedMonoid<RoundingMode> orderedMonoid0 = (OrderedMonoid<RoundingMode>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      DefaultShortestPathAlgorithmSelector<OrderedMonoid<RoundingMode>, RoundingMode, RoundingMode> defaultShortestPathAlgorithmSelector0 = new DefaultShortestPathAlgorithmSelector<OrderedMonoid<RoundingMode>, RoundingMode, RoundingMode>(undirectedMutableGraph0, mapper0, orderedMonoid0, orderedMonoid0);\n",
                        "      OrderedMonoid<RoundingMode> orderedMonoid1 = (OrderedMonoid<RoundingMode>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null, (Object) null).when(orderedMonoid1).identity();\n",
                        "      WeightedPath<OrderedMonoid<RoundingMode>, RoundingMode, RoundingMode> weightedPath0 = defaultShortestPathAlgorithmSelector0.applyingDijkstra(orderedMonoid1);\n",
                        "      Mapper<RoundingMode, OrderedMonoid<RoundingMode>> mapper1 = (Mapper<RoundingMode, OrderedMonoid<RoundingMode>>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      OrderedMonoid<RoundingMode> orderedMonoid2 = (OrderedMonoid<RoundingMode>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      DefaultShortestPathAlgorithmSelector<OrderedMonoid<RoundingMode>, RoundingMode, OrderedMonoid<RoundingMode>> defaultShortestPathAlgorithmSelector1 = new DefaultShortestPathAlgorithmSelector<OrderedMonoid<RoundingMode>, RoundingMode, OrderedMonoid<RoundingMode>>(weightedPath0, mapper1, orderedMonoid2, orderedMonoid2);\n",
                        "      OrderedMonoid<OrderedMonoid<RoundingMode>> orderedMonoid3 = (OrderedMonoid<OrderedMonoid<RoundingMode>>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      HeuristicBuilder<OrderedMonoid<RoundingMode>, RoundingMode, OrderedMonoid<RoundingMode>> heuristicBuilder0 = defaultShortestPathAlgorithmSelector1.applyingAStar(orderedMonoid3);\n",
                        "      assertNotNull(heuristicBuilder0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test12()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<OrderedMonoid<RoundingMode>,RoundingMode>"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "DefaultShortestPathAlgorithmSelector<OrderedMonoid<RoundingMode>,RoundingMode,RoundingMode>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "applyingDijkstra"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "DefaultShortestPathAlgorithmSelector<OrderedMonoid<RoundingMode>,RoundingMode,OrderedMonoid<RoundingMode>>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "applyingAStar"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ]
                    ]
                },
                "252-270:test11": {
                    "start": 252,
                    "end": 270,
                    "body": [
                        "  public void test11()  throws Throwable  {\n",
                        "      DirectedMutableGraph<Object, Object> directedMutableGraph0 = new DirectedMutableGraph<Object, Object>();\n",
                        "      RevertedGraph<Object, Object> revertedGraph0 = new RevertedGraph<Object, Object>(directedMutableGraph0);\n",
                        "      Mapper<Object, Object> mapper0 = (Mapper<Object, Object>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      DefaultShortestPathAlgorithmSelector<Object, Object, Object> defaultShortestPathAlgorithmSelector0 = new DefaultShortestPathAlgorithmSelector<Object, Object, Object>(revertedGraph0, mapper0, revertedGraph0, revertedGraph0);\n",
                        "      OrderedMonoid<Object> orderedMonoid0 = (OrderedMonoid<Object>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn(revertedGraph0, revertedGraph0).when(orderedMonoid0).identity();\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultShortestPathAlgorithmSelector0.applyingBidirectionalDijkstra(orderedMonoid0);\n",
                        "        fail(\"Expecting exception: RuntimeException\");\n",
                        "      \n",
                        "      } catch(RuntimeException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.model.BaseGraph\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test11()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<Object,Object>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/RevertedGraph",
                            "RevertedGraph<Object,Object>"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "DefaultShortestPathAlgorithmSelector<Object,Object,Object>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "applyingBidirectionalDijkstra"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "230-249:test10": {
                    "start": 230,
                    "end": 249,
                    "body": [
                        "  public void test10()  throws Throwable  {\n",
                        "      DirectedMutableGraph<Object, Object> directedMutableGraph0 = new DirectedMutableGraph<Object, Object>();\n",
                        "      RevertedGraph<Object, Object> revertedGraph0 = new RevertedGraph<Object, Object>(directedMutableGraph0);\n",
                        "      directedMutableGraph0.addVertex(revertedGraph0);\n",
                        "      Mapper<Object, Object> mapper0 = (Mapper<Object, Object>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      DefaultShortestPathAlgorithmSelector<Object, Object, Object> defaultShortestPathAlgorithmSelector0 = new DefaultShortestPathAlgorithmSelector<Object, Object, Object>(revertedGraph0, mapper0, revertedGraph0, revertedGraph0);\n",
                        "      OrderedMonoid<Object> orderedMonoid0 = (OrderedMonoid<Object>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn(revertedGraph0, revertedGraph0).when(orderedMonoid0).identity();\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultShortestPathAlgorithmSelector0.applyingBidirectionalDijkstra(orderedMonoid0);\n",
                        "        fail(\"Expecting exception: RuntimeException\");\n",
                        "      \n",
                        "      } catch(RuntimeException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.shortestpath.DefaultShortestPathAlgorithmSelector\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test10()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<Object,Object>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/RevertedGraph",
                            "RevertedGraph<Object,Object>"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "DefaultShortestPathAlgorithmSelector<Object,Object,Object>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "applyingBidirectionalDijkstra"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "207-227:test09": {
                    "start": 207,
                    "end": 227,
                    "body": [
                        "  public void test09()  throws Throwable  {\n",
                        "      UndirectedMutableGraph<RoundingMode, OrderedMonoid<RoundingMode>> undirectedMutableGraph0 = new UndirectedMutableGraph<RoundingMode, OrderedMonoid<RoundingMode>>();\n",
                        "      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;\n",
                        "      undirectedMutableGraph0.addVertex(roundingMode0);\n",
                        "      OrderedMonoid<RoundingMode> orderedMonoid0 = (OrderedMonoid<RoundingMode>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      undirectedMutableGraph0.addEdge(roundingMode0, orderedMonoid0, roundingMode0);\n",
                        "      DefaultShortestPathAlgorithmSelector<RoundingMode, OrderedMonoid<RoundingMode>, OrderedMonoid<RoundingMode>> defaultShortestPathAlgorithmSelector0 = new DefaultShortestPathAlgorithmSelector<RoundingMode, OrderedMonoid<RoundingMode>, OrderedMonoid<RoundingMode>>(undirectedMutableGraph0, (Mapper<OrderedMonoid<RoundingMode>, OrderedMonoid<RoundingMode>>) null, roundingMode0, roundingMode0);\n",
                        "      OrderedMonoid<OrderedMonoid<RoundingMode>> orderedMonoid1 = (OrderedMonoid<OrderedMonoid<RoundingMode>>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null, (Object) null).when(orderedMonoid1).identity();\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultShortestPathAlgorithmSelector0.applyingBidirectionalDijkstra(orderedMonoid1);\n",
                        "        fail(\"Expecting exception: RuntimeException\");\n",
                        "      \n",
                        "      } catch(RuntimeException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.shortestpath.DefaultShortestPathAlgorithmSelector\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test09()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<RoundingMode,OrderedMonoid<RoundingMode>>"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "DefaultShortestPathAlgorithmSelector<RoundingMode,OrderedMonoid<RoundingMode>,OrderedMonoid<RoundingMode>>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "applyingBidirectionalDijkstra"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "183-204:test08": {
                    "start": 183,
                    "end": 204,
                    "body": [
                        "  public void test08()  throws Throwable  {\n",
                        "      UndirectedMutableGraph<RoundingMode, OrderedMonoid<RoundingMode>> undirectedMutableGraph0 = new UndirectedMutableGraph<RoundingMode, OrderedMonoid<RoundingMode>>();\n",
                        "      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;\n",
                        "      undirectedMutableGraph0.addVertex(roundingMode0);\n",
                        "      OrderedMonoid<RoundingMode> orderedMonoid0 = (OrderedMonoid<RoundingMode>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      undirectedMutableGraph0.addEdge(roundingMode0, orderedMonoid0, roundingMode0);\n",
                        "      RoundingMode roundingMode1 = RoundingMode.DOWN;\n",
                        "      DefaultShortestPathAlgorithmSelector<RoundingMode, OrderedMonoid<RoundingMode>, OrderedMonoid<RoundingMode>> defaultShortestPathAlgorithmSelector0 = new DefaultShortestPathAlgorithmSelector<RoundingMode, OrderedMonoid<RoundingMode>, OrderedMonoid<RoundingMode>>(undirectedMutableGraph0, (Mapper<OrderedMonoid<RoundingMode>, OrderedMonoid<RoundingMode>>) null, roundingMode0, roundingMode1);\n",
                        "      OrderedMonoid<OrderedMonoid<RoundingMode>> orderedMonoid1 = (OrderedMonoid<OrderedMonoid<RoundingMode>>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null).when(orderedMonoid1).identity();\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultShortestPathAlgorithmSelector0.applyingDijkstra(orderedMonoid1);\n",
                        "        fail(\"Expecting exception: RuntimeException\");\n",
                        "      \n",
                        "      } catch(RuntimeException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.shortestpath.DefaultShortestPathAlgorithmSelector\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test08()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<RoundingMode,OrderedMonoid<RoundingMode>>"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "DefaultShortestPathAlgorithmSelector<RoundingMode,OrderedMonoid<RoundingMode>,OrderedMonoid<RoundingMode>>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "applyingDijkstra"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "165-180:test07": {
                    "start": 165,
                    "end": 180,
                    "body": [
                        "  public void test07()  throws Throwable  {\n",
                        "      DirectedMutableGraph<OrderedMonoid<LongWeightBaseOperations>, RevertedGraph<RoundingMode, RoundingMode>> directedMutableGraph0 = new DirectedMutableGraph<OrderedMonoid<LongWeightBaseOperations>, RevertedGraph<RoundingMode, RoundingMode>>();\n",
                        "      Mapper<RevertedGraph<RoundingMode, RoundingMode>, LongWeightBaseOperations> mapper0 = (Mapper<RevertedGraph<RoundingMode, RoundingMode>, LongWeightBaseOperations>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      DefaultShortestPathAlgorithmSelector<OrderedMonoid<LongWeightBaseOperations>, RevertedGraph<RoundingMode, RoundingMode>, LongWeightBaseOperations> defaultShortestPathAlgorithmSelector0 = new DefaultShortestPathAlgorithmSelector<OrderedMonoid<LongWeightBaseOperations>, RevertedGraph<RoundingMode, RoundingMode>, LongWeightBaseOperations>(directedMutableGraph0, mapper0, (OrderedMonoid<LongWeightBaseOperations>) null, (OrderedMonoid<LongWeightBaseOperations>) null);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultShortestPathAlgorithmSelector0.applyingAStar((OrderedMonoid<LongWeightBaseOperations>) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // A* algorithm can not be applied using null weight operations\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.utils.Assertions\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test07()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<OrderedMonoid<LongWeightBaseOperations>,RevertedGraph<RoundingMode,RoundingMode>>"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "DefaultShortestPathAlgorithmSelector<OrderedMonoid<LongWeightBaseOperations>,RevertedGraph<RoundingMode,RoundingMode>,LongWeightBaseOperations>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "applyingAStar"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "146-162:test06": {
                    "start": 146,
                    "end": 162,
                    "body": [
                        "  public void test06()  throws Throwable  {\n",
                        "      BigIntegerWeightBaseOperations bigIntegerWeightBaseOperations0 = new BigIntegerWeightBaseOperations();\n",
                        "      InMemoryPath<OrderedMonoid<BigInteger>, OrderedMonoid<BigInteger>> inMemoryPath0 = new InMemoryPath<OrderedMonoid<BigInteger>, OrderedMonoid<BigInteger>>(bigIntegerWeightBaseOperations0, bigIntegerWeightBaseOperations0);\n",
                        "      BigIntegerWeightBaseOperations bigIntegerWeightBaseOperations1 = new BigIntegerWeightBaseOperations();\n",
                        "      DefaultShortestPathAlgorithmSelector<OrderedMonoid<BigInteger>, OrderedMonoid<BigInteger>, BigInteger> defaultShortestPathAlgorithmSelector0 = new DefaultShortestPathAlgorithmSelector<OrderedMonoid<BigInteger>, OrderedMonoid<BigInteger>, BigInteger>(inMemoryPath0, (Mapper<OrderedMonoid<BigInteger>, BigInteger>) null, bigIntegerWeightBaseOperations1, bigIntegerWeightBaseOperations1);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultShortestPathAlgorithmSelector0.applyingBidirectionalDijkstra((OrderedMonoid<BigInteger>) bigIntegerWeightBaseOperations0);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // Impossible to get the degree of input vertex; org.apache.commons.graph.weight.primitive.BigIntegerWeightBaseOperations@3 not contained in this path\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.utils.Assertions\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test06()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.BigIntegerWeightBaseOperations",
                            "BigIntegerWeightBaseOperations",
                            "BigIntegerWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "InMemoryPath<OrderedMonoid<BigInteger>,OrderedMonoid<BigInteger>>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "DefaultShortestPathAlgorithmSelector<OrderedMonoid<BigInteger>,OrderedMonoid<BigInteger>,BigInteger>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "applyingBidirectionalDijkstra"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "129-143:test05": {
                    "start": 129,
                    "end": 143,
                    "body": [
                        "  public void test05()  throws Throwable  {\n",
                        "      Object object0 = new Object();\n",
                        "      DefaultShortestPathAlgorithmSelector<Object, Object, Object> defaultShortestPathAlgorithmSelector0 = new DefaultShortestPathAlgorithmSelector<Object, Object, Object>((Graph<Object, Object>) null, (Mapper<Object, Object>) null, object0, object0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultShortestPathAlgorithmSelector0.applyingBidirectionalDijkstra((OrderedMonoid<Object>) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // Bidirectional Dijkstra algorithm can not be applied using null weight operations\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.utils.Assertions\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test05()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "Object"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "DefaultShortestPathAlgorithmSelector<Object,Object,Object>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "applyingBidirectionalDijkstra"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "111-126:test04": {
                    "start": 111,
                    "end": 126,
                    "body": [
                        "  public void test04()  throws Throwable  {\n",
                        "      BigIntegerWeightBaseOperations bigIntegerWeightBaseOperations0 = new BigIntegerWeightBaseOperations();\n",
                        "      InMemoryPath<OrderedMonoid<BigInteger>, OrderedMonoid<BigInteger>> inMemoryPath0 = new InMemoryPath<OrderedMonoid<BigInteger>, OrderedMonoid<BigInteger>>(bigIntegerWeightBaseOperations0, bigIntegerWeightBaseOperations0);\n",
                        "      DefaultShortestPathAlgorithmSelector<OrderedMonoid<BigInteger>, OrderedMonoid<BigInteger>, BigInteger> defaultShortestPathAlgorithmSelector0 = new DefaultShortestPathAlgorithmSelector<OrderedMonoid<BigInteger>, OrderedMonoid<BigInteger>, BigInteger>(inMemoryPath0, (Mapper<OrderedMonoid<BigInteger>, BigInteger>) null, bigIntegerWeightBaseOperations0, bigIntegerWeightBaseOperations0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultShortestPathAlgorithmSelector0.applyingBidirectionalDijkstra((OrderedMonoid<BigInteger>) bigIntegerWeightBaseOperations0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.shortestpath.DefaultShortestPathAlgorithmSelector\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test04()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.BigIntegerWeightBaseOperations",
                            "BigIntegerWeightBaseOperations",
                            "BigIntegerWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "InMemoryPath<OrderedMonoid<BigInteger>,OrderedMonoid<BigInteger>>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "DefaultShortestPathAlgorithmSelector<OrderedMonoid<BigInteger>,OrderedMonoid<BigInteger>,BigInteger>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "applyingBidirectionalDijkstra"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "92-108:test03": {
                    "start": 92,
                    "end": 108,
                    "body": [
                        "  public void test03()  throws Throwable  {\n",
                        "      BigIntegerWeightBaseOperations bigIntegerWeightBaseOperations0 = new BigIntegerWeightBaseOperations();\n",
                        "      InMemoryPath<OrderedMonoid<BigInteger>, BigInteger> inMemoryPath0 = new InMemoryPath<OrderedMonoid<BigInteger>, BigInteger>(bigIntegerWeightBaseOperations0, bigIntegerWeightBaseOperations0);\n",
                        "      BigIntegerWeightBaseOperations bigIntegerWeightBaseOperations1 = new BigIntegerWeightBaseOperations();\n",
                        "      DefaultShortestPathAlgorithmSelector<OrderedMonoid<BigInteger>, BigInteger, BigInteger> defaultShortestPathAlgorithmSelector0 = new DefaultShortestPathAlgorithmSelector<OrderedMonoid<BigInteger>, BigInteger, BigInteger>(inMemoryPath0, (Mapper<BigInteger, BigInteger>) null, bigIntegerWeightBaseOperations1, bigIntegerWeightBaseOperations0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultShortestPathAlgorithmSelector0.applyingDijkstra((OrderedMonoid<BigInteger>) bigIntegerWeightBaseOperations0);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // Impossible to get the degree of input vertex; org.apache.commons.graph.weight.primitive.BigIntegerWeightBaseOperations@3 not contained in this path\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.utils.Assertions\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test03()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.BigIntegerWeightBaseOperations",
                            "BigIntegerWeightBaseOperations",
                            "BigIntegerWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "InMemoryPath<OrderedMonoid<BigInteger>,BigInteger>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "DefaultShortestPathAlgorithmSelector<OrderedMonoid<BigInteger>,BigInteger,BigInteger>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "applyingDijkstra"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "74-89:test02": {
                    "start": 74,
                    "end": 89,
                    "body": [
                        "  public void test02()  throws Throwable  {\n",
                        "      UndirectedMutableGraph<RoundingMode, OrderedMonoid<RoundingMode>> undirectedMutableGraph0 = new UndirectedMutableGraph<RoundingMode, OrderedMonoid<RoundingMode>>();\n",
                        "      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;\n",
                        "      DefaultShortestPathAlgorithmSelector<RoundingMode, OrderedMonoid<RoundingMode>, OrderedMonoid<RoundingMode>> defaultShortestPathAlgorithmSelector0 = new DefaultShortestPathAlgorithmSelector<RoundingMode, OrderedMonoid<RoundingMode>, OrderedMonoid<RoundingMode>>(undirectedMutableGraph0, (Mapper<OrderedMonoid<RoundingMode>, OrderedMonoid<RoundingMode>>) null, roundingMode0, roundingMode0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultShortestPathAlgorithmSelector0.applyingDijkstra((OrderedMonoid<OrderedMonoid<RoundingMode>>) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // Dijkstra algorithm can not be applied using null weight operations\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.utils.Assertions\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test02()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<RoundingMode,OrderedMonoid<RoundingMode>>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "DefaultShortestPathAlgorithmSelector<RoundingMode,OrderedMonoid<RoundingMode>,OrderedMonoid<RoundingMode>>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "applyingDijkstra"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "56-71:test01": {
                    "start": 56,
                    "end": 71,
                    "body": [
                        "  public void test01()  throws Throwable  {\n",
                        "      DirectedMutableGraph<OrderedMonoid<BigInteger>, BigInteger> directedMutableGraph0 = new DirectedMutableGraph<OrderedMonoid<BigInteger>, BigInteger>();\n",
                        "      BigIntegerWeightBaseOperations bigIntegerWeightBaseOperations0 = new BigIntegerWeightBaseOperations();\n",
                        "      DefaultShortestPathAlgorithmSelector<OrderedMonoid<BigInteger>, BigInteger, BigInteger> defaultShortestPathAlgorithmSelector0 = new DefaultShortestPathAlgorithmSelector<OrderedMonoid<BigInteger>, BigInteger, BigInteger>(directedMutableGraph0, (Mapper<BigInteger, BigInteger>) null, bigIntegerWeightBaseOperations0, (OrderedMonoid<BigInteger>) null);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultShortestPathAlgorithmSelector0.applyingDijkstra((OrderedMonoid<BigInteger>) bigIntegerWeightBaseOperations0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.shortestpath.DefaultShortestPathAlgorithmSelector\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test01()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<OrderedMonoid<BigInteger>,BigInteger>"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.BigIntegerWeightBaseOperations",
                            "BigIntegerWeightBaseOperations",
                            "BigIntegerWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "DefaultShortestPathAlgorithmSelector<OrderedMonoid<BigInteger>,BigInteger,BigInteger>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "applyingDijkstra"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "35-53:test00": {
                    "start": 35,
                    "end": 53,
                    "body": [
                        "  public void test00()  throws Throwable  {\n",
                        "      DirectedMutableGraph<Object, RoundingMode> directedMutableGraph0 = new DirectedMutableGraph<Object, RoundingMode>();\n",
                        "      Mapper<RoundingMode, RoundingMode> mapper0 = (Mapper<RoundingMode, RoundingMode>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      RoundingMode roundingMode0 = RoundingMode.CEILING;\n",
                        "      DefaultShortestPathAlgorithmSelector<Object, RoundingMode, RoundingMode> defaultShortestPathAlgorithmSelector0 = new DefaultShortestPathAlgorithmSelector<Object, RoundingMode, RoundingMode>(directedMutableGraph0, mapper0, roundingMode0, directedMutableGraph0);\n",
                        "      OrderedMonoid<RoundingMode> orderedMonoid0 = (OrderedMonoid<RoundingMode>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null).when(orderedMonoid0).identity();\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultShortestPathAlgorithmSelector0.applyingDijkstra(orderedMonoid0);\n",
                        "        fail(\"Expecting exception: RuntimeException\");\n",
                        "      \n",
                        "      } catch(RuntimeException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.model.BaseGraph\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test00()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<Object,RoundingMode>"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "DefaultShortestPathAlgorithmSelector<Object,RoundingMode,RoundingMode>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultShortestPathAlgorithmSelector",
                            "applyingDijkstra"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}