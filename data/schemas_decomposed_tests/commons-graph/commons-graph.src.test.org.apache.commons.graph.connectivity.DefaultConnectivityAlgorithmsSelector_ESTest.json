{
    "path": "java_projects/cleaned_final_projects_evosuite/commons-graph/src/test/java/org/apache/commons/graph/connectivity/DefaultConnectivityAlgorithmsSelector_ESTest.java",
    "imports": {
        "18-18:import Locale": {
            "start": 18,
            "end": 18,
            "body": [
                "import java.util.Locale;\n"
            ]
        },
        "13-13:import Collection": {
            "start": 13,
            "end": 13,
            "body": [
                "import java.util.Collection;\n"
            ]
        },
        "17-17:import List": {
            "start": 17,
            "end": 17,
            "body": [
                "import java.util.List;\n"
            ]
        },
        "12-12:import Array": {
            "start": 12,
            "end": 12,
            "body": [
                "import java.lang.reflect.Array;\n"
            ]
        },
        "14-14:import HashSet": {
            "start": 14,
            "end": 14,
            "body": [
                "import java.util.HashSet;\n"
            ]
        },
        "15-15:import LinkedHashSet": {
            "start": 15,
            "end": 15,
            "body": [
                "import java.util.LinkedHashSet;\n"
            ]
        },
        "16-16:import LinkedList": {
            "start": 16,
            "end": 16,
            "body": [
                "import java.util.LinkedList;\n"
            ]
        },
        "19-19:import TreeSet": {
            "start": 19,
            "end": 19,
            "body": [
                "import java.util.TreeSet;\n"
            ]
        },
        "20-20:import Graph": {
            "start": 20,
            "end": 20,
            "body": [
                "import org.apache.commons.graph.Graph;\n"
            ]
        },
        "27-27:import EvoRunnerParameters": {
            "start": 27,
            "end": 27,
            "body": [
                "import org.evosuite.runtime.EvoRunnerParameters;\n"
            ]
        },
        "29-29:import RunWith": {
            "start": 29,
            "end": 29,
            "body": [
                "import org.junit.runner.RunWith;\n"
            ]
        },
        "26-26:import EvoRunner": {
            "start": 26,
            "end": 26,
            "body": [
                "import org.evosuite.runtime.EvoRunner;\n"
            ]
        },
        "8-8:import Test": {
            "start": 8,
            "end": 8,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "21-21:import Mapper": {
            "start": 21,
            "end": 21,
            "body": [
                "import org.apache.commons.graph.Mapper;\n"
            ]
        },
        "22-22:import DefaultConnectivityAlgorithmsSelector": {
            "start": 22,
            "end": 22,
            "body": [
                "import org.apache.commons.graph.connectivity.DefaultConnectivityAlgorithmsSelector;\n"
            ]
        },
        "25-25:import Monoid": {
            "start": 25,
            "end": 25,
            "body": [
                "import org.apache.commons.graph.weight.Monoid;\n"
            ]
        },
        "23-23:import InMemoryPath": {
            "start": 23,
            "end": 23,
            "body": [
                "import org.apache.commons.graph.model.InMemoryPath;\n"
            ]
        },
        "24-24:import MutableSpanningTree": {
            "start": 24,
            "end": 24,
            "body": [
                "import org.apache.commons.graph.model.MutableSpanningTree;\n"
            ]
        },
        "28-28:import ViolatedAssumptionAnswer": {
            "start": 28,
            "end": 28,
            "body": [
                "import org.evosuite.runtime.ViolatedAssumptionAnswer;\n"
            ]
        },
        "11-11:import static EvoAssertions.*": {
            "start": 11,
            "end": 11,
            "body": [
                "import static org.evosuite.runtime.EvoAssertions.*;\n"
            ]
        },
        "10-10:import static Mockito.*": {
            "start": 10,
            "end": 10,
            "body": [
                "import static org.evosuite.shaded.org.mockito.Mockito.*;\n"
            ]
        },
        "9-9:import static Assert.*": {
            "start": 9,
            "end": 9,
            "body": [
                "import static org.junit.Assert.*;\n"
            ]
        }
    },
    "classes": {
        "DefaultConnectivityAlgorithmsSelector_ESTest": {
            "start": 32,
            "end": 32,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "DefaultConnectivityAlgorithmsSelector_ESTest_scaffolding"
            ],
            "methods": {
                "138-143:test4": {
                    "start": 138,
                    "end": 143,
                    "body": [
                        "  public void test4()  throws Throwable  {\n",
                        "      TreeSet<Locale.IsoCountryCode> treeSet0 = new TreeSet<Locale.IsoCountryCode>();\n",
                        "      DefaultConnectivityAlgorithmsSelector<Locale.IsoCountryCode, LinkedList<Object>> defaultConnectivityAlgorithmsSelector0 = new DefaultConnectivityAlgorithmsSelector<Locale.IsoCountryCode, LinkedList<Object>>((Graph<Locale.IsoCountryCode, LinkedList<Object>>) null, treeSet0);\n",
                        "      Collection<List<Locale.IsoCountryCode>> collection0 = defaultConnectivityAlgorithmsSelector0.applyingMinimumSpanningTreeAlgorithm();\n",
                        "      assertNotNull(collection0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test4()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/TreeSet",
                            "TreeSet<IsoCountryCode>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/connectivity/DefaultConnectivityAlgorithmsSelector",
                            "DefaultConnectivityAlgorithmsSelector<IsoCountryCode,LinkedList<Object>>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/connectivity/DefaultConnectivityAlgorithmsSelector",
                            "applyingMinimumSpanningTreeAlgorithm"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ]
                    ]
                },
                "112-135:test3": {
                    "start": 112,
                    "end": 135,
                    "body": [
                        "  public void test3()  throws Throwable  {\n",
                        "      LinkedList<Object> linkedList0 = new LinkedList<Object>();\n",
                        "      LinkedList<Object> linkedList1 = new LinkedList<Object>();\n",
                        "      List<LinkedList<Object>> list0 = List.of(linkedList0, linkedList0, linkedList0, linkedList1, linkedList1, linkedList1, linkedList1, linkedList0, linkedList0);\n",
                        "      InMemoryPath<LinkedList<Object>, LinkedList<Object>> inMemoryPath0 = new InMemoryPath<LinkedList<Object>, LinkedList<Object>>(linkedList1, linkedList1);\n",
                        "      HashSet<LinkedList<Object>> hashSet0 = new HashSet<LinkedList<Object>>(list0);\n",
                        "      DefaultConnectivityAlgorithmsSelector<LinkedList<Object>, LinkedList<Object>> defaultConnectivityAlgorithmsSelector0 = new DefaultConnectivityAlgorithmsSelector<LinkedList<Object>, LinkedList<Object>>(inMemoryPath0, hashSet0);\n",
                        "      Monoid<Object> monoid0 = (Monoid<Object>) mock(Monoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn(list0).when(monoid0).identity();\n",
                        "      inMemoryPath0.addConnectionInTail(linkedList0, linkedList1, linkedList0);\n",
                        "      MutableSpanningTree<Object, LinkedList<Locale.IsoCountryCode>, Object> mutableSpanningTree0 = new MutableSpanningTree<Object, LinkedList<Locale.IsoCountryCode>, Object>(monoid0, (Mapper<LinkedList<Locale.IsoCountryCode>, Object>) null);\n",
                        "      linkedList0.offer(mutableSpanningTree0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultConnectivityAlgorithmsSelector0.applyingMinimumSpanningTreeAlgorithm();\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // Impossible to get the degree of input vertex; [{}] not contained in this path\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.utils.Assertions\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test3()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<Object>"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "of"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "InMemoryPath<LinkedList<Object>,LinkedList<Object>>"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "HashSet<LinkedList<Object>>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/connectivity/DefaultConnectivityAlgorithmsSelector",
                            "DefaultConnectivityAlgorithmsSelector<LinkedList<Object>,LinkedList<Object>>"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/MutableSpanningTree",
                            "MutableSpanningTree<Object,LinkedList<IsoCountryCode>,Object>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "addConnectionInTail"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "offer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/connectivity/DefaultConnectivityAlgorithmsSelector",
                            "applyingMinimumSpanningTreeAlgorithm"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "80-109:test2": {
                    "start": 80,
                    "end": 109,
                    "body": [
                        "  public void test2()  throws Throwable  {\n",
                        "      LinkedHashSet<Comparable<Locale.IsoCountryCode>> linkedHashSet0 = new LinkedHashSet<Comparable<Locale.IsoCountryCode>>(0);\n",
                        "      Monoid<Object> monoid0 = (Monoid<Object>) mock(Monoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn(linkedHashSet0).when(monoid0).identity();\n",
                        "      Mapper<LinkedList<Object>, Object> mapper0 = (Mapper<LinkedList<Object>, Object>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      MutableSpanningTree<LinkedList<Locale.IsoCountryCode>, LinkedList<Object>, Object> mutableSpanningTree0 = new MutableSpanningTree<LinkedList<Locale.IsoCountryCode>, LinkedList<Object>, Object>(monoid0, mapper0);\n",
                        "      LinkedList<Locale.IsoCountryCode>[] linkedListArray0 = (LinkedList<Locale.IsoCountryCode>[]) Array.newInstance(LinkedList.class, 8);\n",
                        "      LinkedList<Locale.IsoCountryCode> linkedList0 = new LinkedList<Locale.IsoCountryCode>();\n",
                        "      linkedListArray0[0] = linkedList0;\n",
                        "      linkedListArray0[1] = linkedListArray0[0];\n",
                        "      linkedListArray0[2] = linkedListArray0[1];\n",
                        "      linkedListArray0[3] = linkedList0;\n",
                        "      linkedListArray0[4] = linkedList0;\n",
                        "      linkedListArray0[5] = linkedListArray0[3];\n",
                        "      linkedListArray0[6] = linkedListArray0[0];\n",
                        "      linkedListArray0[7] = linkedList0;\n",
                        "      List<LinkedList<Locale.IsoCountryCode>> list0 = List.of(linkedListArray0);\n",
                        "      DefaultConnectivityAlgorithmsSelector<LinkedList<Locale.IsoCountryCode>, LinkedList<Object>> defaultConnectivityAlgorithmsSelector0 = new DefaultConnectivityAlgorithmsSelector<LinkedList<Locale.IsoCountryCode>, LinkedList<Object>>(mutableSpanningTree0, list0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultConnectivityAlgorithmsSelector0.applyingMinimumSpanningTreeAlgorithm();\n",
                        "        fail(\"Expecting exception: IllegalStateException\");\n",
                        "      \n",
                        "      } catch(IllegalStateException e) {\n",
                        "         //\n",
                        "         // Vertex [] does not exist in the Graph\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.utils.Assertions\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test2()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Comparable<IsoCountryCode>>"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/MutableSpanningTree",
                            "MutableSpanningTree<LinkedList<IsoCountryCode>,LinkedList<Object>,Object>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/reflect/Array",
                            "newInstance"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<IsoCountryCode>"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "of"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/connectivity/DefaultConnectivityAlgorithmsSelector",
                            "DefaultConnectivityAlgorithmsSelector<LinkedList<IsoCountryCode>,LinkedList<Object>>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/connectivity/DefaultConnectivityAlgorithmsSelector",
                            "applyingMinimumSpanningTreeAlgorithm"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "60-77:test1": {
                    "start": 60,
                    "end": 77,
                    "body": [
                        "  public void test1()  throws Throwable  {\n",
                        "      LinkedList<Object> linkedList0 = new LinkedList<Object>();\n",
                        "      List<LinkedList<Object>> list0 = List.of(linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0);\n",
                        "      InMemoryPath<LinkedList<Object>, LinkedList<Object>> inMemoryPath0 = new InMemoryPath<LinkedList<Object>, LinkedList<Object>>(linkedList0, linkedList0);\n",
                        "      HashSet<LinkedList<Object>> hashSet0 = new HashSet<LinkedList<Object>>(list0);\n",
                        "      linkedList0.offerFirst(hashSet0);\n",
                        "      DefaultConnectivityAlgorithmsSelector<LinkedList<Object>, LinkedList<Object>> defaultConnectivityAlgorithmsSelector0 = new DefaultConnectivityAlgorithmsSelector<LinkedList<Object>, LinkedList<Object>>(inMemoryPath0, hashSet0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultConnectivityAlgorithmsSelector0.applyingMinimumSpanningTreeAlgorithm();\n",
                        "        fail(\"Expecting exception: StackOverflowError\");\n",
                        "      \n",
                        "      } catch(StackOverflowError e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test1()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<Object>"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "of"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "InMemoryPath<LinkedList<Object>,LinkedList<Object>>"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "HashSet<LinkedList<Object>>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/connectivity/DefaultConnectivityAlgorithmsSelector",
                            "DefaultConnectivityAlgorithmsSelector<LinkedList<Object>,LinkedList<Object>>"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "offerFirst"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/connectivity/DefaultConnectivityAlgorithmsSelector",
                            "applyingMinimumSpanningTreeAlgorithm"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ]
                    ]
                },
                "35-57:test0": {
                    "start": 35,
                    "end": 57,
                    "body": [
                        "  public void test0()  throws Throwable  {\n",
                        "      LinkedList<Object> linkedList0 = new LinkedList<Object>();\n",
                        "      LinkedList<Object> linkedList1 = new LinkedList<Object>();\n",
                        "      List<LinkedList<Object>> list0 = List.of(linkedList0, linkedList0, linkedList0, linkedList1, linkedList1, linkedList1, linkedList1, linkedList0, linkedList0);\n",
                        "      Object object0 = new Object();\n",
                        "      linkedList1.add(object0);\n",
                        "      InMemoryPath<LinkedList<Object>, LinkedList<Object>> inMemoryPath0 = new InMemoryPath<LinkedList<Object>, LinkedList<Object>>(linkedList1, linkedList1);\n",
                        "      inMemoryPath0.addConnectionInTail(linkedList0, linkedList1, linkedList1);\n",
                        "      HashSet<LinkedList<Object>> hashSet0 = new HashSet<LinkedList<Object>>(list0);\n",
                        "      inMemoryPath0.addConnectionInTail(linkedList0, linkedList0, linkedList0);\n",
                        "      DefaultConnectivityAlgorithmsSelector<LinkedList<Object>, LinkedList<Object>> defaultConnectivityAlgorithmsSelector0 = new DefaultConnectivityAlgorithmsSelector<LinkedList<Object>, LinkedList<Object>>(inMemoryPath0, hashSet0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultConnectivityAlgorithmsSelector0.applyingMinimumSpanningTreeAlgorithm();\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.visit.DefaultVisitAlgorithmsSelector\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<Object>"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "of"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "Object"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "InMemoryPath<LinkedList<Object>,LinkedList<Object>>"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "HashSet<LinkedList<Object>>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/connectivity/DefaultConnectivityAlgorithmsSelector",
                            "DefaultConnectivityAlgorithmsSelector<LinkedList<Object>,LinkedList<Object>>"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "add"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "addConnectionInTail"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/connectivity/DefaultConnectivityAlgorithmsSelector",
                            "applyingMinimumSpanningTreeAlgorithm"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}