{
    "path": "java_projects/cleaned_final_projects_evosuite/commons-graph/src/test/java/org/apache/commons/graph/shortestpath/DefaultHeuristicBuilder_ESTest.java",
    "imports": {
        "17-17:import UndirectedMutableGraph": {
            "start": 17,
            "end": 17,
            "body": [
                "import org.apache.commons.graph.model.UndirectedMutableGraph;\n"
            ]
        },
        "14-14:import DirectedMutableGraph": {
            "start": 14,
            "end": 14,
            "body": [
                "import org.apache.commons.graph.model.DirectedMutableGraph;\n"
            ]
        },
        "23-23:import EvoRunnerParameters": {
            "start": 23,
            "end": 23,
            "body": [
                "import org.evosuite.runtime.EvoRunnerParameters;\n"
            ]
        },
        "25-25:import RunWith": {
            "start": 25,
            "end": 25,
            "body": [
                "import org.junit.runner.RunWith;\n"
            ]
        },
        "22-22:import EvoRunner": {
            "start": 22,
            "end": 22,
            "body": [
                "import org.evosuite.runtime.EvoRunner;\n"
            ]
        },
        "8-8:import Test": {
            "start": 8,
            "end": 8,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "12-12:import Mapper": {
            "start": 12,
            "end": 12,
            "body": [
                "import org.apache.commons.graph.Mapper;\n"
            ]
        },
        "13-13:import WeightedPath": {
            "start": 13,
            "end": 13,
            "body": [
                "import org.apache.commons.graph.WeightedPath;\n"
            ]
        },
        "20-20:import OrderedMonoid": {
            "start": 20,
            "end": 20,
            "body": [
                "import org.apache.commons.graph.weight.OrderedMonoid;\n"
            ]
        },
        "15-15:import InMemoryPath": {
            "start": 15,
            "end": 15,
            "body": [
                "import org.apache.commons.graph.model.InMemoryPath;\n"
            ]
        },
        "16-16:import InMemoryWeightedPath": {
            "start": 16,
            "end": 16,
            "body": [
                "import org.apache.commons.graph.model.InMemoryWeightedPath;\n"
            ]
        },
        "18-18:import DefaultHeuristicBuilder": {
            "start": 18,
            "end": 18,
            "body": [
                "import org.apache.commons.graph.shortestpath.DefaultHeuristicBuilder;\n"
            ]
        },
        "19-19:import Heuristic": {
            "start": 19,
            "end": 19,
            "body": [
                "import org.apache.commons.graph.shortestpath.Heuristic;\n"
            ]
        },
        "21-21:import IntegerWeightBaseOperations": {
            "start": 21,
            "end": 21,
            "body": [
                "import org.apache.commons.graph.weight.primitive.IntegerWeightBaseOperations;\n"
            ]
        },
        "24-24:import ViolatedAssumptionAnswer": {
            "start": 24,
            "end": 24,
            "body": [
                "import org.evosuite.runtime.ViolatedAssumptionAnswer;\n"
            ]
        },
        "11-11:import static EvoAssertions.*": {
            "start": 11,
            "end": 11,
            "body": [
                "import static org.evosuite.runtime.EvoAssertions.*;\n"
            ]
        },
        "10-10:import static Mockito.*": {
            "start": 10,
            "end": 10,
            "body": [
                "import static org.evosuite.shaded.org.mockito.Mockito.*;\n"
            ]
        },
        "9-9:import static Assert.*": {
            "start": 9,
            "end": 9,
            "body": [
                "import static org.junit.Assert.*;\n"
            ]
        }
    },
    "classes": {
        "DefaultHeuristicBuilder_ESTest": {
            "start": 28,
            "end": 28,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "DefaultHeuristicBuilder_ESTest_scaffolding"
            ],
            "methods": {
                "146-156:test5": {
                    "start": 146,
                    "end": 156,
                    "body": [
                        "  public void test5()  throws Throwable  {\n",
                        "      DirectedMutableGraph<Object, Object> directedMutableGraph0 = new DirectedMutableGraph<Object, Object>();\n",
                        "      Mapper<Object, Object> mapper0 = (Mapper<Object, Object>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      OrderedMonoid<Object> orderedMonoid0 = (OrderedMonoid<Object>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null, (Object) null).when(orderedMonoid0).identity();\n",
                        "      DefaultHeuristicBuilder<Object, Object, Object> defaultHeuristicBuilder0 = new DefaultHeuristicBuilder<Object, Object, Object>(directedMutableGraph0, mapper0, directedMutableGraph0, directedMutableGraph0, orderedMonoid0);\n",
                        "      Heuristic<Object, Object> heuristic0 = (Heuristic<Object, Object>) mock(Heuristic.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null).when(heuristic0).applyHeuristic(any() , any());\n",
                        "      WeightedPath<Object, Object, Object> weightedPath0 = defaultHeuristicBuilder0.withHeuristic(heuristic0);\n",
                        "      assertNotNull(weightedPath0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test5()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<Object,Object>"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultHeuristicBuilder",
                            "DefaultHeuristicBuilder<Object,Object,Object>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultHeuristicBuilder",
                            "withHeuristic"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/Heuristic",
                            "applyHeuristic"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/ArgumentMatchers",
                            "any"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ]
                    ]
                },
                "122-143:test4": {
                    "start": 122,
                    "end": 143,
                    "body": [
                        "  public void test4()  throws Throwable  {\n",
                        "      Integer integer0 = new Integer(3);\n",
                        "      IntegerWeightBaseOperations integerWeightBaseOperations0 = new IntegerWeightBaseOperations();\n",
                        "      Mapper<Heuristic<Integer, Integer>, Integer> mapper0 = (Mapper<Heuristic<Integer, Integer>, Integer>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      InMemoryWeightedPath<Integer, Heuristic<Integer, Integer>, Integer> inMemoryWeightedPath0 = new InMemoryWeightedPath<Integer, Heuristic<Integer, Integer>, Integer>(integer0, integer0, integerWeightBaseOperations0, mapper0);\n",
                        "      Mapper<Heuristic<Integer, Integer>, Integer> mapper1 = (Mapper<Heuristic<Integer, Integer>, Integer>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      Integer integer1 = new Integer(0);\n",
                        "      DefaultHeuristicBuilder<Integer, Heuristic<Integer, Integer>, Integer> defaultHeuristicBuilder0 = new DefaultHeuristicBuilder<Integer, Heuristic<Integer, Integer>, Integer>(inMemoryWeightedPath0, mapper1, integer0, integer1, integerWeightBaseOperations0);\n",
                        "      Heuristic<Integer, Integer> heuristic0 = (Heuristic<Integer, Integer>) mock(Heuristic.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null).when(heuristic0).applyHeuristic(anyInt() , anyInt());\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultHeuristicBuilder0.withHeuristic(heuristic0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.shortestpath.DefaultHeuristicBuilder\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test4()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "Integer"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "InMemoryWeightedPath<Integer,Heuristic<Integer,Integer>,Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultHeuristicBuilder",
                            "DefaultHeuristicBuilder<Integer,Heuristic<Integer,Integer>,Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/Heuristic",
                            "applyHeuristic"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/ArgumentMatchers",
                            "anyInt"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultHeuristicBuilder",
                            "withHeuristic"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "97-119:test3": {
                    "start": 97,
                    "end": 119,
                    "body": [
                        "  public void test3()  throws Throwable  {\n",
                        "      DirectedMutableGraph<Object, Object> directedMutableGraph0 = new DirectedMutableGraph<Object, Object>();\n",
                        "      Mapper<Object, Object> mapper0 = (Mapper<Object, Object>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      Object object0 = new Object();\n",
                        "      directedMutableGraph0.addVertex(object0);\n",
                        "      OrderedMonoid<Object> orderedMonoid0 = (OrderedMonoid<Object>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn(object0).when(orderedMonoid0).identity();\n",
                        "      directedMutableGraph0.addEdge(object0, object0, object0);\n",
                        "      DefaultHeuristicBuilder<Object, Object, Object> defaultHeuristicBuilder0 = new DefaultHeuristicBuilder<Object, Object, Object>(directedMutableGraph0, mapper0, object0, directedMutableGraph0, orderedMonoid0);\n",
                        "      Heuristic<Object, Object> heuristic0 = (Heuristic<Object, Object>) mock(Heuristic.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null).when(heuristic0).applyHeuristic(any() , any());\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultHeuristicBuilder0.withHeuristic(heuristic0);\n",
                        "        fail(\"Expecting exception: RuntimeException\");\n",
                        "      \n",
                        "      } catch(RuntimeException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.shortestpath.DefaultHeuristicBuilder\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test3()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<Object,Object>"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "Object"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultHeuristicBuilder",
                            "DefaultHeuristicBuilder<Object,Object,Object>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/Heuristic",
                            "applyHeuristic"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/ArgumentMatchers",
                            "any"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultHeuristicBuilder",
                            "withHeuristic"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "73-94:test2": {
                    "start": 73,
                    "end": 94,
                    "body": [
                        "  public void test2()  throws Throwable  {\n",
                        "      Object object0 = new Object();\n",
                        "      InMemoryPath<Object, Heuristic<Integer, Object>> inMemoryPath0 = new InMemoryPath<Object, Heuristic<Integer, Object>>(object0, object0);\n",
                        "      Mapper<Heuristic<Integer, Object>, Heuristic<Object, Integer>> mapper0 = (Mapper<Heuristic<Integer, Object>, Heuristic<Object, Integer>>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      Object object1 = new Object();\n",
                        "      OrderedMonoid<Heuristic<Object, Integer>> orderedMonoid0 = (OrderedMonoid<Heuristic<Object, Integer>>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null).when(orderedMonoid0).identity();\n",
                        "      DefaultHeuristicBuilder<Object, Heuristic<Integer, Object>, Heuristic<Object, Integer>> defaultHeuristicBuilder0 = new DefaultHeuristicBuilder<Object, Heuristic<Integer, Object>, Heuristic<Object, Integer>>(inMemoryPath0, mapper0, object1, inMemoryPath0, orderedMonoid0);\n",
                        "      Heuristic<Object, Heuristic<Object, Integer>> heuristic0 = (Heuristic<Object, Heuristic<Object, Integer>>) mock(Heuristic.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null).when(heuristic0).applyHeuristic(any() , any());\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultHeuristicBuilder0.withHeuristic(heuristic0);\n",
                        "        fail(\"Expecting exception: IllegalArgumentException\");\n",
                        "      \n",
                        "      } catch(IllegalArgumentException e) {\n",
                        "         //\n",
                        "         // Impossible to get the degree of input vertex; java.lang.Object@67c32512 not contained in this path\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.utils.Assertions\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test2()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "Object"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "InMemoryPath<Object,Heuristic<Integer,Object>>"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultHeuristicBuilder",
                            "DefaultHeuristicBuilder<Object,Heuristic<Integer,Object>,Heuristic<Object,Integer>>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/Heuristic",
                            "applyHeuristic"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/ArgumentMatchers",
                            "any"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultHeuristicBuilder",
                            "withHeuristic"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "54-70:test1": {
                    "start": 54,
                    "end": 70,
                    "body": [
                        "  public void test1()  throws Throwable  {\n",
                        "      UndirectedMutableGraph<Object, Integer> undirectedMutableGraph0 = new UndirectedMutableGraph<Object, Integer>();\n",
                        "      Mapper<Integer, Integer> mapper0 = (Mapper<Integer, Integer>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      IntegerWeightBaseOperations integerWeightBaseOperations0 = new IntegerWeightBaseOperations();\n",
                        "      DefaultHeuristicBuilder<Object, Integer, Integer> defaultHeuristicBuilder0 = new DefaultHeuristicBuilder<Object, Integer, Integer>(undirectedMutableGraph0, mapper0, undirectedMutableGraph0, mapper0, integerWeightBaseOperations0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultHeuristicBuilder0.withHeuristic((Heuristic<Object, Integer>) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // A* algorithm can not be applied using a null heuristic\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.utils.Assertions\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test1()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<Object,Integer>"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultHeuristicBuilder",
                            "DefaultHeuristicBuilder<Object,Integer,Integer>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultHeuristicBuilder",
                            "withHeuristic"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "31-51:test0": {
                    "start": 31,
                    "end": 51,
                    "body": [
                        "  public void test0()  throws Throwable  {\n",
                        "      UndirectedMutableGraph<Object, Integer> undirectedMutableGraph0 = new UndirectedMutableGraph<Object, Integer>();\n",
                        "      Mapper<Integer, Object> mapper0 = (Mapper<Integer, Object>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((String) null).when(mapper0).toString();\n",
                        "      OrderedMonoid<Object> orderedMonoid0 = (OrderedMonoid<Object>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null).when(orderedMonoid0).identity();\n",
                        "      DefaultHeuristicBuilder<Object, Integer, Object> defaultHeuristicBuilder0 = new DefaultHeuristicBuilder<Object, Integer, Object>(undirectedMutableGraph0, mapper0, mapper0, undirectedMutableGraph0, orderedMonoid0);\n",
                        "      Heuristic<Object, Object> heuristic0 = (Heuristic<Object, Object>) mock(Heuristic.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null).when(heuristic0).applyHeuristic(any() , any());\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultHeuristicBuilder0.withHeuristic(heuristic0);\n",
                        "        fail(\"Expecting exception: RuntimeException\");\n",
                        "      \n",
                        "      } catch(RuntimeException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.model.BaseGraph\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<Object,Integer>"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultHeuristicBuilder",
                            "DefaultHeuristicBuilder<Object,Integer,Object>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "toString"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/Heuristic",
                            "applyHeuristic"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/ArgumentMatchers",
                            "any"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultHeuristicBuilder",
                            "withHeuristic"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}