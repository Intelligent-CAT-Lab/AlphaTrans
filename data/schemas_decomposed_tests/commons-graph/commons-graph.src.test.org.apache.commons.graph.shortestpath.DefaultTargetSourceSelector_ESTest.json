{
    "path": "java_projects/cleaned_final_projects_evosuite/commons-graph/src/test/java/org/apache/commons/graph/shortestpath/DefaultTargetSourceSelector_ESTest.java",
    "imports": {
        "12-12:import Graph": {
            "start": 12,
            "end": 12,
            "body": [
                "import org.apache.commons.graph.Graph;\n"
            ]
        },
        "22-22:import EvoRunnerParameters": {
            "start": 22,
            "end": 22,
            "body": [
                "import org.evosuite.runtime.EvoRunnerParameters;\n"
            ]
        },
        "24-24:import RunWith": {
            "start": 24,
            "end": 24,
            "body": [
                "import org.junit.runner.RunWith;\n"
            ]
        },
        "21-21:import EvoRunner": {
            "start": 21,
            "end": 21,
            "body": [
                "import org.evosuite.runtime.EvoRunner;\n"
            ]
        },
        "8-8:import Test": {
            "start": 8,
            "end": 8,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "13-13:import Mapper": {
            "start": 13,
            "end": 13,
            "body": [
                "import org.apache.commons.graph.Mapper;\n"
            ]
        },
        "18-18:import OrderedMonoid": {
            "start": 18,
            "end": 18,
            "body": [
                "import org.apache.commons.graph.weight.OrderedMonoid;\n"
            ]
        },
        "14-14:import InMemoryPath": {
            "start": 14,
            "end": 14,
            "body": [
                "import org.apache.commons.graph.model.InMemoryPath;\n"
            ]
        },
        "15-15:import AllVertexPairsShortestPath": {
            "start": 15,
            "end": 15,
            "body": [
                "import org.apache.commons.graph.shortestpath.AllVertexPairsShortestPath;\n"
            ]
        },
        "17-17:import ShortestPathAlgorithmSelector": {
            "start": 17,
            "end": 17,
            "body": [
                "import org.apache.commons.graph.shortestpath.ShortestPathAlgorithmSelector;\n"
            ]
        },
        "16-16:import DefaultTargetSourceSelector": {
            "start": 16,
            "end": 16,
            "body": [
                "import org.apache.commons.graph.shortestpath.DefaultTargetSourceSelector;\n"
            ]
        },
        "19-19:import DoubleWeightBaseOperations": {
            "start": 19,
            "end": 19,
            "body": [
                "import org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations;\n"
            ]
        },
        "20-20:import FloatWeightBaseOperations": {
            "start": 20,
            "end": 20,
            "body": [
                "import org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations;\n"
            ]
        },
        "23-23:import ViolatedAssumptionAnswer": {
            "start": 23,
            "end": 23,
            "body": [
                "import org.evosuite.runtime.ViolatedAssumptionAnswer;\n"
            ]
        },
        "11-11:import static EvoAssertions.*": {
            "start": 11,
            "end": 11,
            "body": [
                "import static org.evosuite.runtime.EvoAssertions.*;\n"
            ]
        },
        "10-10:import static Mockito.*": {
            "start": 10,
            "end": 10,
            "body": [
                "import static org.evosuite.shaded.org.mockito.Mockito.*;\n"
            ]
        },
        "9-9:import static Assert.*": {
            "start": 9,
            "end": 9,
            "body": [
                "import static org.junit.Assert.*;\n"
            ]
        }
    },
    "classes": {
        "DefaultTargetSourceSelector_ESTest": {
            "start": 27,
            "end": 27,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "DefaultTargetSourceSelector_ESTest_scaffolding"
            ],
            "methods": {
                "163-169:test8": {
                    "start": 163,
                    "end": 169,
                    "body": [
                        "  public void test8()  throws Throwable  {\n",
                        "      DoubleWeightBaseOperations doubleWeightBaseOperations0 = new DoubleWeightBaseOperations();\n",
                        "      Mapper<DoubleWeightBaseOperations, DoubleWeightBaseOperations> mapper0 = (Mapper<DoubleWeightBaseOperations, DoubleWeightBaseOperations>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      DefaultTargetSourceSelector<DoubleWeightBaseOperations, DoubleWeightBaseOperations, DoubleWeightBaseOperations> defaultTargetSourceSelector0 = new DefaultTargetSourceSelector<DoubleWeightBaseOperations, DoubleWeightBaseOperations, DoubleWeightBaseOperations>((Graph<DoubleWeightBaseOperations, DoubleWeightBaseOperations>) null, mapper0, doubleWeightBaseOperations0);\n",
                        "      ShortestPathAlgorithmSelector<DoubleWeightBaseOperations, DoubleWeightBaseOperations, DoubleWeightBaseOperations> shortestPathAlgorithmSelector0 = defaultTargetSourceSelector0.to(doubleWeightBaseOperations0);\n",
                        "      assertNotNull(shortestPathAlgorithmSelector0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test8()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultTargetSourceSelector",
                            "DefaultTargetSourceSelector<DoubleWeightBaseOperations,DoubleWeightBaseOperations,DoubleWeightBaseOperations>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultTargetSourceSelector",
                            "to"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ]
                    ]
                },
                "149-160:test7": {
                    "start": 149,
                    "end": 160,
                    "body": [
                        "  public void test7()  throws Throwable  {\n",
                        "      FloatWeightBaseOperations floatWeightBaseOperations0 = new FloatWeightBaseOperations();\n",
                        "      InMemoryPath<FloatWeightBaseOperations, FloatWeightBaseOperations> inMemoryPath0 = new InMemoryPath<FloatWeightBaseOperations, FloatWeightBaseOperations>(floatWeightBaseOperations0, floatWeightBaseOperations0);\n",
                        "      FloatWeightBaseOperations floatWeightBaseOperations1 = new FloatWeightBaseOperations();\n",
                        "      inMemoryPath0.addConnectionInTail(floatWeightBaseOperations0, floatWeightBaseOperations0, floatWeightBaseOperations1);\n",
                        "      Mapper<FloatWeightBaseOperations, FloatWeightBaseOperations> mapper0 = (Mapper<FloatWeightBaseOperations, FloatWeightBaseOperations>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      DefaultTargetSourceSelector<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations> defaultTargetSourceSelector0 = new DefaultTargetSourceSelector<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations>(inMemoryPath0, mapper0, floatWeightBaseOperations1);\n",
                        "      OrderedMonoid<FloatWeightBaseOperations> orderedMonoid0 = (OrderedMonoid<FloatWeightBaseOperations>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null, (Object) null).when(orderedMonoid0).identity();\n",
                        "      AllVertexPairsShortestPath<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations> allVertexPairsShortestPath0 = defaultTargetSourceSelector0.applyingBelmannFord(orderedMonoid0);\n",
                        "      assertNotNull(allVertexPairsShortestPath0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test7()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations",
                            "FloatWeightBaseOperations",
                            "FloatWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "InMemoryPath<FloatWeightBaseOperations,FloatWeightBaseOperations>"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultTargetSourceSelector",
                            "DefaultTargetSourceSelector<FloatWeightBaseOperations,FloatWeightBaseOperations,FloatWeightBaseOperations>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultTargetSourceSelector",
                            "applyingBelmannFord"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "addConnectionInTail"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ]
                    ]
                },
                "134-146:test6": {
                    "start": 134,
                    "end": 146,
                    "body": [
                        "  public void test6()  throws Throwable  {\n",
                        "      FloatWeightBaseOperations floatWeightBaseOperations0 = new FloatWeightBaseOperations();\n",
                        "      InMemoryPath<FloatWeightBaseOperations, FloatWeightBaseOperations> inMemoryPath0 = new InMemoryPath<FloatWeightBaseOperations, FloatWeightBaseOperations>(floatWeightBaseOperations0, floatWeightBaseOperations0);\n",
                        "      inMemoryPath0.addConnectionInTail(floatWeightBaseOperations0, floatWeightBaseOperations0, floatWeightBaseOperations0);\n",
                        "      Mapper<FloatWeightBaseOperations, FloatWeightBaseOperations> mapper0 = (Mapper<FloatWeightBaseOperations, FloatWeightBaseOperations>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn(floatWeightBaseOperations0, (Object) null, (Object) null).when(mapper0).map(any(org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations.class));\n",
                        "      DefaultTargetSourceSelector<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations> defaultTargetSourceSelector0 = new DefaultTargetSourceSelector<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations>(inMemoryPath0, mapper0, floatWeightBaseOperations0);\n",
                        "      OrderedMonoid<FloatWeightBaseOperations> orderedMonoid0 = (OrderedMonoid<FloatWeightBaseOperations>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((-2), 0, 0).when(orderedMonoid0).compare(any(org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations.class) , any(org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations.class));\n",
                        "      doReturn(floatWeightBaseOperations0, (Object) null, (Object) null).when(orderedMonoid0).append(any(org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations.class) , any(org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations.class));\n",
                        "      doReturn(floatWeightBaseOperations0).when(orderedMonoid0).identity();\n",
                        "      defaultTargetSourceSelector0.applyingBelmannFord(orderedMonoid0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test6()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations",
                            "FloatWeightBaseOperations",
                            "FloatWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "InMemoryPath<FloatWeightBaseOperations,FloatWeightBaseOperations>"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultTargetSourceSelector",
                            "DefaultTargetSourceSelector<FloatWeightBaseOperations,FloatWeightBaseOperations,FloatWeightBaseOperations>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "addConnectionInTail"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Mapper",
                            "map"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/ArgumentMatchers",
                            "any"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "java.base/java/util/Comparator",
                            "compare"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "append"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultTargetSourceSelector",
                            "applyingBelmannFord"
                        ]
                    ]
                },
                "116-131:test5": {
                    "start": 116,
                    "end": 131,
                    "body": [
                        "  public void test5()  throws Throwable  {\n",
                        "      FloatWeightBaseOperations floatWeightBaseOperations0 = new FloatWeightBaseOperations();\n",
                        "      InMemoryPath<FloatWeightBaseOperations, FloatWeightBaseOperations> inMemoryPath0 = new InMemoryPath<FloatWeightBaseOperations, FloatWeightBaseOperations>(floatWeightBaseOperations0, floatWeightBaseOperations0);\n",
                        "      DefaultTargetSourceSelector<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations> defaultTargetSourceSelector0 = new DefaultTargetSourceSelector<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations>(inMemoryPath0, (Mapper<FloatWeightBaseOperations, FloatWeightBaseOperations>) null, floatWeightBaseOperations0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultTargetSourceSelector0.applyingBelmannFord((OrderedMonoid<FloatWeightBaseOperations>) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // Belmann-Ford algorithm can not be applied using null weight operations\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.utils.Assertions\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test5()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations",
                            "FloatWeightBaseOperations",
                            "FloatWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "InMemoryPath<FloatWeightBaseOperations,FloatWeightBaseOperations>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultTargetSourceSelector",
                            "DefaultTargetSourceSelector<FloatWeightBaseOperations,FloatWeightBaseOperations,FloatWeightBaseOperations>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultTargetSourceSelector",
                            "applyingBelmannFord"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "98-113:test4": {
                    "start": 98,
                    "end": 113,
                    "body": [
                        "  public void test4()  throws Throwable  {\n",
                        "      Float float0 = new Float(0.0);\n",
                        "      DefaultTargetSourceSelector<Float, OrderedMonoid<Float>, Float> defaultTargetSourceSelector0 = new DefaultTargetSourceSelector<Float, OrderedMonoid<Float>, Float>((Graph<Float, OrderedMonoid<Float>>) null, (Mapper<OrderedMonoid<Float>, Float>) null, float0);\n",
                        "      FloatWeightBaseOperations floatWeightBaseOperations0 = new FloatWeightBaseOperations();\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultTargetSourceSelector0.applyingBelmannFord((OrderedMonoid<Float>) floatWeightBaseOperations0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.shortestpath.DefaultTargetSourceSelector\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test4()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "Float"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultTargetSourceSelector",
                            "DefaultTargetSourceSelector<Float,OrderedMonoid<Float>,Float>"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations",
                            "FloatWeightBaseOperations",
                            "FloatWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultTargetSourceSelector",
                            "applyingBelmannFord"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "80-95:test3": {
                    "start": 80,
                    "end": 95,
                    "body": [
                        "  public void test3()  throws Throwable  {\n",
                        "      Double double0 = new Double(1739.0191174009544);\n",
                        "      InMemoryPath<Double, Double> inMemoryPath0 = new InMemoryPath<Double, Double>(double0, double0);\n",
                        "      DefaultTargetSourceSelector<Double, Double, OrderedMonoid<Double>> defaultTargetSourceSelector0 = new DefaultTargetSourceSelector<Double, Double, OrderedMonoid<Double>>(inMemoryPath0, (Mapper<Double, OrderedMonoid<Double>>) null, double0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultTargetSourceSelector0.to((Double) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // Shortest path can not be calculated to a null target\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.utils.Assertions\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test3()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Double",
                            "Double"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "InMemoryPath<Double,Double>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultTargetSourceSelector",
                            "DefaultTargetSourceSelector<Double,Double,OrderedMonoid<Double>>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultTargetSourceSelector",
                            "to"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "63-77:test2": {
                    "start": 63,
                    "end": 77,
                    "body": [
                        "  public void test2()  throws Throwable  {\n",
                        "      FloatWeightBaseOperations floatWeightBaseOperations0 = new FloatWeightBaseOperations();\n",
                        "      InMemoryPath<FloatWeightBaseOperations, FloatWeightBaseOperations> inMemoryPath0 = new InMemoryPath<FloatWeightBaseOperations, FloatWeightBaseOperations>(floatWeightBaseOperations0, floatWeightBaseOperations0);\n",
                        "      FloatWeightBaseOperations floatWeightBaseOperations1 = new FloatWeightBaseOperations();\n",
                        "      inMemoryPath0.addConnectionInTail(floatWeightBaseOperations1, floatWeightBaseOperations0, floatWeightBaseOperations0);\n",
                        "      Mapper<FloatWeightBaseOperations, FloatWeightBaseOperations> mapper0 = (Mapper<FloatWeightBaseOperations, FloatWeightBaseOperations>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(mapper0).map(any(org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations.class));\n",
                        "      DefaultTargetSourceSelector<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations> defaultTargetSourceSelector0 = new DefaultTargetSourceSelector<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations>(inMemoryPath0, mapper0, floatWeightBaseOperations1);\n",
                        "      OrderedMonoid<FloatWeightBaseOperations> orderedMonoid0 = (OrderedMonoid<FloatWeightBaseOperations>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn(0, 0).when(orderedMonoid0).compare(any(org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations.class) , any(org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations.class));\n",
                        "      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(orderedMonoid0).append(any(org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations.class) , any(org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations.class));\n",
                        "      doReturn((Object) null, (Object) null).when(orderedMonoid0).identity();\n",
                        "      AllVertexPairsShortestPath<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations> allVertexPairsShortestPath0 = defaultTargetSourceSelector0.applyingBelmannFord(orderedMonoid0);\n",
                        "      assertNotNull(allVertexPairsShortestPath0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test2()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations",
                            "FloatWeightBaseOperations",
                            "FloatWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "InMemoryPath<FloatWeightBaseOperations,FloatWeightBaseOperations>"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultTargetSourceSelector",
                            "DefaultTargetSourceSelector<FloatWeightBaseOperations,FloatWeightBaseOperations,FloatWeightBaseOperations>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultTargetSourceSelector",
                            "applyingBelmannFord"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "addConnectionInTail"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Mapper",
                            "map"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/ArgumentMatchers",
                            "any"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "java.base/java/util/Comparator",
                            "compare"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "append"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ]
                    ]
                },
                "46-60:test1": {
                    "start": 46,
                    "end": 60,
                    "body": [
                        "  public void test1()  throws Throwable  {\n",
                        "      FloatWeightBaseOperations floatWeightBaseOperations0 = new FloatWeightBaseOperations();\n",
                        "      InMemoryPath<FloatWeightBaseOperations, FloatWeightBaseOperations> inMemoryPath0 = new InMemoryPath<FloatWeightBaseOperations, FloatWeightBaseOperations>(floatWeightBaseOperations0, floatWeightBaseOperations0);\n",
                        "      FloatWeightBaseOperations floatWeightBaseOperations1 = new FloatWeightBaseOperations();\n",
                        "      inMemoryPath0.addConnectionInTail(floatWeightBaseOperations0, floatWeightBaseOperations1, floatWeightBaseOperations0);\n",
                        "      Mapper<FloatWeightBaseOperations, FloatWeightBaseOperations> mapper0 = (Mapper<FloatWeightBaseOperations, FloatWeightBaseOperations>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null, (Object) null, (Object) null).when(mapper0).map(any(org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations.class));\n",
                        "      DefaultTargetSourceSelector<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations> defaultTargetSourceSelector0 = new DefaultTargetSourceSelector<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations>(inMemoryPath0, mapper0, floatWeightBaseOperations0);\n",
                        "      OrderedMonoid<FloatWeightBaseOperations> orderedMonoid0 = (OrderedMonoid<FloatWeightBaseOperations>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn(0, 0, 0).when(orderedMonoid0).compare(any(org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations.class) , any(org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations.class));\n",
                        "      doReturn((Object) null, (Object) null, (Object) null).when(orderedMonoid0).append(any(org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations.class) , any(org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations.class));\n",
                        "      doReturn((Object) null).when(orderedMonoid0).identity();\n",
                        "      AllVertexPairsShortestPath<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations> allVertexPairsShortestPath0 = defaultTargetSourceSelector0.applyingBelmannFord(orderedMonoid0);\n",
                        "      assertNotNull(allVertexPairsShortestPath0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test1()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations",
                            "FloatWeightBaseOperations",
                            "FloatWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "InMemoryPath<FloatWeightBaseOperations,FloatWeightBaseOperations>"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultTargetSourceSelector",
                            "DefaultTargetSourceSelector<FloatWeightBaseOperations,FloatWeightBaseOperations,FloatWeightBaseOperations>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultTargetSourceSelector",
                            "applyingBelmannFord"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "addConnectionInTail"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Mapper",
                            "map"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/ArgumentMatchers",
                            "any"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "java.base/java/util/Comparator",
                            "compare"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "append"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ]
                    ]
                },
                "30-43:test0": {
                    "start": 30,
                    "end": 43,
                    "body": [
                        "  public void test0()  throws Throwable  {\n",
                        "      FloatWeightBaseOperations floatWeightBaseOperations0 = new FloatWeightBaseOperations();\n",
                        "      InMemoryPath<FloatWeightBaseOperations, FloatWeightBaseOperations> inMemoryPath0 = new InMemoryPath<FloatWeightBaseOperations, FloatWeightBaseOperations>(floatWeightBaseOperations0, floatWeightBaseOperations0);\n",
                        "      inMemoryPath0.addConnectionInTail(floatWeightBaseOperations0, floatWeightBaseOperations0, floatWeightBaseOperations0);\n",
                        "      Mapper<FloatWeightBaseOperations, FloatWeightBaseOperations> mapper0 = (Mapper<FloatWeightBaseOperations, FloatWeightBaseOperations>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn(floatWeightBaseOperations0, floatWeightBaseOperations0, floatWeightBaseOperations0).when(mapper0).map(any(org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations.class));\n",
                        "      DefaultTargetSourceSelector<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations> defaultTargetSourceSelector0 = new DefaultTargetSourceSelector<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations>(inMemoryPath0, mapper0, floatWeightBaseOperations0);\n",
                        "      OrderedMonoid<FloatWeightBaseOperations> orderedMonoid0 = (OrderedMonoid<FloatWeightBaseOperations>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((-4666), 1734, 2).when(orderedMonoid0).compare(any(org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations.class) , any(org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations.class));\n",
                        "      doReturn(floatWeightBaseOperations0, floatWeightBaseOperations0, floatWeightBaseOperations0).when(orderedMonoid0).append(any(org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations.class) , any(org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations.class));\n",
                        "      doReturn(floatWeightBaseOperations0).when(orderedMonoid0).identity();\n",
                        "      AllVertexPairsShortestPath<FloatWeightBaseOperations, FloatWeightBaseOperations, FloatWeightBaseOperations> allVertexPairsShortestPath0 = defaultTargetSourceSelector0.applyingBelmannFord(orderedMonoid0);\n",
                        "      assertNotNull(allVertexPairsShortestPath0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test0()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.FloatWeightBaseOperations",
                            "FloatWeightBaseOperations",
                            "FloatWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "InMemoryPath<FloatWeightBaseOperations,FloatWeightBaseOperations>"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultTargetSourceSelector",
                            "DefaultTargetSourceSelector<FloatWeightBaseOperations,FloatWeightBaseOperations,FloatWeightBaseOperations>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/DefaultTargetSourceSelector",
                            "applyingBelmannFord"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "addConnectionInTail"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Mapper",
                            "map"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/ArgumentMatchers",
                            "any"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "java.base/java/util/Comparator",
                            "compare"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "append"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}