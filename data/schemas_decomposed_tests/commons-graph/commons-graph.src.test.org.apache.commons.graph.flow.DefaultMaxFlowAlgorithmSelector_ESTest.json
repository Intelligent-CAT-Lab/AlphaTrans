{
    "path": "java_projects/cleaned_final_projects_evosuite/commons-graph/src/test/java/org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector_ESTest.java",
    "imports": {
        "14-14:import DirectedMutableGraph": {
            "start": 14,
            "end": 14,
            "body": [
                "import org.apache.commons.graph.model.DirectedMutableGraph;\n"
            ]
        },
        "18-18:import EvoRunnerParameters": {
            "start": 18,
            "end": 18,
            "body": [
                "import org.evosuite.runtime.EvoRunnerParameters;\n"
            ]
        },
        "20-20:import RunWith": {
            "start": 20,
            "end": 20,
            "body": [
                "import org.junit.runner.RunWith;\n"
            ]
        },
        "17-17:import EvoRunner": {
            "start": 17,
            "end": 17,
            "body": [
                "import org.evosuite.runtime.EvoRunner;\n"
            ]
        },
        "8-8:import Test": {
            "start": 8,
            "end": 8,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "12-12:import Mapper": {
            "start": 12,
            "end": 12,
            "body": [
                "import org.apache.commons.graph.Mapper;\n"
            ]
        },
        "13-13:import DefaultMaxFlowAlgorithmSelector": {
            "start": 13,
            "end": 13,
            "body": [
                "import org.apache.commons.graph.flow.DefaultMaxFlowAlgorithmSelector;\n"
            ]
        },
        "15-15:import OrderedMonoid": {
            "start": 15,
            "end": 15,
            "body": [
                "import org.apache.commons.graph.weight.OrderedMonoid;\n"
            ]
        },
        "16-16:import LongWeightBaseOperations": {
            "start": 16,
            "end": 16,
            "body": [
                "import org.apache.commons.graph.weight.primitive.LongWeightBaseOperations;\n"
            ]
        },
        "19-19:import ViolatedAssumptionAnswer": {
            "start": 19,
            "end": 19,
            "body": [
                "import org.evosuite.runtime.ViolatedAssumptionAnswer;\n"
            ]
        },
        "11-11:import static EvoAssertions.*": {
            "start": 11,
            "end": 11,
            "body": [
                "import static org.evosuite.runtime.EvoAssertions.*;\n"
            ]
        },
        "10-10:import static Mockito.*": {
            "start": 10,
            "end": 10,
            "body": [
                "import static org.evosuite.shaded.org.mockito.Mockito.*;\n"
            ]
        },
        "9-9:import static Assert.*": {
            "start": 9,
            "end": 9,
            "body": [
                "import static org.junit.Assert.*;\n"
            ]
        }
    },
    "classes": {
        "DefaultMaxFlowAlgorithmSelector_ESTest": {
            "start": 23,
            "end": 23,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "DefaultMaxFlowAlgorithmSelector_ESTest_scaffolding"
            ],
            "methods": {
                "250-265:test13": {
                    "start": 250,
                    "end": 265,
                    "body": [
                        "  public void test13()  throws Throwable  {\n",
                        "      DirectedMutableGraph<OrderedMonoid<Long>, Long> directedMutableGraph0 = new DirectedMutableGraph<OrderedMonoid<Long>, Long>();\n",
                        "      LongWeightBaseOperations longWeightBaseOperations0 = new LongWeightBaseOperations();\n",
                        "      DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>, Long, Long> defaultMaxFlowAlgorithmSelector0 = new DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>, Long, Long>(directedMutableGraph0, (Mapper<Long, Long>) null, longWeightBaseOperations0, longWeightBaseOperations0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultMaxFlowAlgorithmSelector0.applyingEdmondsKarp((OrderedMonoid<Long>) longWeightBaseOperations0);\n",
                        "        fail(\"Expecting exception: IllegalStateException\");\n",
                        "      \n",
                        "      } catch(IllegalStateException e) {\n",
                        "         //\n",
                        "         // Vertex org.apache.commons.graph.weight.primitive.LongWeightBaseOperations@2 does not exist in the Graph\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.utils.Assertions\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test13()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<OrderedMonoid<Long>,Long>"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.LongWeightBaseOperations",
                            "LongWeightBaseOperations",
                            "LongWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>,Long,Long>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "applyingEdmondsKarp"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "229-247:test12": {
                    "start": 229,
                    "end": 247,
                    "body": [
                        "  public void test12()  throws Throwable  {\n",
                        "      DirectedMutableGraph<OrderedMonoid<Long>, Long> directedMutableGraph0 = new DirectedMutableGraph<OrderedMonoid<Long>, Long>();\n",
                        "      LongWeightBaseOperations longWeightBaseOperations0 = new LongWeightBaseOperations();\n",
                        "      directedMutableGraph0.addVertex(longWeightBaseOperations0);\n",
                        "      Long long0 = new Long(0L);\n",
                        "      directedMutableGraph0.addEdge(longWeightBaseOperations0, long0, longWeightBaseOperations0);\n",
                        "      DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>, Long, Long> defaultMaxFlowAlgorithmSelector0 = new DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>, Long, Long>(directedMutableGraph0, (Mapper<Long, Long>) null, longWeightBaseOperations0, longWeightBaseOperations0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultMaxFlowAlgorithmSelector0.applyingEdmondsKarp((OrderedMonoid<Long>) longWeightBaseOperations0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.flow.DefaultMaxFlowAlgorithmSelector$MapperWrapper\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test12()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<OrderedMonoid<Long>,Long>"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.LongWeightBaseOperations",
                            "LongWeightBaseOperations",
                            "LongWeightBaseOperations"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Long",
                            "Long"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>,Long,Long>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "applyingEdmondsKarp"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "213-226:test11": {
                    "start": 213,
                    "end": 226,
                    "body": [
                        "  public void test11()  throws Throwable  {\n",
                        "      DirectedMutableGraph<OrderedMonoid<Long>, Long> directedMutableGraph0 = new DirectedMutableGraph<OrderedMonoid<Long>, Long>();\n",
                        "      LongWeightBaseOperations longWeightBaseOperations0 = new LongWeightBaseOperations();\n",
                        "      LongWeightBaseOperations longWeightBaseOperations1 = new LongWeightBaseOperations();\n",
                        "      directedMutableGraph0.addVertex(longWeightBaseOperations0);\n",
                        "      directedMutableGraph0.addVertex(longWeightBaseOperations1);\n",
                        "      Long long0 = new Long(1102L);\n",
                        "      directedMutableGraph0.addEdge(longWeightBaseOperations0, long0, longWeightBaseOperations1);\n",
                        "      Mapper<Long, Long> mapper0 = (Mapper<Long, Long>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null).when(mapper0).map(anyLong());\n",
                        "      DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>, Long, Long> defaultMaxFlowAlgorithmSelector0 = new DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>, Long, Long>(directedMutableGraph0, mapper0, longWeightBaseOperations1, longWeightBaseOperations1);\n",
                        "      // Undeclared exception!\n",
                        "      defaultMaxFlowAlgorithmSelector0.applyingFordFulkerson((OrderedMonoid<Long>) longWeightBaseOperations0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test11()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<OrderedMonoid<Long>,Long>"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.LongWeightBaseOperations",
                            "LongWeightBaseOperations",
                            "LongWeightBaseOperations"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Long",
                            "Long"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>,Long,Long>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Mapper",
                            "map"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/ArgumentMatchers",
                            "anyLong"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "applyingFordFulkerson"
                        ]
                    ]
                },
                "203-210:test10": {
                    "start": 203,
                    "end": 210,
                    "body": [
                        "  public void test10()  throws Throwable  {\n",
                        "      DirectedMutableGraph<OrderedMonoid<Long>, Long> directedMutableGraph0 = new DirectedMutableGraph<OrderedMonoid<Long>, Long>();\n",
                        "      LongWeightBaseOperations longWeightBaseOperations0 = new LongWeightBaseOperations();\n",
                        "      directedMutableGraph0.addVertex(longWeightBaseOperations0);\n",
                        "      DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>, Long, Long> defaultMaxFlowAlgorithmSelector0 = new DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>, Long, Long>(directedMutableGraph0, (Mapper<Long, Long>) null, longWeightBaseOperations0, longWeightBaseOperations0);\n",
                        "      // Undeclared exception!\n",
                        "      defaultMaxFlowAlgorithmSelector0.applyingEdmondsKarp((OrderedMonoid<Long>) longWeightBaseOperations0);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test10()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<OrderedMonoid<Long>,Long>"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.LongWeightBaseOperations",
                            "LongWeightBaseOperations",
                            "LongWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>,Long,Long>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "applyingEdmondsKarp"
                        ]
                    ]
                },
                "186-200:test09": {
                    "start": 186,
                    "end": 200,
                    "body": [
                        "  public void test09()  throws Throwable  {\n",
                        "      DirectedMutableGraph<OrderedMonoid<Long>, Long> directedMutableGraph0 = new DirectedMutableGraph<OrderedMonoid<Long>, Long>();\n",
                        "      DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>, Long, Long> defaultMaxFlowAlgorithmSelector0 = new DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>, Long, Long>(directedMutableGraph0, (Mapper<Long, Long>) null, (OrderedMonoid<Long>) null, (OrderedMonoid<Long>) null);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultMaxFlowAlgorithmSelector0.applyingEdmondsKarp((OrderedMonoid<Long>) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // Weight operations can not be null to find the max flow in the graph\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.utils.Assertions\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test09()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<OrderedMonoid<Long>,Long>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>,Long,Long>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "applyingEdmondsKarp"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "163-183:test08": {
                    "start": 163,
                    "end": 183,
                    "body": [
                        "  public void test08()  throws Throwable  {\n",
                        "      DirectedMutableGraph<OrderedMonoid<Long>, Long> directedMutableGraph0 = new DirectedMutableGraph<OrderedMonoid<Long>, Long>();\n",
                        "      LongWeightBaseOperations longWeightBaseOperations0 = new LongWeightBaseOperations();\n",
                        "      directedMutableGraph0.addVertex(longWeightBaseOperations0);\n",
                        "      Long long0 = new Long(3014L);\n",
                        "      directedMutableGraph0.addEdge(longWeightBaseOperations0, long0, longWeightBaseOperations0);\n",
                        "      directedMutableGraph0.removeVertex(longWeightBaseOperations0);\n",
                        "      Mapper<Long, Long> mapper0 = (Mapper<Long, Long>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>, Long, Long> defaultMaxFlowAlgorithmSelector0 = new DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>, Long, Long>(directedMutableGraph0, mapper0, longWeightBaseOperations0, longWeightBaseOperations0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultMaxFlowAlgorithmSelector0.applyingEdmondsKarp((OrderedMonoid<Long>) longWeightBaseOperations0);\n",
                        "        fail(\"Expecting exception: RuntimeException\");\n",
                        "      \n",
                        "      } catch(RuntimeException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.model.BaseGraph\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test08()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<OrderedMonoid<Long>,Long>"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.LongWeightBaseOperations",
                            "LongWeightBaseOperations",
                            "LongWeightBaseOperations"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Long",
                            "Long"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>,Long,Long>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "removeVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "applyingEdmondsKarp"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "145-160:test07": {
                    "start": 145,
                    "end": 160,
                    "body": [
                        "  public void test07()  throws Throwable  {\n",
                        "      DirectedMutableGraph<OrderedMonoid<Long>, Long> directedMutableGraph0 = new DirectedMutableGraph<OrderedMonoid<Long>, Long>();\n",
                        "      LongWeightBaseOperations longWeightBaseOperations0 = new LongWeightBaseOperations();\n",
                        "      DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>, Long, Long> defaultMaxFlowAlgorithmSelector0 = new DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>, Long, Long>(directedMutableGraph0, (Mapper<Long, Long>) null, longWeightBaseOperations0, longWeightBaseOperations0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultMaxFlowAlgorithmSelector0.applyingFordFulkerson((OrderedMonoid<Long>) longWeightBaseOperations0);\n",
                        "        fail(\"Expecting exception: IllegalStateException\");\n",
                        "      \n",
                        "      } catch(IllegalStateException e) {\n",
                        "         //\n",
                        "         // Vertex org.apache.commons.graph.weight.primitive.LongWeightBaseOperations@2 does not exist in the Graph\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.utils.Assertions\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test07()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<OrderedMonoid<Long>,Long>"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.LongWeightBaseOperations",
                            "LongWeightBaseOperations",
                            "LongWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>,Long,Long>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "applyingFordFulkerson"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "128-142:test06": {
                    "start": 128,
                    "end": 142,
                    "body": [
                        "  public void test06()  throws Throwable  {\n",
                        "      DirectedMutableGraph<OrderedMonoid<Long>, Long> directedMutableGraph0 = new DirectedMutableGraph<OrderedMonoid<Long>, Long>();\n",
                        "      DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>, Long, Long> defaultMaxFlowAlgorithmSelector0 = new DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>, Long, Long>(directedMutableGraph0, (Mapper<Long, Long>) null, (OrderedMonoid<Long>) null, (OrderedMonoid<Long>) null);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultMaxFlowAlgorithmSelector0.applyingFordFulkerson((OrderedMonoid<Long>) null);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // Weight operations can not be null to find the max flow in the graph\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.utils.Assertions\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test06()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<OrderedMonoid<Long>,Long>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>,Long,Long>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "applyingFordFulkerson"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "107-125:test05": {
                    "start": 107,
                    "end": 125,
                    "body": [
                        "  public void test05()  throws Throwable  {\n",
                        "      DirectedMutableGraph<OrderedMonoid<Long>, Long> directedMutableGraph0 = new DirectedMutableGraph<OrderedMonoid<Long>, Long>();\n",
                        "      LongWeightBaseOperations longWeightBaseOperations0 = new LongWeightBaseOperations();\n",
                        "      directedMutableGraph0.addVertex(longWeightBaseOperations0);\n",
                        "      Long long0 = new Long(0L);\n",
                        "      directedMutableGraph0.addEdge(longWeightBaseOperations0, long0, longWeightBaseOperations0);\n",
                        "      DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>, Long, Long> defaultMaxFlowAlgorithmSelector0 = new DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>, Long, Long>(directedMutableGraph0, (Mapper<Long, Long>) null, longWeightBaseOperations0, longWeightBaseOperations0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultMaxFlowAlgorithmSelector0.applyingFordFulkerson((OrderedMonoid<Long>) longWeightBaseOperations0);\n",
                        "        fail(\"Expecting exception: NullPointerException\");\n",
                        "      \n",
                        "      } catch(NullPointerException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.flow.DefaultMaxFlowAlgorithmSelector$MapperWrapper\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test05()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<OrderedMonoid<Long>,Long>"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.LongWeightBaseOperations",
                            "LongWeightBaseOperations",
                            "LongWeightBaseOperations"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Long",
                            "Long"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>,Long,Long>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "applyingFordFulkerson"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "84-104:test04": {
                    "start": 84,
                    "end": 104,
                    "body": [
                        "  public void test04()  throws Throwable  {\n",
                        "      DirectedMutableGraph<OrderedMonoid<Long>, Long> directedMutableGraph0 = new DirectedMutableGraph<OrderedMonoid<Long>, Long>();\n",
                        "      LongWeightBaseOperations longWeightBaseOperations0 = new LongWeightBaseOperations();\n",
                        "      directedMutableGraph0.addVertex(longWeightBaseOperations0);\n",
                        "      Long long0 = new Long(3014L);\n",
                        "      directedMutableGraph0.addEdge(longWeightBaseOperations0, long0, longWeightBaseOperations0);\n",
                        "      directedMutableGraph0.removeVertex(longWeightBaseOperations0);\n",
                        "      Mapper<Long, Long> mapper0 = (Mapper<Long, Long>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>, Long, Long> defaultMaxFlowAlgorithmSelector0 = new DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>, Long, Long>(directedMutableGraph0, mapper0, longWeightBaseOperations0, longWeightBaseOperations0);\n",
                        "      // Undeclared exception!\n",
                        "      try { \n",
                        "        defaultMaxFlowAlgorithmSelector0.applyingFordFulkerson((OrderedMonoid<Long>) longWeightBaseOperations0);\n",
                        "        fail(\"Expecting exception: RuntimeException\");\n",
                        "      \n",
                        "      } catch(RuntimeException e) {\n",
                        "         //\n",
                        "         // no message in exception (getMessage() returned null)\n",
                        "         //\n",
                        "         verifyException(\"org.apache.commons.graph.model.BaseGraph\", e);\n",
                        "      }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test04()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<OrderedMonoid<Long>,Long>"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.LongWeightBaseOperations",
                            "LongWeightBaseOperations",
                            "LongWeightBaseOperations"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Long",
                            "Long"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "DefaultMaxFlowAlgorithmSelector<OrderedMonoid<Long>,Long,Long>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "removeVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "applyingFordFulkerson"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail"
                        ],
                        [
                            "library",
                            "EvoAssertions",
                            "verifyException"
                        ]
                    ]
                },
                "69-81:test03": {
                    "start": 69,
                    "end": 81,
                    "body": [
                        "  public void test03()  throws Throwable  {\n",
                        "      Mapper<Long, OrderedMonoid<Long>> mapper0 = (Mapper<Long, OrderedMonoid<Long>>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      LongWeightBaseOperations longWeightBaseOperations0 = new LongWeightBaseOperations();\n",
                        "      DirectedMutableGraph<Long, Long> directedMutableGraph0 = new DirectedMutableGraph<Long, Long>();\n",
                        "      Long long0 = new Long(0L);\n",
                        "      directedMutableGraph0.addVertex(long0);\n",
                        "      Long long1 = Long.getLong((String) null);\n",
                        "      DefaultMaxFlowAlgorithmSelector<Long, Long, OrderedMonoid<Long>> defaultMaxFlowAlgorithmSelector0 = new DefaultMaxFlowAlgorithmSelector<Long, Long, OrderedMonoid<Long>>(directedMutableGraph0, mapper0, long0, long1);\n",
                        "      OrderedMonoid<OrderedMonoid<Long>> orderedMonoid0 = (OrderedMonoid<OrderedMonoid<Long>>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn(longWeightBaseOperations0).when(orderedMonoid0).identity();\n",
                        "      OrderedMonoid<Long> orderedMonoid1 = defaultMaxFlowAlgorithmSelector0.applyingEdmondsKarp(orderedMonoid0);\n",
                        "      assertSame(longWeightBaseOperations0, orderedMonoid1);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test03()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.LongWeightBaseOperations",
                            "LongWeightBaseOperations",
                            "LongWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<Long,Long>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Long",
                            "Long"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Long",
                            "getLong"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "DefaultMaxFlowAlgorithmSelector<Long,Long,OrderedMonoid<Long>>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "applyingEdmondsKarp"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertSame"
                        ]
                    ]
                },
                "55-66:test02": {
                    "start": 55,
                    "end": 66,
                    "body": [
                        "  public void test02()  throws Throwable  {\n",
                        "      Mapper<Long, OrderedMonoid<Long>> mapper0 = (Mapper<Long, OrderedMonoid<Long>>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      DirectedMutableGraph<Long, Long> directedMutableGraph0 = new DirectedMutableGraph<Long, Long>();\n",
                        "      Long long0 = new Long(0L);\n",
                        "      directedMutableGraph0.addVertex(long0);\n",
                        "      Long long1 = Long.getLong((String) null);\n",
                        "      DefaultMaxFlowAlgorithmSelector<Long, Long, OrderedMonoid<Long>> defaultMaxFlowAlgorithmSelector0 = new DefaultMaxFlowAlgorithmSelector<Long, Long, OrderedMonoid<Long>>(directedMutableGraph0, mapper0, long0, long1);\n",
                        "      OrderedMonoid<OrderedMonoid<Long>> orderedMonoid0 = (OrderedMonoid<OrderedMonoid<Long>>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null).when(orderedMonoid0).identity();\n",
                        "      OrderedMonoid<Long> orderedMonoid1 = defaultMaxFlowAlgorithmSelector0.applyingEdmondsKarp(orderedMonoid0);\n",
                        "      assertNull(orderedMonoid1);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test02()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<Long,Long>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Long",
                            "Long"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Long",
                            "getLong"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "DefaultMaxFlowAlgorithmSelector<Long,Long,OrderedMonoid<Long>>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "applyingEdmondsKarp"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull"
                        ]
                    ]
                },
                "40-52:test01": {
                    "start": 40,
                    "end": 52,
                    "body": [
                        "  public void test01()  throws Throwable  {\n",
                        "      Mapper<Long, OrderedMonoid<Long>> mapper0 = (Mapper<Long, OrderedMonoid<Long>>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      LongWeightBaseOperations longWeightBaseOperations0 = new LongWeightBaseOperations();\n",
                        "      DirectedMutableGraph<Long, Long> directedMutableGraph0 = new DirectedMutableGraph<Long, Long>();\n",
                        "      Long long0 = new Long(0L);\n",
                        "      directedMutableGraph0.addVertex(long0);\n",
                        "      Long long1 = Long.getLong((String) null);\n",
                        "      DefaultMaxFlowAlgorithmSelector<Long, Long, OrderedMonoid<Long>> defaultMaxFlowAlgorithmSelector0 = new DefaultMaxFlowAlgorithmSelector<Long, Long, OrderedMonoid<Long>>(directedMutableGraph0, mapper0, long0, long1);\n",
                        "      OrderedMonoid<OrderedMonoid<Long>> orderedMonoid0 = (OrderedMonoid<OrderedMonoid<Long>>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn(longWeightBaseOperations0).when(orderedMonoid0).identity();\n",
                        "      OrderedMonoid<Long> orderedMonoid1 = defaultMaxFlowAlgorithmSelector0.applyingFordFulkerson(orderedMonoid0);\n",
                        "      assertSame(longWeightBaseOperations0, orderedMonoid1);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test01()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.LongWeightBaseOperations",
                            "LongWeightBaseOperations",
                            "LongWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<Long,Long>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Long",
                            "Long"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Long",
                            "getLong"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "DefaultMaxFlowAlgorithmSelector<Long,Long,OrderedMonoid<Long>>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "applyingFordFulkerson"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertSame"
                        ]
                    ]
                },
                "26-37:test00": {
                    "start": 26,
                    "end": 37,
                    "body": [
                        "  public void test00()  throws Throwable  {\n",
                        "      Mapper<Long, OrderedMonoid<Long>> mapper0 = (Mapper<Long, OrderedMonoid<Long>>) mock(Mapper.class, new ViolatedAssumptionAnswer());\n",
                        "      DirectedMutableGraph<Long, Long> directedMutableGraph0 = new DirectedMutableGraph<Long, Long>();\n",
                        "      Long long0 = new Long(0L);\n",
                        "      directedMutableGraph0.addVertex(long0);\n",
                        "      Long long1 = Long.getLong((String) null);\n",
                        "      DefaultMaxFlowAlgorithmSelector<Long, Long, OrderedMonoid<Long>> defaultMaxFlowAlgorithmSelector0 = new DefaultMaxFlowAlgorithmSelector<Long, Long, OrderedMonoid<Long>>(directedMutableGraph0, mapper0, long0, long1);\n",
                        "      OrderedMonoid<OrderedMonoid<Long>> orderedMonoid0 = (OrderedMonoid<OrderedMonoid<Long>>) mock(OrderedMonoid.class, new ViolatedAssumptionAnswer());\n",
                        "      doReturn((Object) null).when(orderedMonoid0).identity();\n",
                        "      OrderedMonoid<Long> orderedMonoid1 = defaultMaxFlowAlgorithmSelector0.applyingFordFulkerson(orderedMonoid0);\n",
                        "      assertNull(orderedMonoid1);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(timeout = 4000)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test00()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "mock"
                        ],
                        [
                            "library",
                            "/org/evosuite/runtime/ViolatedAssumptionAnswer",
                            "ViolatedAssumptionAnswer"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<Long,Long>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Long",
                            "Long"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Long",
                            "getLong"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "DefaultMaxFlowAlgorithmSelector<Long,Long,OrderedMonoid<Long>>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector",
                            "applyingFordFulkerson"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/stubbing/Stubber",
                            "when"
                        ],
                        [
                            "library",
                            "/org/evosuite/shaded/org/mockito/Mockito",
                            "doReturn"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}